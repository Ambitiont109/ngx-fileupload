var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.17,1,2.126]],["body/classes/AndValidator.html",[0,0.192,1,3.16,2,1.43,3,0.271,4,0.271,5,0.41,6,0.155,7,3.095,8,4.053,9,3.387,10,0.313,11,1.382,12,4.189,13,2.129,14,1.185,15,1.443,16,3.077,17,2.445,18,3.738,19,3.542,20,3.542,21,0.372,22,0.03,23,2.9,24,4.976,25,1.174,26,3.095,27,3.183,28,3.688,29,1.402,30,0.845,31,1.197,32,0.816,33,1.878,34,1.174,35,2.705,36,3.095,37,1.096,38,3.095,39,2.705,40,2.705,41,1.974,42,1.734,43,3.095,44,2.705,45,1.43,46,0.026,47,3.095,48,0.524,49,2.705,50,3.688,51,0.271,52,1.933,53,4.053,54,5.384,55,1.675,56,2.705,57,3.095,58,3.095,59,1.138,60,0.495,61,0.021,62,0.016]],["title/directives/FileBrowserDirective.html",[63,1.75,64,1.604]],["body/directives/FileBrowserDirective.html",[0,0.121,3,0.171,4,0.171,5,0.379,6,0.195,10,0.197,15,1.341,17,2.467,21,0.34,22,0.03,25,1.155,29,0.856,30,0.688,31,0.73,32,0.311,34,0.672,37,0.527,41,1.743,42,1.503,46,0.01,48,0.568,51,0.171,52,1.67,55,2.113,59,1.076,60,0.311,61,0.015,62,0.01,63,2.685,64,1.72,65,1.702,66,5.081,67,1.948,68,1.146,69,1.503,70,4.985,71,5.431,72,1.461,73,2.738,74,3.512,75,0.962,76,1.372,77,2.28,78,3.84,79,2.556,80,3.069,81,3.512,82,2.738,83,3.512,84,2.925,85,2.925,86,3.095,87,3.485,88,1.72,89,1.076,90,2.321,91,4.652,92,4.185,93,3.044,94,2.321,95,2.925,96,2.925,97,3.485,98,3.485,99,2.685,100,2.505,101,2.321,102,2.321,103,3.411,104,1.436,105,4.985,106,2.556,107,1.131,108,3.485,109,2.065,110,2.321,111,2.321,112,1.197,113,2.556,114,1.16,115,1.95,116,2.925,117,3.485,118,2.556,119,2.321,120,3.411,121,2.321,122,2.556,123,3.512,124,2.776,125,1.948,126,2.28,127,2.321,128,2.556,129,3.485,130,2.06,131,2.321,132,4.652,133,2.321,134,2.75,135,3.485,136,2.321,137,2.321,138,2.321,139,3.044,140,1.702,141,3.739,142,2.556,143,0.973,144,1.291,145,0.527,146,1.702,147,0.664,148,2.321,149,2.321,150,2.321,151,2.321,152,2.321,153,3.485,154,1.599,155,0.973,156,2.321,157,1.146,158,1.461,159,1.622,160,1.076,161,4.185,162,3.485,163,2.321,164,3.485,165,2.321,166,2.321,167,2.321,168,1.519,169,1.519,170,2.321,171,2.321,172,2.321,173,3.044,174,3.411,175,2.321,176,2.321,177,3.485,178,3.904,179,2.321,180,3.485,181,1.702,182,2.321,183,2.321,184,2.321,185,2.321,186,2.321,187,2.321,188,2.321,189,2.321,190,2.321,191,2.321,192,2.321,193,2.06,194,2.321,195,3.485,196,2.321,197,2.321,198,2.321,199,2.321,200,2.321,201,3.485,202,2.321,203,3.485,204,2.556,205,2.321,206,1.519,207,1.948,208,2.321,209,1.197,210,2.321,211,2.321,212,1.054,213,2.321,214,2.321,215,2.321,216,2.321,217,2.321,218,1.054,219,2.321,220,2.321]],["title/pipes/FileSizePipe.html",[221,1.003,222,1.921]],["body/pipes/FileSizePipe.html",[0,0.233,3,0.328,4,0.328,5,0.28,6,0.175,14,1.097,21,0.28,22,0.03,25,0.862,29,1.097,30,0.87,31,0.936,32,0.6,46,0.02,48,0.485,51,0.328,60,0.6,61,0.024,62,0.02,72,1.873,76,2.641,107,1.237,143,1.873,154,1.279,221,1.683,222,3.223,223,3.277,224,4.576,225,3.75,226,3.999,227,3.277,228,5.452,229,1.958,230,4.468,231,2.285,232,4.576,233,4.468,234,3.75,235,4.468,236,4.468,237,4.468,238,5.142,239,4.468,240,4.468,241,5.884,242,1.014,243,5.452,244,4.468,245,4.468,246,4.468]],["title/injectables/FileUploadFactory.html",[93,2.126,247,2.126]],["body/injectables/FileUploadFactory.html",[0,0.217,3,0.306,4,0.306,5,0.386,6,0.192,10,0.353,14,1.281,15,1.463,21,0.327,22,0.03,25,1.1,29,1.281,30,0.772,31,1.093,32,0.7,46,0.018,48,0.668,51,0.306,52,1.494,60,0.7,61,0.023,62,0.018,89,1.61,93,3.414,109,2.95,143,1.745,147,1.631,154,1.191,160,1.759,247,3.414,248,4.162,249,3.493,250,5.976,251,5.218,252,4.162,253,4.606,254,4.162,255,4.162,256,5.218,257,4.383,258,3.533,259,4.162,260,2.723,261,1.284,262,2.46,263,4.162,264,4.162,265,4.162,266,4.162,267,4.379,268,4.162,269,4.162]],["title/interfaces/FileUploadItemContext.html",[270,0.204,271,1.921]],["body/interfaces/FileUploadItemContext.html",[0,0.162,3,0.229,4,0.229,5,0.27,6,0.1,10,0.264,11,1.232,15,1.411,21,0.27,22,0.03,37,0.706,46,0.014,48,0.644,51,0.317,59,0.96,60,0.418,61,0.019,62,0.014,72,1.304,73,2.818,75,1.113,77,2.036,86,1.84,89,0.96,104,1.787,112,1.413,120,4.104,124,1.956,126,2.036,140,2.282,141,3.232,142,3.622,143,1.304,144,1.645,145,0.706,147,1.413,154,1.232,155,1.304,157,2.438,158,1.304,159,1.67,160,1.645,168,2.036,173,2.036,174,2.282,181,2.282,206,2.036,209,1.232,212,1.413,221,1.329,242,0.706,261,1.329,262,1.84,270,0.195,271,2.92,272,0.96,273,2.036,274,2.282,275,4.697,276,3.151,277,1.774,278,2.612,279,4.104,280,3.614,281,1.536,282,2.126,283,1.304,284,2.036,285,2.612,286,4.145,287,2.036,288,3.232,289,2.818,290,2.282,291,2.612,292,2.282,293,2.612,294,1.536,295,0.89,296,2.612,297,3.788,298,3.614,299,2.612,300,4.145,301,3.614,302,2.612,303,3.614,304,2.282,305,1.036,306,2.612,307,2.612,308,2.612,309,2.612,310,2.282,311,2.612,312,2.612,313,2.612,314,1.67,315,2.612,316,2.612,317,2.612,318,2.612,319,2.612,320,0.652,321,2.612,322,2.612,323,2.612,324,2.036,325,2.282,326,2.282,327,2.612,328,2.612,329,2.612,330,2.282,331,2.612,332,3.614,333,1.536,334,2.612,335,2.612,336,1.84,337,0.96,338,1.84,339,2.612,340,2.612,341,2.612,342,2.612,343,1.536,344,2.282,345,2.612,346,2.612,347,2.612,348,2.612,349,2.612,350,1.304,351,1.206,352,2.612,353,2.612,354,2.612,355,2.612,356,2.612,357,2.612,358,2.612]],["title/classes/GroupedValidator.html",[0,0.17,9,1.75]],["body/classes/GroupedValidator.html",[0,0.243,2,1.358,3,0.257,4,0.257,5,0.402,6,0.197,9,2.513,10,0.297,11,1.335,12,4.397,13,2.302,14,1.146,15,1.455,16,2.827,17,2.542,18,3.923,19,3.422,20,4.105,21,0.365,22,0.03,23,3.349,25,1.157,27,2.759,29,1.374,30,0.828,31,1.173,32,0.805,33,1.799,34,1.08,35,2.568,37,1.191,39,3.422,40,3.422,41,2.134,42,2.01,44,3.422,45,2.035,46,0.023,48,0.38,51,0.257,56,3.849,60,0.626,61,0.021,62,0.015,72,1.956,89,1.44,134,2.759,310,2.568,359,2.939,360,3.502,361,4.667,362,2.939,363,3.502,364,3.502,365,3.502,366,3.502,367,2.939,368,3.502,369,3.502,370,3.502,371,3.502,372,2.568,373,3.502]],["title/interfaces/IDataNode.html",[270,0.204,374,2.383]],["body/interfaces/IDataNode.html",[3,0.369,4,0.369,5,0.315,6,0.188,22,0.029,25,0.969,45,1.947,46,0.022,51,0.455,61,0.026,62,0.022,75,0.89,107,1.327,270,0.315,272,1.55,374,4.287,375,4.215,376,4.215,377,3.456,378,5.022]],["title/modules/NgxFileUploadModule.html",[379,2.383,380,2.126]],["body/modules/NgxFileUploadModule.html",[0,0.206,3,0.29,4,0.29,5,0.316,6,0.127,22,0.03,46,0.017,48,0.672,51,0.29,61,0.022,62,0.017,64,3.242,143,1.654,222,3.883,260,2.582,294,3.242,379,2.894,380,4.396,381,2.894,382,2.582,383,2.582,384,4.667,385,3.311,386,3.311,387,4.667,388,3.311,389,3.311,390,3.311,391,3.883,392,3.538,393,4.234,394,1.654,395,3.311,396,3.946,397,3.946,398,5.045,399,5.045,400,3.311,401,5.045,402,3.946,403,3.946,404,3.946,405,3.946,406,3.946,407,3.946]],["title/classes/OrValidator.html",[0,0.17,408,2.126]],["body/classes/OrValidator.html",[0,0.194,2,1.441,3,0.273,4,0.273,5,0.41,6,0.156,8,4.073,9,3.392,10,0.315,11,1.389,12,4.202,13,2.134,14,1.191,15,1.445,16,3.086,17,2.454,18,3.749,19,3.559,20,3.559,21,0.372,22,0.03,23,2.911,24,4.989,25,1.176,26,3.119,27,3.195,29,1.406,30,0.847,31,1.2,32,0.818,33,1.881,34,1.198,35,2.726,36,3.119,37,1.101,38,3.119,39,2.726,40,2.726,41,1.978,42,1.743,43,3.119,44,2.726,45,1.441,46,0.026,47,3.119,48,0.527,49,2.726,51,0.273,52,1.743,53,4.535,56,2.726,57,3.119,58,3.119,60,0.499,61,0.021,62,0.016,367,3.119,408,3.175,409,3.119,410,3.716,411,2.726]],["title/interfaces/QueueState.html",[270,0.204,412,1.75]],["body/interfaces/QueueState.html",[0,0.146,3,0.206,4,0.206,5,0.175,6,0.09,10,0.237,11,1.143,15,1.221,21,0.25,22,0.03,32,0.375,34,0.981,46,0.012,48,0.584,51,0.294,52,1.826,55,1.27,60,0.682,61,0.018,62,0.012,69,1.826,75,1.02,89,0.863,112,0.8,114,1.916,130,2.362,145,0.635,147,1.829,154,1.807,155,1.675,158,1.172,159,1.084,160,1.439,193,1.653,209,1.539,212,1.815,221,1.233,229,0.931,242,1.058,270,0.175,272,0.863,281,1.38,282,1.38,283,1.172,295,0.8,305,1.692,320,0.837,350,1.675,351,1.549,412,2.152,413,2.051,414,1.916,415,3.66,416,1.653,417,1.674,418,2.347,419,2.51,420,1.83,421,1.83,422,1.815,423,2.614,424,1.83,425,1.83,426,2.347,427,2.347,428,1.506,429,2.614,430,2.347,431,2.347,432,2.347,433,1.954,434,1.004,435,1.83,436,2.347,437,2.347,438,2.347,439,2.347,440,1.38,441,3.353,442,2.347,443,2.347,444,2.347,445,2.347,446,3.353,447,2.347,448,2.347,449,2.347,450,1.38,451,2.347,452,3.912,453,3.912,454,4.267,455,2.93,456,1.439,457,1.83,458,3.353,459,2.347,460,2.347,461,1.172,462,2.614,463,1.83,464,2.347,465,1.38,466,2.347,467,2.347,468,3.353,469,1.653,470,2.347,471,2.347,472,3.05,473,2.347,474,2.347,475,2.347,476,1.653,477,2.347,478,1.675,479,3.353,480,2.347,481,2.347,482,2.347,483,2.347,484,1.653,485,2.347,486,2.347,487,2.347,488,2.347,489,2.347,490,2.347,491,2.347,492,2.347,493,2.347,494,2.347,495,2.347,496,1.004,497,1.83,498,2.347,499,2.347,500,2.347,501,2.347,502,2.347,503,2.347,504,2.347,505,2.347,506,0.931,507,2.347,508,1.172,509,2.347,510,2.347,511,2.347,512,2.347,513,2.347,514,2.347,515,2.347,516,2.347,517,2.347,518,2.347,519,2.347,520,2.347,521,1.83,522,2.347]],["title/pipes/StateToStringPipe.html",[221,1.003,391,1.921]],["body/pipes/StateToStringPipe.html",[0,0.233,3,0.328,4,0.328,5,0.279,6,0.175,14,1.095,21,0.279,22,0.03,25,0.86,29,1.095,30,0.869,31,0.934,32,0.599,46,0.02,48,0.591,51,0.328,60,0.868,61,0.024,62,0.02,72,1.87,76,2.637,99,2.402,107,1.236,143,1.87,221,1.681,223,3.271,227,3.271,232,4.571,281,2.201,295,1.752,320,0.934,337,1.376,391,3.22,414,1.484,456,1.376,469,2.637,484,2.637,523,4.571,524,3.743,525,5.446,526,5.446,527,4.46,528,2.111,529,3.271,530,4.684,531,2.918,532,2.201,533,3.271,534,1.601,535,3.271,536,2.918,537,1.729]],["title/interfaces/Upload.html",[75,0.576,270,0.204]],["body/interfaces/Upload.html",[3,0.21,4,0.21,5,0.378,6,0.181,10,0.243,11,1.162,13,1.459,14,0.997,21,0.255,22,0.03,25,1.047,30,0.601,32,0.83,33,1.254,34,0.552,37,1.279,45,1.831,46,0.013,48,0.512,51,0.414,59,1.74,60,0.545,61,0.018,62,0.018,69,1.028,75,1.166,104,1.74,107,0.922,112,1.351,114,1.806,115,1.2,144,1.254,145,0.65,209,1.613,218,1.845,229,1.71,231,1.979,242,0.65,261,0.883,270,0.34,272,0.883,277,1.71,295,1.162,305,1.352,314,1.831,320,0.989,337,0.883,343,2.33,394,2.154,414,0.953,417,2.024,433,1.2,434,1.459,440,1.413,456,1.74,461,1.703,465,1.413,478,1.703,496,2.127,506,1.972,508,1.703,528,2.185,532,1.413,534,1.695,537,1.575,538,1.413,539,2.465,540,2.465,541,2.334,542,2.862,543,2.862,544,2.536,545,2.005,546,2.005,547,1.695,548,2.144,549,2.862,550,2.005,551,2.862,552,2.005,553,2.334,554,2.862,555,2.401,556,1.703,557,1.692,558,1.692,559,1.413,560,1.542,561,1.3,562,1.11,563,1.413,564,1.575,565,1.845,566,2.005,567,1.692,568,1.692,569,1.692,570,1.692,571,1.692,572,2.005,573,1.692,574,1.692,575,1.692,576,1.692,577,1.692,578,1.692,579,1.3,580,1.3,581,1.3,582,2.401,583,1.413,584,1.692,585,1.692,586,1.3]],["title/classes/UploadControl.html",[0,0.17,276,1.921]],["body/classes/UploadControl.html",[0,0.169,2,1.256,3,0.238,4,0.238,5,0.203,6,0.189,10,0.275,14,1.087,15,1.466,17,1.472,21,0.356,22,0.03,25,1.095,29,1.394,30,0.84,31,1.189,32,0.728,37,1.231,46,0.014,48,0.481,51,0.238,61,0.019,62,0.014,68,1.599,74,3.717,75,1.082,86,1.916,89,1.367,124,2.774,126,4.225,145,0.735,147,1.552,154,1.267,155,1.856,173,2.12,242,0.735,276,2.618,288,3.301,289,2.898,297,2.898,320,0.928,326,3.248,333,1.599,337,1,338,2.982,351,1.256,362,4.551,416,1.916,455,2.377,456,1.809,496,2.039,541,2.662,547,1.59,587,2.72,588,4.428,589,4.428,590,4.298,591,2.72,592,4.428,593,4.551,594,3.24,595,3.24,596,4.428,597,3.24,598,4.428,599,3.24,600,4.428,601,3.248,602,4.428,603,4.428,604,2.618,605,3.248,606,4.428,607,4.428,608,4.428,609,3.24,610,4.428,611,3.24,612,3.24,613,2.72,614,3.24,615,5.045,616,3.24,617,3.24,618,3.24,619,3.24,620,2.377,621,2.72,622,3.24,623,2.12,624,3.24,625,3.24,626,3.24,627,3.24]],["title/interfaces/UploadData.html",[270,0.204,277,1.082]],["body/interfaces/UploadData.html",[3,0.207,4,0.207,5,0.338,6,0.091,10,0.239,11,1.151,13,1.014,21,0.386,22,0.03,30,0.83,32,0.753,33,1.241,34,0.545,37,1.063,45,2.238,46,0.012,48,0.508,51,0.412,59,1.732,60,0.379,61,0.018,62,0.021,69,1.014,75,1.17,104,1.241,107,1.273,112,1.151,114,1.922,115,1.183,144,0.871,145,0.641,209,1.151,218,1.282,229,2.028,231,2.474,242,0.641,261,0.871,270,0.338,272,0.871,277,1.559,295,1.461,305,1.339,314,1.816,320,0.842,337,0.871,343,2.312,394,1.686,414,0.939,417,1.682,433,1.686,434,1.014,440,1.393,456,1.576,461,1.183,465,1.393,478,1.183,496,1.682,506,2.072,508,1.183,528,2.288,532,1.393,534,2.073,537,1.816,538,1.393,539,2.451,540,2.451,541,1.282,544,1.985,545,1.393,546,1.393,547,1.682,548,2.451,550,1.393,552,1.393,553,2.128,555,1.669,556,1.183,557,1.669,558,1.669,559,1.393,560,1.52,561,1.282,562,1.094,563,1.393,564,1.98,565,2.128,566,2.52,567,2.377,568,2.377,569,2.377,570,2.377,571,2.377,572,2.769,573,2.377,574,2.377,575,2.377,576,2.377,577,2.377,578,2.377,579,2.319,580,1.827,581,2.319,582,2.377,583,1.393,584,1.669,585,1.669,586,1.282]],["title/components/UploadItemComponent.html",[157,1.604,294,1.604]],["body/components/UploadItemComponent.html",[0,0.088,3,0.125,4,0.125,5,0.171,6,0.181,10,0.231,11,0.781,14,0.67,15,1.363,21,0.27,22,0.03,25,1.07,29,0.67,30,0.636,31,0.571,32,0.46,37,0.777,46,0.007,48,0.563,51,0.201,59,0.523,60,0.227,61,0.012,62,0.007,63,0.913,64,0.836,65,1.243,68,0.836,72,1.143,73,2.24,75,1.14,76,1.002,77,2.815,78,1.243,79,2.001,80,1.243,84,2.289,85,2.289,86,2.32,88,1.346,89,1.057,99,1.469,100,0.913,104,1.211,112,1.231,115,1.143,116,1.422,120,3.545,123,1.422,124,1.555,125,1.422,126,1.785,128,1.243,140,1.243,141,2.24,142,2.511,143,0.71,144,1.211,145,0.385,147,0.98,154,0.781,155,1.143,157,1.937,158,0.71,159,1.058,160,1.211,168,1.109,173,1.109,174,1.243,181,1.243,206,3.395,207,2.289,209,0.781,212,0.77,221,1.057,226,2.001,227,1.243,229,0.564,231,2.026,242,1.397,261,0.842,262,1.002,270,0.106,271,2.024,273,3.688,274,1.243,275,2.289,276,1.613,277,0.908,278,1.422,279,3.687,280,2.874,281,0.836,282,1.346,283,0.71,284,1.109,285,1.422,286,3.858,287,2.815,288,3.289,289,3.898,290,2.001,291,2.289,292,2.001,293,2.874,294,1.937,295,0.98,296,2.289,297,3.827,298,3.294,299,2.874,300,3.858,301,2.874,302,1.422,303,2.289,304,1.243,305,1.14,306,1.422,307,1.422,308,1.422,309,1.422,310,1.243,311,2.874,312,2.874,313,2.874,314,1.522,315,1.422,316,1.422,317,1.422,318,1.422,319,1.422,320,0.717,321,2.874,322,1.422,323,1.422,324,2.24,325,2.878,326,2.511,327,2.874,328,1.422,329,1.422,330,1.243,331,1.422,332,2.874,333,0.836,334,1.422,335,2.289,336,1.613,337,0.842,338,1.613,339,2.289,340,2.289,341,1.422,342,1.422,343,0.836,344,1.243,345,1.422,346,1.422,347,1.422,348,1.422,349,1.422,350,0.71,351,0.657,352,1.422,353,1.422,354,1.422,355,2.289,356,2.289,357,2.289,358,3.294,377,1.613,383,1.109,392,0.913,422,2.088,496,0.608,528,1.058,534,0.98,547,1.229,562,0.657,563,0.836,565,0.77,572,1.346,620,2.001,628,2.001,629,1.422,630,1.422,631,1.422,632,2.728,633,2.728,634,2.728,635,2.728,636,1.694,637,1.694,638,1.694,639,1.694,640,1.694,641,1.694,642,1.694,643,1.694,644,3.925,645,2.728,646,2.728,647,2.728,648,1.422,649,4.056,650,1.422,651,1.422,652,1.422,653,1.422,654,1.422,655,3.858,656,3.61,657,3.294,658,4.569,659,2.289,660,1.422,661,4.056,662,3.424,663,4.219,664,4.47,665,2.874,666,1.422,667,3.858,668,3.294,669,3.424,670,1.694,671,1.694,672,1.694,673,1.694,674,1.694,675,1.694,676,4.056,677,3.925,678,1.694,679,1.694,680,1.694,681,3.925,682,2.728,683,3.371,684,1.694,685,2.568,686,1.694,687,1.694,688,1.694,689,2.728,690,1.694,691,1.694,692,1.694,693,2.289,694,1.694,695,1.694,696,1.694,697,1.694,698,1.694,699,1.694,700,2.728,701,1.422,702,1.422,703,3.424,704,1.694,705,1.694,706,1.694,707,4.056,708,1.694,709,2.728,710,2.728,711,2.874,712,3.294,713,2.728,714,2.289,715,2.874,716,2.728,717,2.874,718,1.694,719,2.289,720,2.874,721,3.61,722,3.424,723,1.422,724,1.694,725,2.728,726,2.289,727,2.728,728,2.874,729,2.728,730,1.694,731,1.243,732,1.694,733,1.694,734,2.728,735,1.694,736,1.694,737,2.289,738,1.694,739,1.694,740,1.694,741,1.694,742,2.289,743,1.422,744,1.694,745,1.422,746,1.422,747,1.422,748,1.694,749,1.694,750,2.289,751,1.694,752,1.694,753,2.289,754,2.289,755,1.694,756,1.694,757,1.694,758,1.109,759,1.694,760,2.289,761,3.294,762,1.422,763,1.422,764,1.422]],["title/classes/UploadModel.html",[0,0.17,261,1.003]],["body/classes/UploadModel.html",[0,0.117,2,0.87,3,0.165,4,0.165,5,0.396,6,0.206,10,0.19,14,0.834,15,1.463,21,0.324,22,0.03,25,1.23,29,1.318,30,0.818,31,1.125,32,0.849,33,1.595,34,0.882,37,1.173,45,0.87,46,0.01,48,0.369,51,0.165,52,0.806,55,1.862,59,1.048,60,0.834,61,0.015,62,0.01,68,1.107,75,1.022,88,1.677,89,0.692,95,2.851,96,2.851,104,1.595,107,1.255,112,1.701,154,1.582,226,3.603,229,1.84,231,2.059,234,2.851,238,2.851,242,0.509,261,1.048,267,1.883,277,1.365,295,1.406,314,1.773,320,0.958,414,1.131,506,1.72,528,2.237,531,1.468,534,1.856,536,1.468,539,2.077,540,2.077,548,2.621,553,1.862,564,2.004,572,2.848,579,2.077,580,1.543,581,2.077,685,2.683,765,1.883,766,2.492,767,4.573,768,4.913,769,4.1,770,4.1,771,3.397,772,2.244,773,3.007,774,2.244,775,2.244,776,2.244,777,3.397,778,2.244,779,2.244,780,2.244,781,2.244,782,2.244,783,2.244,784,3.397,785,2.244,786,2.244,787,2.244,788,2.244,789,2.244,790,2.244,791,2.244,792,2.244,793,2.244,794,2.244,795,1.883,796,2.244,797,2.244,798,2.244,799,1.883,800,2.244,801,1.883,802,2.244,803,2.244,804,2.244,805,2.244,806,2.244,807,2.244,808,2.244,809,2.244,810,2.244,811,2.244,812,2.244,813,2.244,814,2.244,815,2.244,816,2.244,817,2.244,818,2.244,819,2.244,820,2.244,821,2.244,822,2.244,823,2.244,824,2.244,825,2.492,826,2.244,827,2.244,828,2.244,829,2.244,830,4.1,831,2.244,832,4.1,833,2.492,834,2.244,835,3.397,836,1.646,837,3.397,838,2.244,839,3.397,840,2.244,841,3.397,842,3.397,843,3.397,844,2.244,845,2.244,846,2.244,847,2.244,848,2.244,849,2.244,850,2.244,851,2.244,852,1.646,853,2.244,854,2.244]],["title/interfaces/UploadOptions.html",[258,1.921,270,0.204]],["body/interfaces/UploadOptions.html",[0,0.1,3,0.141,4,0.141,5,0.338,6,0.062,10,0.162,11,0.86,13,0.687,15,1.409,16,1.618,21,0.263,22,0.03,23,1.031,30,0.549,31,0.629,32,0.403,34,1.042,41,1.235,42,1.079,46,0.02,48,0.496,51,0.221,52,1.82,55,2.202,59,1.496,60,0.812,61,0.013,62,0.008,68,0.944,72,0.802,75,1.105,89,0.591,103,2.721,104,1.297,106,3.082,107,1.037,112,1.061,113,1.403,114,1,115,1.915,118,1.403,124,1.365,134,1.776,139,3.317,144,1.496,145,0.434,147,0.86,154,1.716,158,0.802,159,1.438,160,1.297,169,1.252,193,1.776,209,0.86,218,0.869,221,0.591,242,0.434,253,2.203,257,3.718,258,2.485,260,1.252,261,0.927,262,1.131,270,0.12,272,0.591,277,1,281,0.944,282,0.944,283,0.802,295,0.86,314,1.165,320,0.777,324,2.75,333,0.944,336,1.776,350,0.802,351,0.742,394,1.555,411,2.721,417,1.741,419,1.618,420,1.252,422,0.869,434,0.687,450,0.944,456,0.927,457,1.966,461,0.802,469,1.131,478,0.802,484,1.776,496,1.509,506,1.747,528,1.438,529,1.403,530,2.721,531,1.966,533,2.203,534,0.687,535,3.082,536,1.252,539,0.869,540,0.869,541,1.365,544,1.483,545,0.944,546,0.944,547,1.509,548,0.869,550,0.944,552,0.944,553,2.384,556,0.802,561,0.869,564,1.965,565,1.685,579,0.869,581,0.869,590,1.403,601,2.721,604,1.131,605,2.203,623,1.252,731,1.403,766,1.403,773,1.403,825,1.403,833,2.203,836,1.403,852,1.403,855,1.403,856,4.805,857,3.004,858,3.113,859,1.606,860,2.522,861,2.522,862,3.113,863,1.606,864,2.522,865,1.606,866,3.113,867,1.606,868,1.606,869,1.606,870,1.966,871,2.522,872,2.522,873,3.113,874,1.606,875,1.606,876,1.606,877,2.522,878,4.933,879,1.606,880,1.606,881,1.606,882,1.606,883,1.606,884,3.113,885,1.606,886,2.522,887,1.606,888,2.522,889,1.606,890,4.068,891,1.606,892,2.522,893,2.522,894,2.522,895,1.606,896,1.606,897,1.606,898,1.606,899,1.606,900,4.068,901,1.606,902,1.606,903,1.606,904,1.606,905,1.606,906,2.522,907,1.606,908,1.606,909,1.606,910,1.606,911,1.606,912,1.403,913,1.606,914,1.606,915,1.606,916,2.522,917,1.606,918,1.606,919,1.606,920,1.606,921,1.606,922,1.606,923,1.606,924,1.606,925,1.606,926,2.522,927,1.606,928,1.606,929,1.606,930,1.606,931,1.606,932,1.606,933,1.606,934,1.606,935,1.606,936,2.522,937,1.606,938,1.606,939,1.606,940,2.522,941,1.606,942,1.606,943,1.606,944,1.606,945,1.606,946,3.113,947,1.606,948,1.606,949,1.606,950,1.606,951,1.606,952,1.606,953,1.606,954,1.606,955,1.606,956,2.522,957,1.606,958,1.606,959,1.606,960,1.606,961,1.606,962,1.606,963,1.606,964,1.606,965,1.606,966,1.606,967,1.606]],["title/classes/UploadQueue.html",[0,0.17,428,1.75]],["body/classes/UploadQueue.html",[0,0.138,2,1.029,3,0.195,4,0.195,5,0.166,6,0.177,10,0.225,14,0.944,15,1.364,21,0.241,22,0.03,25,1.016,29,0.944,30,0.569,31,0.806,32,0.666,34,0.957,37,1.027,46,0.012,48,0.572,51,0.283,52,1.782,55,1.205,60,0.666,61,0.017,62,0.012,69,1.782,75,1.029,88,1.899,89,1.397,112,0.759,114,1.886,130,2.274,145,0.602,147,1.791,154,1.791,155,1.612,158,1.112,159,1.029,160,1.397,193,1.568,209,1.622,212,2.254,221,1.187,229,1.506,242,1.027,270,0.166,281,1.309,282,1.309,283,1.112,295,0.759,305,1.652,320,0.806,350,1.612,351,1.491,412,1.429,413,1.946,414,1.652,415,2.961,416,1.568,417,1.625,418,2.227,419,2.437,420,1.736,421,1.736,422,1.747,423,2.517,424,1.736,425,1.736,426,2.227,427,2.227,428,2.072,429,2.517,430,2.227,431,2.227,432,2.227,433,1.897,434,0.953,435,1.736,436,2.227,437,2.227,438,2.227,439,2.227,440,1.899,441,3.228,442,2.227,443,2.227,444,2.227,445,2.227,446,3.228,447,3.228,448,2.227,449,2.227,450,2.449,451,2.227,452,3.798,453,3.798,454,4.165,455,2.821,456,1.397,457,1.736,458,3.228,459,2.227,460,2.227,461,1.112,462,2.517,463,1.736,464,2.227,465,1.309,466,2.227,467,2.227,468,3.228,469,1.568,470,2.227,471,2.227,472,2.961,473,2.227,474,2.227,475,2.227,476,1.568,477,2.227,478,1.612,479,3.228,480,2.227,481,2.227,482,2.227,483,2.227,484,1.568,485,2.227,486,2.227,487,2.227,488,2.227,489,2.227,490,2.227,491,2.227,492,2.227,493,2.227,494,2.227,495,2.227,496,0.953,497,1.736,498,2.227,499,2.227,500,2.227,501,2.227,502,2.227,503,2.227,504,2.227,505,2.227,506,0.883,507,2.227,508,1.112,509,2.227,510,2.227,511,2.227,512,2.227,513,2.227,514,2.227,515,2.227,516,2.227,517,2.227,518,2.227,519,2.227,520,2.227,521,1.736,522,2.227,968,3.846,969,2.653,970,2.653,971,2.653,972,2.653,973,2.653,974,2.227,975,2.653]],["title/classes/UploadRequest.html",[0,0.17,147,0.93]],["body/classes/UploadRequest.html",[0,0.083,2,0.613,3,0.116,4,0.116,5,0.334,6,0.195,10,0.134,13,0.926,14,0.633,15,1.485,16,2.236,21,0.205,22,0.03,23,0.852,25,1.16,29,1.019,30,0.724,31,0.87,32,0.789,34,0.977,37,1.15,41,1.482,42,1.353,46,0.018,48,0.451,51,0.19,52,1.687,55,2.133,59,1.512,60,0.789,61,0.011,62,0.007,68,0.781,72,1.082,75,1.108,88,1.273,89,0.796,99,0.852,100,0.852,103,1.892,104,1.281,106,2.764,107,0.742,112,1.079,113,1.16,114,0.859,115,1.74,118,1.16,124,1.172,134,1.525,139,2.138,144,1.45,145,0.359,147,1.079,154,1.648,158,0.663,159,1.61,160,1.163,169,1.035,193,1.932,209,1.188,218,1.172,221,0.488,242,0.359,253,2.764,257,3.445,258,2.455,260,1.035,261,1.163,262,0.935,270,0.099,277,0.859,281,0.781,282,0.781,283,0.663,295,0.738,314,1.267,320,0.79,324,2.138,333,0.781,336,1.525,350,0.663,351,0.613,372,1.16,394,1.74,411,2.396,417,1.599,419,1.39,420,1.035,422,0.718,434,0.568,450,1.86,456,1.374,457,2.138,461,1.082,469,0.935,478,1.082,484,1.525,496,1.759,506,1.895,528,1.821,529,1.16,530,2.396,531,1.688,533,1.892,534,0.568,535,2.764,536,1.035,539,1.712,540,1.712,541,1.886,544,1.613,545,1.273,546,1.273,547,1.491,548,1.172,550,1.273,552,1.273,553,2.301,556,0.663,561,0.718,564,1.821,565,1.484,579,1.712,581,1.484,590,1.892,601,2.764,604,0.935,605,1.892,623,1.035,731,1.16,766,1.892,773,1.16,795,1.328,799,1.328,801,1.328,825,1.16,833,1.892,836,1.16,852,1.16,855,1.16,856,4.252,858,2.742,859,1.328,860,2.165,861,2.165,862,2.742,863,1.328,864,2.165,865,1.328,866,2.742,867,1.328,868,1.328,869,1.328,870,1.688,871,2.165,872,2.165,873,3.485,874,1.328,875,1.328,876,1.328,877,2.165,878,4.716,879,2.165,880,1.328,881,1.328,882,1.328,883,1.328,884,2.742,885,1.328,886,2.165,887,2.165,888,2.165,889,3.163,890,3.738,891,1.328,892,2.165,893,2.165,894,2.165,895,1.328,896,1.328,897,1.328,898,1.328,899,2.165,900,4.111,901,1.328,902,2.165,903,3.163,904,3.163,905,3.163,906,2.165,907,1.328,908,1.328,909,1.328,910,1.328,911,1.328,912,1.16,913,1.328,914,1.328,915,1.328,916,2.165,917,1.328,918,1.328,919,1.328,920,1.328,921,2.165,922,1.328,923,1.328,924,1.328,925,1.328,926,2.165,927,1.328,928,1.328,929,1.328,930,1.328,931,1.328,932,1.328,933,1.328,934,1.328,935,1.328,936,2.165,937,1.328,938,1.328,939,1.328,940,2.165,941,1.328,942,1.328,943,1.328,944,1.328,945,1.328,946,2.742,947,1.328,948,1.328,949,1.328,950,1.328,951,1.328,952,1.328,953,1.328,954,1.328,955,1.328,956,2.165,957,1.328,958,1.328,959,1.328,960,1.328,961,1.328,962,1.328,963,1.328,964,1.328,965,1.328,966,1.328,967,1.328,974,1.328,976,1.582,977,1.582,978,1.582,979,1.582,980,1.582,981,1.582,982,1.582,983,1.582,984,1.582,985,1.582,986,1.582,987,1.582,988,1.582,989,1.582,990,1.582,991,1.582,992,1.582,993,1.582,994,1.582,995,1.582,996,1.582,997,1.582,998,1.582,999,1.582]],["title/interfaces/UploadResponse.html",[270,0.204,564,1.26]],["body/interfaces/UploadResponse.html",[3,0.236,4,0.236,5,0.354,6,0.103,10,0.272,11,1.258,13,1.151,21,0.314,22,0.03,30,0.65,32,0.724,33,1.357,34,0.619,37,1.139,45,1.945,46,0.014,48,0.544,51,0.429,59,1.666,60,0.43,61,0.019,62,0.019,69,1.151,75,1.154,104,1.357,107,0.998,112,1.258,114,1.797,115,2.263,144,0.99,145,0.728,209,1.258,218,1.456,229,1.797,231,2.103,242,0.728,261,0.99,270,0.354,272,0.99,277,1.463,295,1.258,305,1.463,314,1.704,320,0.921,337,0.99,343,2.17,394,1.843,414,1.067,417,1.802,433,1.344,434,1.151,440,1.583,456,1.548,461,1.344,465,1.583,478,1.344,496,1.802,506,2.028,508,1.344,528,2.093,532,1.583,534,1.802,537,1.704,538,1.583,539,1.997,540,1.997,541,1.456,544,2.17,545,1.583,546,1.583,547,1.579,548,1.997,550,1.583,552,1.583,553,2.653,555,1.895,556,1.344,557,1.895,558,1.895,559,1.583,560,1.727,561,1.456,562,1.243,563,1.583,564,1.945,565,2.569,566,2.17,567,1.895,568,1.895,569,1.895,570,1.895,571,1.895,572,2.17,573,1.895,574,1.895,575,1.895,576,1.895,577,1.895,578,1.895,579,1.456,580,1.456,581,1.456,582,2.599,583,1.583,584,1.895,585,1.895,586,1.456]],["title/classes/UploadStorage.html",[0,0.17,109,1.604]],["body/classes/UploadStorage.html",[0,0.118,2,0.88,3,0.167,4,0.167,5,0.142,6,0.189,10,0.192,14,0.842,15,1.473,17,2.359,21,0.259,22,0.03,25,1.117,29,1.014,30,0.611,31,0.865,32,0.762,34,0.888,37,1.224,46,0.01,48,0.536,51,0.252,52,1.483,60,0.46,61,0.015,62,0.01,68,1.121,69,2.222,75,1.127,82,2.243,88,1.692,89,0.701,104,0.701,107,0.937,109,1.692,114,0.756,122,2.514,124,1.031,130,2.72,144,1.42,145,0.515,147,1.625,154,1.543,155,2.465,158,0.952,159,1.329,160,1.713,204,1.666,209,1.705,212,1.876,221,0.701,229,0.756,270,0.142,283,0.952,320,0.718,333,1.121,337,1.058,338,2.027,350,1.437,351,0.88,412,1.223,414,1.141,415,2.243,416,1.343,417,1.936,419,2.224,421,1.486,422,1.557,423,1.486,424,2.243,425,1.486,428,2.478,429,2.243,433,2.07,434,0.815,435,2.702,450,2.975,462,2.243,463,1.486,472,2.702,476,2.027,497,2.243,506,0.756,508,1.437,521,1.486,537,1.329,547,1.231,556,1.437,562,0.88,580,1.031,586,1.557,604,2.72,758,1.486,870,2.243,1000,1.486,1001,2.877,1002,2.877,1003,2.877,1004,2.877,1005,2.877,1006,2.877,1007,3.374,1008,3.861,1009,3.861,1010,3.374,1011,2.877,1012,3.07,1013,2.271,1014,2.877,1015,2.877,1016,2.271,1017,4.07,1018,2.271,1019,2.271,1020,2.271,1021,2.877,1022,2.271,1023,2.271,1024,2.877,1025,2.271,1026,2.271,1027,2.877,1028,2.271,1029,2.271,1030,3.466,1031,2.877,1032,1.906,1033,1.906,1034,1.906,1035,1.906,1036,2.243,1037,1.906,1038,1.906,1039,1.906,1040,2.877,1041,2.877,1042,1.906,1043,1.906,1044,1.906,1045,1.906,1046,1.906,1047,1.906,1048,1.906,1049,3.466,1050,1.906,1051,1.906,1052,1.906,1053,1.906,1054,1.906,1055,1.906,1056,1.906,1057,2.877,1058,3.861,1059,1.906,1060,1.906,1061,1.906,1062,1.906,1063,1.666,1064,1.906,1065,1.906,1066,1.906,1067,3.466,1068,1.906,1069,1.906,1070,1.906,1071,1.906,1072,1.906,1073,1.906,1074,1.906,1075,1.906,1076,2.877,1077,1.906,1078,1.906,1079,1.906,1080,1.906,1081,1.906,1082,1.906,1083,1.906]],["title/interfaces/UploadStorageConfig.html",[270,0.204,1012,1.921]],["body/interfaces/UploadStorageConfig.html",[0,0.142,3,0.2,4,0.2,5,0.17,6,0.087,10,0.23,11,1.119,15,1.371,17,1.777,21,0.245,22,0.03,31,1.051,34,0.968,46,0.012,48,0.577,51,0.288,52,1.646,60,0.525,61,0.017,62,0.012,69,2.169,75,1.105,82,1.777,104,0.838,107,0.616,109,1.34,114,0.904,122,1.991,124,1.233,130,2.312,144,1.548,145,0.616,147,1.521,154,1.633,155,2.229,158,1.138,159,1.516,160,1.709,204,1.991,209,1.585,212,1.777,221,0.838,229,1.526,270,0.17,272,0.838,283,1.138,320,0.569,333,1.34,337,0.838,338,1.605,350,1.64,351,1.053,412,1.462,414,0.904,415,1.777,416,1.605,417,1.801,419,2.469,421,1.777,422,1.777,423,1.777,424,2.559,425,1.777,428,2.702,429,1.777,433,1.922,434,0.975,435,1.777,450,2.937,462,1.777,463,1.777,472,3,476,1.605,497,1.777,506,1.526,508,1.138,521,1.777,537,1.053,547,0.975,556,1.64,562,1.053,580,1.233,586,2.415,604,2.312,758,1.777,870,2.559,1000,1.777,1001,2.279,1002,2.279,1003,2.279,1004,2.279,1005,2.279,1006,2.279,1007,1.991,1008,2.279,1009,2.279,1010,1.991,1011,2.279,1012,3.143,1014,2.279,1015,2.279,1017,3.899,1021,2.279,1024,2.279,1027,2.279,1030,3.283,1031,2.279,1032,2.279,1033,2.279,1034,3.283,1035,4.21,1036,2.559,1037,2.279,1038,2.279,1039,2.279,1040,3.283,1041,3.283,1042,2.279,1043,2.279,1044,2.279,1045,2.279,1046,2.279,1047,2.279,1048,2.279,1049,3.848,1050,2.279,1051,2.279,1052,2.279,1053,2.279,1054,2.279,1055,2.279,1056,2.279,1057,3.283,1058,4.21,1059,2.279,1060,2.279,1061,2.279,1062,2.279,1063,1.991,1064,2.279,1065,2.279,1066,2.279,1067,3.848,1068,2.279,1069,2.279,1070,2.279,1071,2.279,1072,2.279,1073,2.279,1074,2.279,1075,2.279,1076,3.283,1077,2.279,1078,2.279,1079,2.279,1080,2.279,1081,2.279,1082,2.279,1083,2.279]],["title/interfaces/UploadStoreConfig.html",[270,0.204,583,1.604]],["body/interfaces/UploadStoreConfig.html",[3,0.237,4,0.237,5,0.355,6,0.104,10,0.273,11,1.261,13,1.156,21,0.202,22,0.03,30,0.652,32,0.726,33,1.361,34,0.621,37,1.141,45,1.949,46,0.014,48,0.546,51,0.43,59,1.669,60,0.432,61,0.019,62,0.019,69,1.583,75,1.154,104,1.361,107,1.001,112,1.439,114,1.8,115,1.349,144,0.993,145,0.731,209,1.261,218,1.462,229,1.947,231,2.108,242,0.731,261,0.993,270,0.355,272,0.993,277,1.467,295,1.261,305,1.673,314,1.709,320,0.923,337,0.993,343,2.176,394,1.848,414,1.071,417,1.805,433,1.349,434,1.156,440,2.176,456,1.552,461,1.349,465,2.176,478,1.349,496,1.805,506,1.947,508,1.349,528,2.096,532,1.589,534,1.805,537,1.709,538,1.589,539,2.002,540,2.002,541,1.462,544,2.176,545,1.589,546,1.589,547,1.583,548,2.002,550,1.589,552,1.589,553,2.283,555,1.903,556,1.349,557,1.903,558,1.903,559,1.589,560,1.734,561,1.462,562,1.248,563,1.589,564,1.709,565,2.002,566,2.176,567,1.903,568,1.903,569,1.903,570,1.903,571,1.903,572,2.176,573,1.903,574,1.903,575,1.903,576,1.903,577,1.903,578,1.903,579,1.462,580,1.462,581,1.462,582,2.606,583,2.176,584,2.606,585,2.606,586,2.456]],["title/interfaces/UploadValidation.html",[270,0.204,566,1.604]],["body/interfaces/UploadValidation.html",[3,0.238,4,0.238,5,0.355,6,0.104,10,0.274,11,1.265,13,1.16,21,0.202,22,0.03,30,0.654,32,0.727,33,1.672,34,0.972,37,1.143,45,1.953,46,0.014,48,0.547,51,0.43,59,1.672,60,0.434,61,0.019,62,0.019,69,1.16,75,1.155,104,1.364,107,1.003,112,1.265,114,1.803,115,1.355,144,0.997,145,0.734,209,1.265,218,1.468,229,1.803,231,2.112,242,0.734,261,0.997,270,0.355,272,0.997,277,1.471,295,1.265,305,1.471,314,1.714,320,0.926,337,0.997,343,2.182,394,1.853,414,1.076,417,1.809,433,1.355,434,1.16,440,1.595,456,1.555,461,1.355,465,1.595,478,1.355,496,1.809,506,1.949,508,1.355,528,2.1,532,1.595,534,1.809,537,1.714,538,1.595,539,2.008,540,2.008,541,1.468,544,2.182,545,1.595,546,1.595,547,1.587,548,2.008,550,1.595,552,1.595,553,2.66,555,1.911,556,1.355,557,1.911,558,1.911,559,1.595,560,1.741,561,1.468,562,1.253,563,1.595,564,1.714,565,2.008,566,2.487,567,1.911,568,1.911,569,1.911,570,1.911,571,1.911,572,2.182,573,1.911,574,1.911,575,1.911,576,1.911,577,1.911,578,1.911,579,1.468,580,1.468,581,1.468,582,2.613,583,1.595,584,1.911,585,1.911,586,1.468]],["title/components/UploadViewComponent.html",[157,1.604,392,1.75]],["body/components/UploadViewComponent.html",[0,0.111,3,0.291,4,0.156,5,0.317,6,0.193,10,0.18,11,0.932,14,0.8,15,1.443,17,0.965,18,2.132,21,0.279,22,0.03,25,1.147,29,0.521,30,0.657,31,0.445,32,0.597,34,0.41,37,1.009,41,1.684,42,1.423,46,0.009,48,0.59,51,0.156,55,0.965,59,1.223,60,0.285,61,0.014,62,0.009,63,1.144,64,1.048,65,1.558,69,2.078,72,1.366,73,2.594,75,1.084,76,1.256,77,3.137,78,1.558,79,2.39,80,1.558,81,3.327,82,3.556,83,3.327,86,1.926,88,1.608,89,1.223,99,2.394,100,2.135,107,0.74,109,2.497,112,1.134,128,1.558,134,1.256,139,2.594,141,3.446,143,0.89,144,1.223,145,0.482,146,1.558,147,1.134,154,1.272,155,1.366,157,1.956,159,0.824,160,1.006,168,1.39,169,1.39,178,3.731,206,3.31,212,0.965,231,0.89,242,1.377,271,1.256,273,3.931,279,2.907,282,1.048,283,0.89,287,3.446,288,3.556,289,1.39,290,2.39,292,2.39,294,1.048,297,2.594,304,2.39,305,1.319,320,0.683,325,2.39,336,1.256,337,1.006,344,2.39,350,0.89,351,0.824,377,1.256,383,1.39,392,2.394,422,1.8,450,1.048,456,1.006,476,1.256,537,1.263,591,1.783,593,2.735,613,1.783,620,2.39,621,2.735,623,2.132,628,2.39,629,1.783,630,1.783,631,1.783,648,1.783,649,2.735,650,1.783,651,1.783,652,1.783,653,1.783,654,1.783,655,3.327,656,3.327,657,3.327,658,5.09,659,3.731,660,2.735,661,3.327,663,3.327,664,4.856,665,3.327,666,3.327,667,4.561,668,2.735,676,2.735,683,1.558,685,1.39,693,3.327,701,1.783,702,1.783,707,3.731,711,1.783,712,2.735,714,1.783,715,1.783,717,3.327,719,3.731,720,1.783,721,1.783,723,2.735,726,3.731,728,2.735,737,1.783,742,2.735,743,2.735,745,3.327,746,3.731,747,1.783,750,1.783,753,1.783,754,1.783,758,1.39,760,2.735,761,3.731,762,1.783,763,1.783,764,1.783,912,1.558,1007,2.39,1010,3.26,1017,1.558,1063,1.558,1084,1.783,1085,3.964,1086,3.964,1087,3.258,1088,4.445,1089,4.445,1090,3.964,1091,2.124,1092,2.124,1093,2.124,1094,3.258,1095,3.258,1096,2.124,1097,2.124,1098,2.124,1099,2.124,1100,2.124,1101,2.124,1102,2.124,1103,2.124,1104,2.124,1105,2.124,1106,2.124,1107,2.124,1108,2.124,1109,4.794,1110,3.258,1111,2.124,1112,2.124,1113,2.124,1114,2.124,1115,2.124,1116,2.124,1117,2.124,1118,2.124,1119,2.124,1120,2.124,1121,2.124,1122,3.258,1123,2.124,1124,3.258,1125,2.124,1126,3.258,1127,2.124,1128,2.124,1129,2.124,1130,2.124,1131,2.124,1132,2.124,1133,2.124,1134,2.124,1135,2.124,1136,3.964,1137,2.124,1138,2.124,1139,2.124,1140,3.258,1141,2.124,1142,2.124]],["title/classes/ValidationBuilder.html",[0,0.17,1143,2.383]],["body/classes/ValidationBuilder.html",[0,0.231,1,2.902,2,1.72,3,0.326,4,0.326,5,0.278,6,0.189,9,3.377,10,0.376,13,1.949,14,1.332,15,1.232,21,0.34,22,0.03,23,3.436,25,1.047,29,1.332,30,0.803,31,1.137,32,0.728,41,1.476,42,1.593,46,0.02,48,0.663,49,3.253,51,0.326,60,0.728,61,0.024,62,0.02,146,3.253,160,1.675,330,4.678,408,2.902,1143,3.981,1144,3.723,1145,4.436,1146,4.436,1147,4.436,1148,4.436,1149,4.436,1150,4.436,1151,4.436,1152,4.436,1153,4.436,1154,4.436]],["title/interfaces/ValidationErrors.html",[33,1.003,270,0.204]],["body/interfaces/ValidationErrors.html",[3,0.359,4,0.359,5,0.395,6,0.185,21,0.306,22,0.029,25,0.942,27,2.886,33,1.947,34,1.109,41,1.625,42,1.753,46,0.021,51,0.449,61,0.025,62,0.021,107,1.305,270,0.36,272,1.506,376,4.097,377,3.399,1155,3.194,1156,4.881]],["title/interfaces/Validator.html",[41,1.082,270,0.204]],["body/interfaces/Validator.html",[3,0.348,4,0.348,5,0.41,6,0.182,10,0.401,14,1.385,16,3.039,21,0.354,22,0.03,25,0.912,27,3.335,29,1.161,30,0.699,31,0.991,32,0.635,33,1.927,34,1.163,41,1.878,42,1.698,46,0.021,51,0.443,61,0.025,62,0.021,107,1.073,270,0.354,272,1.46,377,2.796,1155,3.094,1157,4.729]],["title/coverage.html",[1158,3.724]],["body/coverage.html",[0,0.33,1,2.352,5,0.225,6,0.218,7,3.017,9,1.936,21,0.225,22,0.03,33,1.11,41,1.197,46,0.016,61,0.021,62,0.016,63,1.936,64,1.775,66,3.017,67,3.017,75,0.637,93,2.352,109,1.775,147,1.029,157,2.344,160,1.11,221,1.466,222,2.125,224,3.017,225,3.017,242,1.487,247,2.352,249,3.017,258,2.125,261,1.11,270,0.406,271,2.125,273,3.479,274,3.483,276,2.125,277,1.197,284,2.352,294,1.775,359,3.017,374,2.637,375,3.017,391,2.125,392,1.936,408,2.352,409,3.017,412,1.936,413,3.483,428,1.936,523,3.017,524,3.017,538,2.903,564,1.394,566,1.775,583,1.775,587,3.017,683,3.483,685,3.107,765,3.017,855,3.483,1000,3.479,1012,2.125,1036,2.352,1084,3.017,1143,2.637,1144,3.017,1155,3.107,1158,3.017,1159,3.595,1160,3.595,1161,3.595,1162,6.041,1163,3.595,1164,3.595,1165,3.595,1166,3.595,1167,5.317,1168,3.595,1169,4.749,1170,4.749,1171,4.749,1172,3.595,1173,3.595,1174,3.595,1175,5.317,1176,4.749,1177,3.595,1178,3.595,1179,3.595,1180,3.595,1181,3.595,1182,3.595,1183,4.749,1184,5.317,1185,5.317,1186,3.017,1187,3.017,1188,3.595,1189,3.595]],["title/dependencies.html",[382,2.558,1190,2.713]],["body/dependencies.html",[22,0.03,46,0.021,61,0.025,62,0.021,143,1.967,145,1.065,287,3.675,382,3.07,400,3.938,1191,4.693,1192,6.588,1193,4.693,1194,5.616,1195,4.693,1196,4.693,1197,5.616,1198,4.713,1199,4.693,1200,4.693,1201,4.693,1202,4.693,1203,4.693,1204,4.693,1205,4.693,1206,4.693,1207,4.693,1208,4.693,1209,4.693,1210,4.693,1211,4.693,1212,4.693,1213,4.693,1214,4.693,1215,4.693,1216,4.693,1217,4.693]],["title/miscellaneous/enumerations.html",[1218,1.461,1219,3.281]],["body/miscellaneous/enumerations.html",[6,0.158,10,0.417,22,0.029,46,0.022,61,0.025,62,0.022,100,3.552,242,1.117,295,1.653,305,1.638,320,1.031,337,1.519,414,1.638,456,1.519,532,2.429,534,1.767,537,1.908,538,2.429,559,2.429,560,2.65,561,2.235,562,1.908,563,2.429,1218,2.65,1219,4.13,1220,4.921]],["title/index.html",[10,0.275,1221,2.728]],["body/index.html",[2,1.717,22,0.029,46,0.019,61,0.024,62,0.019,63,2.385,64,3.187,222,3.817,223,3.247,247,2.897,272,1.366,294,3.187,305,1.951,379,3.976,380,4.424,382,2.897,383,2.897,384,3.716,385,3.716,386,3.716,387,3.716,388,3.716,389,3.716,390,3.716,391,3.817,392,3.478,393,4.55,394,1.856,395,3.716,559,2.676,628,3.247,1221,3.716,1222,4.427,1223,4.427]],["title/modules.html",[381,3.254]],["body/modules.html",[22,0.026,46,0.023,61,0.026,62,0.023,380,3.428,381,3.842,1198,4.397,1224,5.239,1225,5.239,1226,5.239]],["title/miscellaneous/typealiases.html",[1218,1.461,1227,3.909]],["body/miscellaneous/typealiases.html",[6,0.167,10,0.44,21,0.325,22,0.026,42,2.14,46,0.023,61,0.026,62,0.023,372,3.809,1155,3.399,1218,2.798,1228,5.194,1229,5.194]],["title/miscellaneous/variables.html",[1218,1.461,1230,3.281]],["body/miscellaneous/variables.html",[6,0.161,10,0.424,21,0.313,22,0.029,46,0.022,61,0.026,62,0.022,99,3.141,100,3.141,284,3.816,562,1.939,586,2.272,1000,3.273,1012,2.957,1036,3.816,1186,4.198,1187,4.894,1218,2.694,1230,4.198,1231,5.002,1232,5.002,1233,5.002]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":242,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["0.9.1",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1162,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":305,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["1.10.0",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":752,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1/2",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":685,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["1024",{"_index":243,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["10ms",{"_index":1075,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["11/12",{"_index":1166,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1223,"title":{},"body":{"index.html":{}}}],["15",{"_index":687,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1px",{"_index":667,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["1rem",{"_index":728,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["2",{"_index":559,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["2.0.1",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["2.5rem",{"_index":1134,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["20x",{"_index":958,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["25,safari5.1",{"_index":691,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25rem",{"_index":662,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25s",{"_index":740,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["2e2e2e",{"_index":1137,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["3",{"_index":560,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["3.0.3",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":1185,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":1140,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["4",{"_index":561,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["4/12",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1136,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["404",{"_index":943,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["42",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":666,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["5",{"_index":562,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["50",{"_index":683,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["50%,#f7f7f7",{"_index":689,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["5rem",{"_index":663,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["6",{"_index":563,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["6.5.3",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["63",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["7/11",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":706,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["8.2.11",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":1172,"title":{},"body":{"coverage.html":{}}}],["8/16",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["85rem",{"_index":724,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["87",{"_index":1163,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":737,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["9",{"_index":1222,"title":{},"body":{"index.html":{}}}],["9.15.10",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["9rem",{"_index":722,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abort",{"_index":555,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["absolute",{"_index":732,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":88,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{}}}],["action",{"_index":715,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["actions",{"_index":725,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["active",{"_index":429,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["actual_component",{"_index":764,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["add(...validators",{"_index":369,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(upload",{"_index":1015,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":122,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["affect",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["afterviewinit",{"_index":280,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["again",{"_index":218,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["aliases",{"_index":1228,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":717,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["allowed",{"_index":748,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["amount",{"_index":1073,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["and(...validators",{"_index":1151,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":1145,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":1149,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":1152,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":1204,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":400,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":260,"title":{},"body":{"injectables/FileUploadFactory.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["angular/compiler",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":143,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["animations",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["anything",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["api.ts",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/upload",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["api/validation",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["arguments",{"_index":123,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":179,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":215,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["array.from(this.uploads.values",{"_index":1083,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["array.from({length",{"_index":881,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["array.isarray(errors",{"_index":945,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["array.isarray(validators",{"_index":368,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["assets//scss/variables",{"_index":652,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/fonts",{"_index":651,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/scss/icons",{"_index":653,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["auto",{"_index":1123,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["back",{"_index":546,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["background",{"_index":676,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["basis",{"_index":1131,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["before",{"_index":455,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"classes/UploadQueue.html":{}}}],["beforestart",{"_index":873,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["beforestart(hook",{"_index":887,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["behaviorsubject",{"_index":419,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["behaviorsubject(this.upload",{"_index":885,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["between",{"_index":704,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["bind",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["block",{"_index":654,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["body",{"_index":115,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["boolean",{"_index":506,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":385,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":664,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bottom",{"_index":693,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bound",{"_index":301,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["box",{"_index":1126,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["break",{"_index":411,"title":{},"body":{"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["broken",{"_index":603,"title":{},"body":{"classes/UploadControl.html":{}}}],["browse",{"_index":1226,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1198,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browser.ts",{"_index":67,"title":{},"body":{"directives/FileBrowserDirective.html":{},"coverage.html":{}}}],["browser.ts:104",{"_index":137,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:119",{"_index":127,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:30",{"_index":121,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:33",{"_index":110,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:36",{"_index":108,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:41",{"_index":119,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:48",{"_index":111,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:55",{"_index":102,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:58",{"_index":101,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:70",{"_index":94,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:95",{"_index":133,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browsers",{"_index":679,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["buffer",{"_index":424,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["buffer(queuechanged.pipe(debouncetime(10",{"_index":443,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["buffer(this.uploaddestroy$.pipe(debouncetime(10",{"_index":1081,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["bufferedchanges.pop",{"_index":445,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["build",{"_index":925,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["button",{"_index":741,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["byte",{"_index":234,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":238,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes.tofixed(2",{"_index":245,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["call",{"_index":911,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["cancel",{"_index":496,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["canceled",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":198,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["case",{"_index":530,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["center",{"_index":719,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chance",{"_index":607,"title":{},"body":{"classes/UploadControl.html":{}}}],["change",{"_index":209,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["changed",{"_index":434,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["changes",{"_index":476,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["check",{"_index":458,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["checks",{"_index":504,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["child",{"_index":746,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chrome10",{"_index":690,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["chrome26",{"_index":697,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["cleanall",{"_index":1088,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["clear",{"_index":216,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["click",{"_index":86,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["click(event",{"_index":125,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":388,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":389,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":390,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["color",{"_index":655,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["colors",{"_index":754,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["column",{"_index":660,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["commonmodule",{"_index":399,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":478,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["completed",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["component",{"_index":157,"title":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":762,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["components",{"_index":628,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["components/ngxfileuploaditem.html",{"_index":614,"title":{},"body":{"classes/UploadControl.html":{}}}],["concurrent",{"_index":968,"title":{},"body":{"classes/UploadQueue.html":{}}}],["concurrent(count",{"_index":438,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["concurrentcount",{"_index":432,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["concurrentuploads",{"_index":586,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":1014,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["connection",{"_index":602,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{}}}],["constructor(config",{"_index":1011,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["constructor(file",{"_index":771,"title":{},"body":{"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":594,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":976,"title":{},"body":{"classes/UploadRequest.html":{}}}],["constructor(httpclient",{"_index":252,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["constructor(renderer",{"_index":90,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["constructor(validators",{"_index":360,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contains",{"_index":573,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["content",{"_index":702,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["context",{"_index":300,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["context.ctrl",{"_index":592,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":589,"title":{},"body":{"classes/UploadControl.html":{}}}],["count",{"_index":440,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["coverage",{"_index":1158,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":193,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["createbeforestarthook(upload",{"_index":459,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["createfieldinputfield",{"_index":200,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["creates",{"_index":95,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadModel.html":{}}}],["createstore",{"_index":250,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createupload",{"_index":251,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createupload(file",{"_index":256,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createuploadbody",{"_index":932,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["ctrl",{"_index":275,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["cur",{"_index":916,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["current",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["currently",{"_index":578,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":742,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["custom",{"_index":1094,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["customscrollbar",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["d2d2d2",{"_index":1125,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dark",{"_index":657,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["darken(#fdfdfd",{"_index":705,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["dashed",{"_index":1135,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data",{"_index":104,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["data/api",{"_index":281,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["data/api/upload",{"_index":285,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["data/api/validation",{"_index":146,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["data/upload.model",{"_index":262,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["debouncetime",{"_index":425,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["declarations",{"_index":384,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":99,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"miscellaneous/variables.html":{}}}],["defaultstoreconfig",{"_index":1036,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultuploaditem",{"_index":634,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":867,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["delay",{"_index":618,"title":{},"body":{"classes/UploadControl.html":{}}}],["dependencies",{"_index":382,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":68,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{}}}],["design",{"_index":1004,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["destroy",{"_index":450,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["destroyed",{"_index":159,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["destroys",{"_index":498,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["direction",{"_index":659,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directive",{"_index":63,"title":{"directives/FileBrowserDirective.html":{}},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":65,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directly",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/UploadItemComponent.html":{}}}],["disable",{"_index":355,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["disabled",{"_index":80,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["display",{"_index":206,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["document.createelement(\"input",{"_index":202,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["documentation",{"_index":1159,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":630,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dont",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["download",{"_index":461,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["drag",{"_index":70,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drag/drop",{"_index":1122,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dragevent",{"_index":132,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dragover",{"_index":87,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dragover(event",{"_index":131,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drop",{"_index":71,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drop(event",{"_index":136,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dummy",{"_index":194,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dynamic",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":210,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["e4e4e4",{"_index":669,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["edit",{"_index":671,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":675,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["element",{"_index":620,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ellipsis",{"_index":713,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["emits",{"_index":868,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["enabled",{"_index":866,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["ensure",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["enum",{"_index":558,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":1219,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":547,"title":{},"body":{"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["error.value",{"_index":646,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["errors",{"_index":553,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["even",{"_index":497,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["event",{"_index":124,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["event.loaded",{"_index":957,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["event.preventdefault",{"_index":174,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":173,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["event.type",{"_index":948,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["eventemitter",{"_index":120,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["events",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["example",{"_index":74,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadControl.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["exists",{"_index":513,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exports",{"_index":387,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":684,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["failed",{"_index":600,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["false",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["fdfdfd",{"_index":677,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff16",{"_index":696,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff3.6",{"_index":686,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["field",{"_index":105,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["filebrowserdirective",{"_index":64,"title":{"directives/FileBrowserDirective.html":{}},"body":{"directives/FileBrowserDirective.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":768,"title":{},"body":{"classes/UploadModel.html":{}}}],["files",{"_index":178,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["files.foreach((file",{"_index":188,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["fileselect",{"_index":163,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["filesize",{"_index":226,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["filesizepipe",{"_index":222,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["filetype",{"_index":769,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload",{"_index":288,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["fileupload/data/api/index.ts",{"_index":375,"title":{},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["fileupload/data/api/index.ts:1",{"_index":378,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/data/api/upload.ts",{"_index":538,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/data/api/upload.ts:101",{"_index":542,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:107",{"_index":543,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:112",{"_index":549,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:90",{"_index":554,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:96",{"_index":551,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/validation.ts",{"_index":1155,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/data/api/validation.ts:1",{"_index":1156,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/data/api/validation.ts:8",{"_index":1157,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileupload/data/upload.model.ts",{"_index":765,"title":{},"body":{"classes/UploadModel.html":{},"coverage.html":{}}}],["fileupload/data/upload.model.ts:104",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:111",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:118",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:122",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:126",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:130",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:135",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:139",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:147",{"_index":774,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:23",{"_index":772,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:35",{"_index":776,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:42",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:49",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:56",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:63",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:70",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:74",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:78",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:82",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:86",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:90",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:97",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/libs/ui/src/file",{"_index":66,"title":{},"body":{"directives/FileBrowserDirective.html":{},"coverage.html":{}}}],["fileupload/libs/ui/src/upload",{"_index":273,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.control.ts",{"_index":587,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:19",{"_index":595,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:33",{"_index":599,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:41",{"_index":609,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:49",{"_index":611,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:61",{"_index":597,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts",{"_index":413,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:31",{"_index":973,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:35",{"_index":975,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:42",{"_index":969,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:50",{"_index":971,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:54",{"_index":970,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.request.ts",{"_index":855,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:101",{"_index":978,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:108",{"_index":990,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:115",{"_index":979,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:123",{"_index":980,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:136",{"_index":982,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:146",{"_index":984,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:150",{"_index":986,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:154",{"_index":985,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:158",{"_index":983,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:162",{"_index":987,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:170",{"_index":988,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:180",{"_index":989,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:202",{"_index":991,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:217",{"_index":981,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:62",{"_index":992,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:66",{"_index":994,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:70",{"_index":996,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:74",{"_index":997,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:78",{"_index":999,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:82",{"_index":998,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:84",{"_index":977,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts",{"_index":1000,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:108",{"_index":1022,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:118",{"_index":1020,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:129",{"_index":1025,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:140",{"_index":1026,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:147",{"_index":1023,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:33",{"_index":1013,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:48",{"_index":1018,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:57",{"_index":1029,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:64",{"_index":1016,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:85",{"_index":1019,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/validation/src/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts",{"_index":359,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:13",{"_index":366,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:18",{"_index":363,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:25",{"_index":364,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:32",{"_index":365,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:5",{"_index":361,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/or.validator.ts",{"_index":409,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/or.validator.ts:6",{"_index":410,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts",{"_index":1144,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts:12",{"_index":1148,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts:8",{"_index":1146,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/ngx",{"_index":396,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/utils/factory.ts",{"_index":249,"title":{},"body":{"injectables/FileUploadFactory.html":{},"coverage.html":{}}}],["fileupload/utils/factory.ts:10",{"_index":254,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/factory.ts:16",{"_index":259,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/factory.ts:21",{"_index":255,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/file",{"_index":224,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["fileupload/utils/state",{"_index":523,"title":{},"body":{"pipes/StateToStringPipe.html":{},"coverage.html":{}}}],["fileuploadfactory",{"_index":93,"title":{"injectables/FileUploadFactory.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"coverage.html":{}}}],["fileuploaditemcontext",{"_index":271,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["filter",{"_index":420,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["filter((upload",{"_index":483,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["filter(result",{"_index":918,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["finished",{"_index":574,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["finishes",{"_index":568,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["first",{"_index":1139,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flex",{"_index":658,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["font",{"_index":649,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["footer",{"_index":750,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["forkjoin",{"_index":863,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["forkjoin(this.hooks.beforestart.map((hook",{"_index":913,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["form",{"_index":103,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdata",{"_index":856,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdata.append(label",{"_index":935,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdataname",{"_index":81,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["function",{"_index":372,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadRequest.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":512,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["gb",{"_index":237,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["get($colors",{"_index":656,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["get($map",{"_index":753,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["getchange",{"_index":974,"title":{},"body":{"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["getdata",{"_index":995,"title":{},"body":{"classes/UploadRequest.html":{}}}],["getdestroyed",{"_index":993,"title":{},"body":{"classes/UploadRequest.html":{}}}],["getfile",{"_index":775,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":778,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["gethaserror",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["getisinvalid",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["getispending",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["getisuploadable",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["getprogress",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["getqueuechange",{"_index":1028,"title":{},"body":{"classes/UploadStorage.html":{}}}],["getrequestid",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["getresponse",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":158,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["getstate",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["getstorage",{"_index":1103,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["getuploaded",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":606,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":673,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(to",{"_index":692,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(top",{"_index":682,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["green",{"_index":756,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":1130,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["handle",{"_index":134,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["handleerror(response",{"_index":939,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleevent(event",{"_index":627,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":187,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["handlehttpevent(event",{"_index":947,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleprogress(event",{"_index":955,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleresponse(res",{"_index":959,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handlesent",{"_index":962,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["happen",{"_index":619,"title":{},"body":{"classes/UploadControl.html":{}}}],["happens",{"_index":1030,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["haserror",{"_index":539,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["haserrors",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":700,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["height",{"_index":721,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["here",{"_index":304,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hidden",{"_index":714,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["highlight.js",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["holds",{"_index":570,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["hook",{"_index":457,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["hooks",{"_index":872,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["host",{"_index":128,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hostlistener",{"_index":140,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":181,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":171,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["hostlistener(\"drop",{"_index":175,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["hostlisteners",{"_index":85,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["html",{"_index":760,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["htmlinputelement",{"_index":164,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["http",{"_index":601,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpclient",{"_index":253,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpclientmodule",{"_index":401,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":862,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpevent",{"_index":858,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype",{"_index":859,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.response",{"_index":953,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.sent",{"_index":949,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.uploadprogress",{"_index":951,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpprogressevent",{"_index":860,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpresponse",{"_index":861,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["https://colorzilla.com/gradient",{"_index":674,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["icon",{"_index":1133,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["icons",{"_index":648,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["id",{"_index":580,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["idatanode",{"_index":374,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["identifier",{"_index":1160,"title":{},"body":{"coverage.html":{}}}],["idle",{"_index":532,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["ie10",{"_index":695,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["igniteui",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["ignoreerror",{"_index":902,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["implemented",{"_index":1034,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["implements",{"_index":72,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":407,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":376,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["inheritdoc",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["injectable",{"_index":247,"title":{"injectables/FileUploadFactory.html":{}},"body":{"injectables/FileUploadFactory.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":248,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["inner",{"_index":738,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["input",{"_index":141,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["input(\"ngxfileupload",{"_index":151,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["input[type=\"file",{"_index":213,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["inputfield",{"_index":201,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["instance",{"_index":96,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadModel.html":{}}}],["instanceof",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["interal",{"_index":1052,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["interface",{"_index":270,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":272,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":537,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["invalidated",{"_index":1024,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["iscompleted",{"_index":900,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["iscompleted(ignoreerror",{"_index":899,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isidle",{"_index":904,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isinuploadqueue(request",{"_index":505,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["isinvalid",{"_index":540,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["isnan(size",{"_index":239,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["ispending",{"_index":579,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["ispending(pending",{"_index":831,"title":{},"body":{"classes/UploadModel.html":{}}}],["isprogress",{"_index":903,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isrequestcompleted",{"_index":905,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isstartable",{"_index":467,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["isuploadable",{"_index":770,"title":{},"body":{"classes/UploadModel.html":{}}}],["item",{"_index":289,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item'},{'name",{"_index":763,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item.component",{"_index":1106,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["item.component.html",{"_index":291,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.scss",{"_index":293,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.ts",{"_index":274,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:121",{"_index":638,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:25",{"_index":641,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:30",{"_index":640,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:35",{"_index":639,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:53",{"_index":635,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:62",{"_index":636,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:65",{"_index":632,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:78",{"_index":633,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:89",{"_index":637,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["items",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["itemtemplate",{"_index":1090,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["itemtpl",{"_index":299,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["iuploadapi",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":701,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["kb",{"_index":235,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["key",{"_index":377,"title":{},"body":{"interfaces/IDataNode.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":357,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["know",{"_index":1006,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["label",{"_index":731,"title":{},"body":{"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["last",{"_index":745,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["left",{"_index":734,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["legend",{"_index":383,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["lib/.../public",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../upload.storage.ts",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../upload.ts",{"_index":1220,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":1229,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/data/api",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{}}}],["lib/data/api/validation",{"_index":367,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/public",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/ui",{"_index":402,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["libs/upload/src/upload.request",{"_index":263,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["libs/upload/src/upload.storage",{"_index":264,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["light",{"_index":1138,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#2e2e2e",{"_index":1141,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#3e3e3e",{"_index":1142,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(map",{"_index":747,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["limit",{"_index":585,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["line",{"_index":720,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["linear",{"_index":681,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["list",{"_index":758,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["listener",{"_index":129,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["literal",{"_index":857,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["make",{"_index":477,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["manager",{"_index":1002,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["map",{"_index":422,"title":{},"body":{"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["map((bufferedchanges",{"_index":444,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["map((result",{"_index":914,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["margin",{"_index":707,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["marked",{"_index":575,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["matching",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.max(this.active",{"_index":516,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["math.random().tostring(32).slice(2",{"_index":882,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["math.round(progress",{"_index":844,"title":{},"body":{"classes/UploadModel.html":{}}}],["max",{"_index":465,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["maybe",{"_index":1003,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["mb",{"_index":236,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["means",{"_index":493,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["merge",{"_index":418,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["message",{"_index":751,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":1218,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":267,"title":{},"body":{"injectables/FileUploadFactory.html":{},"classes/UploadModel.html":{}}}],["module",{"_index":379,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":381,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":126,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["move",{"_index":847,"title":{},"body":{"classes/UploadModel.html":{}}}],["moz",{"_index":680,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["much",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["multiple",{"_index":204,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["new",{"_index":160,"title":{},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":351,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["nextupload",{"_index":518,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["nextupload.start",{"_index":520,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["ngafterviewinit",{"_index":347,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["ngmodule",{"_index":398,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":168,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngoninit",{"_index":1113,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngx",{"_index":287,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["ngxfileupload",{"_index":78,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileupload(url",{"_index":152,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ngxfileuploaddirective",{"_index":97,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ngxfileuploaditem",{"_index":591,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem]{@link",{"_index":613,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":1107,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadmodule",{"_index":380,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["none",{"_index":207,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["notification",{"_index":963,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["notified",{"_index":130,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["notify",{"_index":556,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["notifyobserver",{"_index":521,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["notifyobservers",{"_index":964,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["nowrap",{"_index":710,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":229,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":118,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["object.assign(validationresult",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":417,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["observe",{"_index":930,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["observeduploads",{"_index":436,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["observer",{"_index":1076,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["observers",{"_index":871,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["of(true).pipe",{"_index":460,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["old",{"_index":678,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["once",{"_index":584,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["onclick(event",{"_index":182,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ondestroy",{"_index":73,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["one",{"_index":912,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["onfiledragover(event",{"_index":172,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["onfiledrop(event",{"_index":176,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["onfileselect(event",{"_index":214,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["oninit",{"_index":1085,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onitemclick(event",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["opera12",{"_index":698,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":257,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["or(...validators",{"_index":1153,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":1147,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":1150,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":408,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":1154,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":217,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["out",{"_index":395,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":744,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["output",{"_index":142,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["outputs",{"_index":84,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["over",{"_index":135,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["overflow",{"_index":712,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["overview",{"_index":1221,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1190,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":661,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["parsefloat(size.tostring",{"_index":240,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pass",{"_index":344,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passed",{"_index":326,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["passes",{"_index":622,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":650,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["pending",{"_index":414,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["percent",{"_index":567,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["permalink",{"_index":670,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["pipe",{"_index":221,"title":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["pipe(filter",{"_index":480,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["pipe(take(1",{"_index":1055,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["pipe(takeuntil(this.cancel",{"_index":931,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":1118,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["pipes",{"_index":223,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"index.html":{}}}],["pipetransform",{"_index":232,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{}}}],["place",{"_index":1051,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["plain",{"_index":117,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["pointer",{"_index":743,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["position",{"_index":729,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["post",{"_index":113,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["prev",{"_index":917,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["private",{"_index":154,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["processing",{"_index":415,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["progress",{"_index":534,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":727,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["progressevent",{"_index":941,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["progressing",{"_index":494,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["progressinguploads",{"_index":431,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providedin",{"_index":265,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["providers",{"_index":386,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["purge",{"_index":1007,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["queue",{"_index":433,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["queuechange",{"_index":435,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["queuechanged",{"_index":441,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["queued",{"_index":508,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["queueduploads",{"_index":430,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["queuestate",{"_index":412,"title":{"interfaces/QueueState.html":{}},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["radius",{"_index":665,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["raw",{"_index":777,"title":{},"body":{"classes/UploadModel.html":{}}}],["readonly",{"_index":582,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":197,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["red",{"_index":755,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["redux",{"_index":1005,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["register",{"_index":212,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["register(upload",{"_index":447,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["registers",{"_index":463,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["registerstoreevents",{"_index":1116,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["registeruploadchange(request",{"_index":473,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["registeruploaddestroyevent",{"_index":1077,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["relative",{"_index":730,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["reload",{"_index":749,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["remote",{"_index":588,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":155,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["remove(event",{"_index":596,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove(upload",{"_index":1021,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["removecompleteduploads",{"_index":1035,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["removed",{"_index":621,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["removefromqueue(request",{"_index":509,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["removeinvalid",{"_index":1008,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["renamed",{"_index":1001,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["render",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["rendered",{"_index":298,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["renderer",{"_index":98,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["renderer2",{"_index":91,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["reportprogress",{"_index":929,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["represents",{"_index":766,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["reqid",{"_index":880,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["reqid.join(\"_",{"_index":883,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["request",{"_index":114,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["request.change",{"_index":475,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["request.destroy",{"_index":1066,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["request.iscompleted(true",{"_index":481,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["requestcompleted(request",{"_index":499,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["requestid",{"_index":581,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["requestid(id",{"_index":834,"title":{},"body":{"classes/UploadModel.html":{}}}],["requests",{"_index":492,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["requeststarting(req",{"_index":490,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["res.body",{"_index":961,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["res.ok",{"_index":960,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["reset",{"_index":394,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"index.html":{}}}],["resetupload",{"_index":966,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["responds",{"_index":938,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response",{"_index":548,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":829,"title":{},"body":{"classes/UploadModel.html":{}}}],["response.error",{"_index":940,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response.message",{"_index":944,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response.status",{"_index":942,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["restart",{"_index":552,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.reduce((prev",{"_index":915,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":541,"title":{},"body":{"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["retry(event",{"_index":598,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":358,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["reverse",{"_index":1124,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["root",{"_index":266,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["row",{"_index":723,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["run",{"_index":466,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["runinthiscontext",{"_index":426,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["running",{"_index":577,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["rxjs",{"_index":145,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["rxjs/internal/operators/take",{"_index":1033,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["rxjs/operators",{"_index":283,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["safari7",{"_index":699,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["save",{"_index":302,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["security",{"_index":196,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["select",{"_index":195,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["selected",{"_index":184,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["selector",{"_index":77,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["self",{"_index":718,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["send",{"_index":106,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["sends",{"_index":545,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["server",{"_index":544,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["service",{"_index":879,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["set",{"_index":112,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["setconcurrent(count",{"_index":972,"title":{},"body":{"classes/UploadQueue.html":{}}}],["setispending(pending",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["setngxfileupload(url",{"_index":138,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["setrequestid(id",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["setresponse(response",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["setstate(state",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["setstorage(storage",{"_index":1105,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["settemplate(tpl",{"_index":643,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setupload(fileupload",{"_index":642,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":672,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["short",{"_index":1072,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["shrink",{"_index":1129,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["single",{"_index":590,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["size",{"_index":231,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["size.pipe",{"_index":404,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["size.pipe.ts",{"_index":225,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["size.pipe.ts:10",{"_index":230,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["sizing",{"_index":1127,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["solid",{"_index":668,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["something",{"_index":604,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["sort",{"_index":356,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":703,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["start",{"_index":456,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":608,"title":{},"body":{"classes/UploadControl.html":{}}}],["startall",{"_index":1009,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["started",{"_index":605,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["starting",{"_index":489,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["startnextinqueue(request",{"_index":514,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["starts",{"_index":462,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["state",{"_index":528,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["state(state",{"_index":836,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["statechange",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["statements",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["statetostring",{"_index":525,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["statetostringpipe",{"_index":391,"title":{"pipes/StateToStringPipe.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"pipes/StateToStringPipe.html":{},"coverage.html":{},"index.html":{}}}],["static",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["still",{"_index":576,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["stop",{"_index":593,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["stop(event",{"_index":610,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopall",{"_index":1010,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["stopped",{"_index":869,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["stops",{"_index":1027,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["storage",{"_index":82,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["storage(storage",{"_index":1108,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["store",{"_index":1017,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["storeconfig",{"_index":1037,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["stream",{"_index":870,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["string",{"_index":107,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"interfaces/IDataNode.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["string.pipe",{"_index":406,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["string.pipe.ts",{"_index":524,"title":{},"body":{"pipes/StateToStringPipe.html":{},"coverage.html":{}}}],["string.pipe.ts:9",{"_index":527,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["style",{"_index":759,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["styles",{"_index":629,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["styleurls",{"_index":292,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["sub",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["subject",{"_index":144,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["submit",{"_index":1031,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["submits",{"_index":1038,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["subscribe",{"_index":350,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["subscribed",{"_index":1053,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["subscribtions",{"_index":156,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["subscription",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["succes",{"_index":569,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["success",{"_index":565,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":1224,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1225,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":529,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["switchmap",{"_index":864,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["table",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":421,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["take(1",{"_index":482,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["takeuntil",{"_index":282,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["takeuntil(merge(request.destroyed",{"_index":485,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["takeuntil(this.destroyed",{"_index":349,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["tap",{"_index":423,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["tap((request",{"_index":1079,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["template",{"_index":297,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["template(tpl",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["templateref",{"_index":279,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["templateurl",{"_index":290,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["text",{"_index":711,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["think",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.active",{"_index":454,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.add",{"_index":165,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.cancel",{"_index":898,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.cancel$.complete",{"_index":895,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.cancel$.next(true",{"_index":894,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.change",{"_index":1040,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.asobservable",{"_index":1046,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.complete",{"_index":1060,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.next",{"_index":1082,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.completed",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.concurrentcount",{"_index":439,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.context",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.context.data",{"_index":352,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.createbeforestarthook(upload",{"_index":449,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.createfieldinputfield",{"_index":167,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.createuploadbody",{"_index":927,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.destroyed",{"_index":1112,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.destroyed$.asobservable",{"_index":875,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.destroyed$.complete",{"_index":170,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.destroyed$.next(true",{"_index":169,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["this.destroyed.next(true",{"_index":354,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.disabled",{"_index":177,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.execvalidator(validator",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":827,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.size",{"_index":826,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.type",{"_index":828,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.filename",{"_index":848,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":166,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.click",{"_index":183,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.files",{"_index":220,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.value",{"_index":219,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.filesize",{"_index":843,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":625,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.change",{"_index":348,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.data",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.destroy",{"_index":626,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.retry",{"_index":616,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":617,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handleerror(error",{"_index":920,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleevent(event",{"_index":615,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":180,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.handlehttpevent(event",{"_index":919,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleprogress(event",{"_index":952,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleresponse(event",{"_index":954,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handlesent",{"_index":950,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.haserror",{"_index":852,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.hooks",{"_index":897,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.hooks.beforestart",{"_index":888,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.http.post(this.options.url",{"_index":928,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.iscompleted(true",{"_index":891,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isidle",{"_index":909,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isinuploadqueue(request",{"_index":500,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.isinvalid",{"_index":853,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.ispending",{"_index":910,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isrequestcompleted",{"_index":901,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.itemtpl",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.notifyobserver",{"_index":472,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.notifyobservers",{"_index":890,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.observeduploads.add(request",{"_index":488,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.observeduploads.delete(request",{"_index":503,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.observeduploads.has(request",{"_index":474,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.onfileselect(e",{"_index":211,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.options",{"_index":886,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.options.formdata.enabled",{"_index":933,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.options.formdata.name",{"_index":934,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.progress",{"_index":849,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.progressinguploads",{"_index":453,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.progressinguploads.filter((upload",{"_index":515,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.progressinguploads.push(req",{"_index":491,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange",{"_index":446,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.asobservable",{"_index":442,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.complete",{"_index":451,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.next",{"_index":522,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads",{"_index":452,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.filter(upload",{"_index":510,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.indexof(request",{"_index":507,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.length",{"_index":517,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.push(upload",{"_index":471,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.shift",{"_index":519,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.registerstoreevents",{"_index":1114,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.registeruploadchange(upload",{"_index":464,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.registeruploaddestroyevent",{"_index":1045,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.removefromqueue(request",{"_index":501,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.renderer.listen(inputfield",{"_index":208,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":203,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":205,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.requestcompleted(request",{"_index":487,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.requestid",{"_index":854,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.requeststarting(request",{"_index":486,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.resetupload",{"_index":907,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.response",{"_index":850,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.start",{"_index":908,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.startnextinqueue(request",{"_index":502,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.state",{"_index":833,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.statechange",{"_index":323,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.storage.add(upload",{"_index":192,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.storeconfig",{"_index":1042,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.storeconfig.concurrentuploads",{"_index":1044,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.units.length",{"_index":244,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.units[unit",{"_index":246,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.upload",{"_index":884,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.asobservable",{"_index":874,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.complete",{"_index":896,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.next(this.upload",{"_index":965,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.file",{"_index":936,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.filename",{"_index":937,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.haserror",{"_index":906,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.isinvalid",{"_index":892,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.ispending",{"_index":967,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.requestid",{"_index":877,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.response",{"_index":946,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.state",{"_index":878,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.tojson",{"_index":876,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.uploaded",{"_index":956,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.validationerrors",{"_index":924,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.uploaddestroy",{"_index":1062,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.complete",{"_index":1061,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.next(upload",{"_index":1056,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.pipe",{"_index":1078,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaded",{"_index":842,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":839,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":837,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfactory.createupload(file",{"_index":189,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.uploadfile",{"_index":825,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.uploadpending",{"_index":832,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadqueue",{"_index":1041,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.change",{"_index":1047,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.concurrent",{"_index":1043,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.destroy",{"_index":1059,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.register(upload",{"_index":1050,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadrequestid",{"_index":835,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadresponse",{"_index":830,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadresponse.errors",{"_index":845,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploads",{"_index":1063,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["this.uploads.delete(request.requestid",{"_index":1080,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.foreach((upload",{"_index":1067,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.foreach(upload",{"_index":1057,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.get(id",{"_index":1065,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.set(upload.requestid",{"_index":1048,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadstorage",{"_index":1109,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.change",{"_index":1117,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.destroy",{"_index":1115,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.purge",{"_index":1121,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.startall",{"_index":1119,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.stopall",{"_index":1120,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorageset",{"_index":1110,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadvalidationerrors",{"_index":841,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.url",{"_index":153,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.validationerrors",{"_index":851,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.validator",{"_index":190,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.validators",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":370,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":623,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["time",{"_index":1074,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["timer",{"_index":612,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":624,"title":{},"body":{"classes/UploadControl.html":{}}}],["title",{"_index":708,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["todo",{"_index":846,"title":{},"body":{"classes/UploadModel.html":{}}}],["tojson",{"_index":767,"title":{},"body":{"classes/UploadModel.html":{}}}],["top",{"_index":735,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["total",{"_index":571,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["tpl",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["transform",{"_index":227,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{}}}],["transform(size",{"_index":228,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["transform(state",{"_index":526,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["transition",{"_index":739,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["translate",{"_index":736,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["transparent",{"_index":716,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tree",{"_index":631,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["trigger",{"_index":161,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["try",{"_index":511,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["tslib",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type=\"file",{"_index":186,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["typealiases",{"_index":1227,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ul",{"_index":757,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["unit",{"_index":241,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["units",{"_index":233,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["unsubscribe",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["update",{"_index":889,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["upload",{"_index":75,"title":{"interfaces/Upload.html":{}},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["upload(fileupload",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.beforestart",{"_index":448,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.cancel",{"_index":1071,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.destroy",{"_index":1058,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.destroyed",{"_index":1054,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.iscompleted",{"_index":1068,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.isidle",{"_index":1069,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.isinvalid",{"_index":1049,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.model",{"_index":557,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["upload.module.ts",{"_index":397,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":644,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.queue",{"_index":1032,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.request",{"_index":416,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.requestid",{"_index":1064,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.response.body.message",{"_index":647,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.size",{"_index":645,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.start",{"_index":1070,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.state",{"_index":468,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.tojson",{"_index":353,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.update",{"_index":470,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.validate(this.validator",{"_index":191,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["upload/src/upload.request",{"_index":148,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["upload/src/upload.storage",{"_index":150,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["uploadall",{"_index":1089,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploadapi",{"_index":284,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadapi.uploadstate",{"_index":296,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploadbody",{"_index":926,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadcomplete",{"_index":479,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["uploadcontrol",{"_index":276,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":319,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploaddata",{"_index":277,"title":{"interfaces/UploadData.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddestroy",{"_index":1039,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["uploaded",{"_index":572,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["uploaded(bytes",{"_index":838,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":819,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":820,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadfactory",{"_index":92,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["uploadfile",{"_index":773,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadinvalid",{"_index":822,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploaditemcomponent",{"_index":294,"title":{"components/UploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploadmodel",{"_index":261,"title":{"classes/UploadModel.html":{}},"body":{"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":268,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["uploadoptions",{"_index":258,"title":{"interfaces/UploadOptions.html":{}},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"coverage.html":{}}}],["uploadpending",{"_index":823,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadqueue",{"_index":428,"title":{"classes/UploadQueue.html":{}},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["uploadrequest",{"_index":147,"title":{"classes/UploadRequest.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["uploadrequest(this.httpclient",{"_index":269,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["uploadrequestid",{"_index":824,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadresponse",{"_index":564,"title":{"interfaces/UploadResponse.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":69,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["uploadstate",{"_index":295,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":893,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.completed",{"_index":535,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.idle",{"_index":531,"title":{},"body":{"pipes/StateToStringPipe.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.invalid",{"_index":536,"title":{},"body":{"pipes/StateToStringPipe.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.pending",{"_index":469,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.progress",{"_index":533,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.start",{"_index":484,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstorage",{"_index":109,"title":{"classes/UploadStorage.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["uploadstorageconfig",{"_index":1012,"title":{"interfaces/UploadStorageConfig.html":{}},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadstorageset",{"_index":1111,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploadstoreconfig",{"_index":583,"title":{"interfaces/UploadStoreConfig.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidation",{"_index":566,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":821,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadviewcomponent",{"_index":392,"title":{"components/UploadViewComponent.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":139,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["use",{"_index":116,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["used",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["useformdata",{"_index":83,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["user",{"_index":495,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["utils/factory",{"_index":149,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["utils/file",{"_index":403,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["utils/state",{"_index":405,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validate(validator",{"_index":921,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validated",{"_index":550,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":1143,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":840,"title":{},"body":{"classes/UploadModel.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":373,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator(this.upload.file",{"_index":923,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validator.validate(file",{"_index":371,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(this.upload.file",{"_index":922,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":100,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":761,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["variable",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1230,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":185,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["view",{"_index":286,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["view.html",{"_index":1087,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.scss",{"_index":1086,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts",{"_index":1084,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["view.ts:19",{"_index":1093,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:22",{"_index":1096,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:25",{"_index":1097,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:28",{"_index":1092,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:31",{"_index":1098,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:34",{"_index":1095,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:39",{"_index":1104,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:43",{"_index":1102,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:49",{"_index":1091,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:86",{"_index":1101,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:91",{"_index":1100,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:96",{"_index":1099,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["viewchild",{"_index":278,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["vm",{"_index":427,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["w3c",{"_index":694,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["want",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["weakset",{"_index":437,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["web",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":688,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["white",{"_index":709,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["width",{"_index":726,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["window",{"_index":162,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["without",{"_index":199,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["wrapped",{"_index":865,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["wrapper",{"_index":1132,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["x",{"_index":1128,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["yes",{"_index":362,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":733,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["zone.js",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":393,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"@lib/data/api\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FileBrowserDirective.html":{"url":"directives/FileBrowserDirective.html","title":"directive - FileBrowserDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  FileBrowserDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/ui/src/file-browser.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                storage\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ngxFileUpload\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, uploadFactory: FileUploadFactory)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:70\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadFactory\n                                                  \n                                                        \n                                                                        FileUploadFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:55\n                            \n                        \n                \n                    \n                        form data field name with which form >data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n                \n                    \n                        Type :         UploadStorage\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:48\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:41\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:30\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:119\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:95\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:104\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n\n\n                \n                    \n                        setngxFileUpload(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:36\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { UploadRequest } from \"../../upload/src/upload.request\";\nimport { FileUploadFactory } from \"../../../utils/factory\";\nimport { UploadStorage } from \"../../upload/src/upload.storage\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\"\n})\nexport class FileBrowserDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    @Input()\n    public storage: UploadStorage;\n\n    @Input(\"ngxFileUpload\")\n    public set ngxFileUpload(url: string) {\n        this.url = url;\n    }\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form >data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public disabled = false;\n\n    private url: string;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private renderer: Renderer2,\n        private uploadFactory: FileUploadFactory,\n    ) {\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            const files = Array.from(event.dataTransfer.files);\n            this.handleFileSelect(files);\n        }\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        files.forEach((file: File) => {\n            const upload = this.uploadFactory.createUpload(file, {url: this.url});\n            if (this.validator) {\n                upload.validate(this.validator);\n            }\n            this.storage.add(upload);\n        });\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FileSizePipe.html":{"url":"pipes/FileSizePipe.html","title":"pipe - FileSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FileSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/file-size.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        fileSize\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/file-size.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"fileSize\"\n})\nexport class FileSizePipe implements PipeTransform {\n\n    private units = [\"Byte\", \"Kb\", \"Mb\", \"Gb\"];\n\n    transform(size: number): string {\n        let bytes = isNaN(size) ? parseFloat(size.toString()) : size;\n        let unit  = 0;\n\n        while (bytes > 1024 && this.units.length > unit) {\n            bytes = bytes / 1024;\n            unit++;\n        }\n        return `${bytes.toFixed(2)} ${this.units[unit]}`;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadFactory.html":{"url":"injectables/FileUploadFactory.html","title":"injectable - FileUploadFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createStore\n                            \n                            \n                                    Public\n                                createUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/factory.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createStore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createStore()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         UploadStorage\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createUpload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUpload(file: File, options: UploadOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/factory.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                UploadOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UploadRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { UploadModel } from \"../data/upload.model\";\nimport { UploadRequest, UploadOptions } from \"../libs/upload/src/upload.request\";\nimport { UploadStorage } from \"../libs/upload/src/upload.storage\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FileUploadFactory {\n\n    public constructor(\n        private httpClient: HttpClient\n    ) {}\n\n    public createUpload(file: File, options: UploadOptions): UploadRequest {\n        const model = new UploadModel(file);\n        return new UploadRequest(this.httpClient, model, options);\n    }\n\n    public createStore(): UploadStorage {\n        return new UploadStorage();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter, AfterViewInit } from \"@angular/core\";\nimport { UploadRequest, UploadControl } from \"../../upload\";\nimport { UploadModel } from \"../../../data/upload.model\";\nimport { UploadData } from \"../../../data/api\";\nimport {  Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport * as UploadAPI from \"../../../data/api/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements AfterViewInit, OnDestroy {\n\n    public uploadState = UploadAPI.UploadState;\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: UploadRequest;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private destroyed: Subject = new Subject();\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: UploadRequest) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: this.fileUpload.data,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void {\n        this.fileUpload.change\n            .pipe(\n                takeUntil(this.destroyed)\n            )\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.destroyed.next(true);\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"@lib/data/api/validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/index.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/index.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface IDataNode {\n    [key: string]: any;\n}\n\nexport * from \"./validation\";\nexport * from \"./upload\";\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileBrowserDirective\n\nFileBrowserDirective\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileBrowserDirective->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nStateToStringPipe\n\nStateToStringPipe\n\nNgxFileUploadModule -->\n\nStateToStringPipe->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileBrowserDirective \n\nFileBrowserDirective \n\nFileBrowserDirective  -->\n\nNgxFileUploadModule->FileBrowserDirective \n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nStateToStringPipe \n\nStateToStringPipe \n\nStateToStringPipe  -->\n\nNgxFileUploadModule->StateToStringPipe \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FileBrowserDirective\n                        \n                        \n                            FileSizePipe\n                        \n                        \n                            StateToStringPipe\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileBrowserDirective\n                        \n                        \n                            FileSizePipe\n                        \n                        \n                            StateToStringPipe\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { UploadViewComponent, FileBrowserDirective, UploadItemComponent } from \"./libs/ui\";\nimport { FileSizePipe } from \"./utils/file-size.pipe\";\nimport { StateToStringPipe } from \"./utils/state-to-string.pipe\";\n\n@NgModule({\n    declarations: [\n        FileBrowserDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        StateToStringPipe,\n        FileSizePipe\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n    ],\n    exports: [\n        FileBrowserDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        StateToStringPipe,\n        FileSizePipe\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationErrors } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueueState.html":{"url":"interfaces/QueueState.html","title":"interface - QueueState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QueueState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pending\n                                \n                                \n                                        processing\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pending\n                                    \n                                \n                                \n                                    \n                                        pending:         UploadRequest[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadRequest[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        processing\n                                    \n                                \n                                \n                                    \n                                        processing:         UploadRequest[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadRequest[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UploadState } from \"../../../data/api\";\nimport { UploadRequest } from \"./upload.request\";\nimport { Observable, of, merge, BehaviorSubject } from \"rxjs\";\nimport { filter, take, map, takeUntil, tap, buffer, debounceTime } from \"rxjs/operators\";\nimport { runInThisContext } from 'vm';\n\nexport interface QueueState {\n\n    pending: UploadRequest[];\n\n    processing: UploadRequest[];\n}\n\nexport class UploadQueue {\n\n    private active = 0;\n\n    private queuedUploads: UploadRequest[] = [];\n\n    private progressingUploads: UploadRequest[] = [];\n\n    private concurrentCount = -1;\n\n    /**\n     * subscribe to get notified queue has been changed\n     */\n    private queueChange$: BehaviorSubject;\n\n    private observedUploads = new WeakSet();\n\n    public set concurrent(count: number) {\n        this.concurrentCount = count;\n    }\n\n    public get change(): Observable {\n        const queueChanged  = this.queueChange$.asObservable();\n        return queueChanged\n            .pipe(\n                buffer(queueChanged.pipe(debounceTime(10))),\n                map((bufferedChanges) => bufferedChanges.pop()),\n            );\n    }\n\n    public constructor() {\n        this.queueChange$ = new BehaviorSubject({\n            pending: [], processing: []\n        });\n    }\n\n    public register(upload: UploadRequest) {\n        upload.beforeStart(() => this.createBeforeStartHook(upload));\n    }\n\n    public destroy() {\n        this.queueChange$.complete();\n\n        this.queueChange$       = null;\n        this.queuedUploads      = null;\n        this.progressingUploads = null;\n        this.active             = null;\n    }\n\n    /**\n     * create before start hook, if any upload wants to start we have to check\n     */\n    private createBeforeStartHook(upload: UploadRequest): Observable {\n        return of(true).pipe(\n            /**\n             * before any download starts we registers on it\n             * to get notified when it starts and when it is completed, destroyed\n             */\n            tap(() => this.registerUploadChange(upload)),\n            /**\n             * check active uploads and max uploads we could run\n             */\n            map(() => this.active  {\n                if (!isStartAble) {\n                    upload.state = UploadState.PENDING;\n                    upload.update();\n                    this.queuedUploads.push(upload);\n                    this.notifyObserver();\n                }\n            })\n        );\n    }\n\n    /**\n     * register to upload change\n     */\n    private registerUploadChange(request: UploadRequest) {\n\n        if (this.observedUploads.has(request))  {\n            return;\n        }\n\n        const change$ = request.change;\n\n        /** register for changes which make request complete */\n        const uploadComplete$ = change$\n            .pipe(filter(() => request.isCompleted(true)), take(1));\n\n        change$\n            .pipe(\n                filter((upload) => upload.state === UploadState.START),\n                takeUntil(merge(request.destroyed, uploadComplete$))\n            )\n            .subscribe({\n                next: ()     => this.requestStarting(request),\n                complete: () => this.requestCompleted(request)\n            });\n\n        this.observedUploads.add(request);\n    }\n\n    /**\n     * a new request is starting\n     */\n    private requestStarting(req: UploadRequest) {\n        this.active += 1;\n        this.progressingUploads.push(req);\n        this.notifyObserver();\n    }\n\n    /**\n     * requests gets completed, this means request is pending or was progressing and the user\n     * cancel request, remove it or even destroys them\n     */\n    private requestCompleted(request: UploadRequest) {\n        this.isInUploadQueue(request)\n            ? this.removeFromQueue(request)\n            : this.startNextInQueue(request);\n\n        this.observedUploads.delete(request);\n        this.notifyObserver();\n    }\n\n    /**\n     * checks upload is in queue\n     */\n    private isInUploadQueue(request: UploadRequest): boolean {\n        return this.queuedUploads.indexOf(request) > -1;\n    }\n\n    /**\n     * remove upload request from queued uploads\n     */\n    private removeFromQueue(request) {\n        this.queuedUploads = this.queuedUploads.filter(upload =>  upload !== request);\n    }\n\n    /**\n     * try to start next upload in queue, returns false if no further uploads\n     * exists\n     */\n    private startNextInQueue(request: UploadRequest) {\n        this.progressingUploads = this.progressingUploads.filter((upload) => upload !== request);\n        this.active = Math.max(this.active - 1, 0);\n        if (this.queuedUploads.length > 0) {\n            const nextUpload = this.queuedUploads.shift();\n            nextUpload.start();\n        }\n    }\n\n    private notifyObserver() {\n        this.queueChange$.next({\n            pending:    [...this.queuedUploads],\n            processing: [...this.progressingUploads]\n        });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StateToStringPipe.html":{"url":"pipes/StateToStringPipe.html","title":"pipe - StateToStringPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StateToStringPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/state-to-string.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stateToString\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(state: UploadState)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/state-to-string.pipe.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                UploadState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\nimport { UploadState } from \"../data/api\";\n\n@Pipe({\n    name: \"stateToString\"\n})\nexport class StateToStringPipe implements PipeTransform {\n\n    transform(state: UploadState): string {\n\n        switch (state) {\n            case UploadState.IDLE:      return \"idle\";\n            case UploadState.PENDING:   return \"pending\";\n            case UploadState.PROGRESS:  return \"progress\";\n            case UploadState.COMPLETED: return \"completed\";\n            case UploadState.START:     return \"start\";\n            case UploadState.INVALID:   return \"invalid\";\n            default:                    return \"canceled\";\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Upload.html":{"url":"interfaces/Upload.html","title":"interface - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        change\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                                \n                                    hasError\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    retry\n                                \n                                \n                                    start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:101\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:107\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \nisInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:112\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \nretry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:96\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:90\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change\n                                    \n                                \n                                \n                                    \n                                        change:         Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Observable\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns observable which notify if file upload state\nhas been changed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    get upload data informations\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: UploadRequest)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        UploadRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:33\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:41\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:49\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     */\n    public constructor(\n        private fileUpload: UploadRequest\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    public remove(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.destroy();\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hasError\n                                \n                                \n                                        isInvalid\n                                \n                                \n                                        isPending\n                                \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        requestId\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns true if upload request was finished with an error\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isInvalid\n                                    \n                                \n                                \n                                    \n                                        isInvalid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns true if upload is invalid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPending\n                                    \n                                \n                                \n                                    \n                                        isPending:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload is marked for start but still in upload queue\nand not running currently\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    name of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    progress in percent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestId\n                                    \n                                \n                                \n                                    \n                                        requestId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload request id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload finishes request with a succes, holds success informations\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    total size of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    current state of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    uploaded size\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    contains validation results\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadItemComponent.html":{"url":"components/UploadItemComponent.html","title":"component - UploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./upload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                upload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                            \n                                    Public\n                                uploadState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                completed\n                            \n                            \n                                stateChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:65\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:78\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:53\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        stateChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:65\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:89\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:121\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:35\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:30\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploadState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : UploadAPI.UploadState\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:53\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:78\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter, AfterViewInit } from \"@angular/core\";\nimport { UploadRequest, UploadControl } from \"../../upload\";\nimport { UploadModel } from \"../../../data/upload.model\";\nimport { UploadData } from \"../../../data/api\";\nimport {  Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport * as UploadAPI from \"../../../data/api/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements AfterViewInit, OnDestroy {\n\n    public uploadState = UploadAPI.UploadState;\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: UploadRequest;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private destroyed: Subject = new Subject();\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: UploadRequest) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: this.fileUpload.data,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void {\n        this.fileUpload.change\n            .pipe(\n                takeUntil(this.destroyed)\n            )\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.destroyed.next(true);\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n                {{upload.name}}\n            \n\n            \n            \n                \n            \n        \n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | fileSize}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n                \n                    \n                        {{error}}\n                    \n                \n\n                \n                    \n                        {{upload.response.body.message}}\n                    \n                    \n                        {{upload.name}} uploaded\n                    \n                \n            \n\n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./upload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../../../assets/fonts' !default;\n\n@import '../../../assets//scss/variables';\n@import '../../../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n\n        display: flex;\n        justify-content: space-between;\n        border-bottom: 1px solid darken(#FDFDFD, 8);\n        padding: 0 0 .25rem;\n        margin: 0 0 .25rem;\n\n        .title {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            overflow: hidden;\n        }\n\n        .action-remove {\n            padding: 0;\n            margin: 0;\n            border: 0;\n            background: transparent;\n            align-self: center;\n            line-height: .9rem;\n            font-size: .9rem;\n            color: map-get($colors, dark);\n        }\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n\n        .upload-item--state {\n            font-size: .85rem;\n        }\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: 1rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n            transition: width .25s linear;\n        }\n    }\n\n    .upload-item--actions {\n\n        display: flex;\n\n        button {\n            display: flex;\n            padding: 0;\n            color: map-get($colors, dark);\n            cursor: pointer;\n            outline: none;\n            background: transparent;\n            line-height: 1rem;\n            border: 0;\n            font-size: 1rem;\n            margin: 0 .5rem 0 0;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                color: lighten(map-get($colors, dark), 50%);\n                cursor: not-allowed;\n            }\n        }\n\n        .item-action--reload, \n        .item-action--cancel {\n            font-size: .9rem;\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n            text-align: left;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{upload.name}}                                                                                                                                                                                                {{upload.size | fileSize}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                                                    {{error}}                                                                                                {{upload.response.body.message}}                                                                {{upload.name}} uploaded                                                            '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'FileBrowserDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.model.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    isPending\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    requestId\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                                \n                                    isUploadAble\n                                \n                                \n                                    hasError\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/upload.model.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/upload.model.ts:147\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:35\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:42\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:49\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:56\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:70\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:63\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isPending\n                    \n                \n\n                \n                    \n                        getisPending()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:78\n                                \n                            \n\n                \n                    \n                        setisPending(pending: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:74\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            pending\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isInvalid\n                    \n                \n\n                \n                    \n                        getisInvalid()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        requestId\n                    \n                \n\n                \n                    \n                        getrequestId()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:90\n                                \n                            \n\n                \n                    \n                        setrequestId(id: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:86\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            id\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:104\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:97\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:118\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:111\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:126\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:122\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUploadAble\n                    \n                \n\n                \n                    \n                        getisUploadAble()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hasError\n                    \n                \n\n                \n                    \n                        gethasError()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"./api/validation\";\nimport { UploadState, UploadResponse, UploadData } from \"./api/upload\";\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.IDLE;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    private uploadInvalid = false;\n\n    private uploadPending = false;\n\n    private uploadRequestId = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    public set isPending(pending: boolean) {\n        this.uploadPending = pending;\n    }\n\n    public get isPending(): boolean {\n        return this.uploadPending;\n    }\n\n    public get isInvalid(): boolean {\n        return this.state === UploadState.INVALID;\n    }\n\n    public set requestId(id: string) {\n        this.uploadRequestId = id;\n    }\n\n    public get requestId(): string {\n        return this.uploadRequestId;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    public get isUploadAble(): boolean {\n        return true;\n    }\n\n    public get hasError() {\n        return this.uploadResponse && this.uploadResponse.errors ? true : false;\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            },\n            hasError:  this.hasError,\n            isInvalid: this.isInvalid,\n            isPending: this.uploadPending,\n            requestId: this.requestId\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.request.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable, forkJoin } from \"rxjs\";\nimport { takeUntil, filter, switchMap, map } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload, Validator, ValidationFn} from \"../../../data/api\";\nimport { UploadModel } from \"../../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class UploadRequest implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    /**\n     * upload stream gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    private hooks: {beforeStart: Array Observable>} = { beforeStart: [] };\n\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    public get destroyed(): Observable {\n        return this.destroyed$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    public get requestId(): string {\n        return this.upload.requestId;\n    }\n\n    public set state(state: UploadState) {\n        this.upload.state = state;\n    }\n\n    public get state() {\n        return this.upload.state;\n    }\n\n    /**\n     * create UploadRequest service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        const reqId = Array.from({length: 4}, () => Math.random().toString(32).slice(2));\n        this.upload.requestId = reqId.join(\"_\");\n\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    public beforeStart(hook: () => Observable) {\n        this.hooks.beforeStart = [\n            ...this.hooks.beforeStart,\n            hook\n        ];\n    }\n\n    public update() {\n        this.notifyObservers();\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        if (!this.isCompleted(true) && !this.upload.isInvalid) {\n            this.upload.state = UploadState.CANCELED;\n            this.cancel$.next(true);\n            this.notifyObservers();\n        }\n    }\n\n    public destroy() {\n        this.cancel$.next(true);\n        this.destroyed$.next(true);\n\n        this.cancel$.complete();\n        this.upload$.complete();\n\n        this.hooks      = null;\n        this.upload$    = null;\n        this.upload     = null;\n        this.cancel$    = null;\n    }\n\n    public isCompleted(ignoreError = false): boolean {\n        let isCompleted = this.isRequestCompleted();\n        isCompleted = isCompleted && (ignoreError || !this.hasError());\n        isCompleted = isCompleted || this.state === UploadState.CANCELED;\n        return isCompleted;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isInvalid;\n    }\n\n    public isProgress(): boolean {\n        return this.upload.state === UploadState.PROGRESS || this.upload.state === UploadState.START;\n    }\n\n    public isPending(): boolean {\n        return this.upload.state === UploadState.PENDING;\n    }\n\n    public isIdle(): boolean {\n        return this.upload.state === UploadState.IDLE;\n    }\n\n    public isRequestCompleted() {\n        return this.upload.state === UploadState.COMPLETED;\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.state === UploadState.COMPLETED && this.upload.hasError) {\n            this.resetUpload();\n            this.start();\n        }\n    }\n\n    /**\n     * start file upload\n     */\n    public start() {\n\n        if (!this.isIdle() && !this.isPending()) {\n            return;\n        }\n\n        /** call beforeStart hooks, if one returns false upload will not started */\n        forkJoin(this.hooks.beforeStart.map((hook) => hook()))\n            .pipe(\n                map((result: boolean[]) => result.reduce((prev, cur) => prev && cur, true)),\n                filter(result => result),\n                switchMap(() => this.uploadFile()),\n            )\n            .subscribe({\n                next:  (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n    }\n\n    /**\n     * validate upload\n     */\n    public validate(validator: Validator | ValidationFn) {\n        const result = \"validate\" in validator\n            ? validator.validate(this.upload.file)\n            : validator(this.upload.file);\n\n        if (result !== null) {\n            this.upload.state = UploadState.INVALID;\n        }\n        this.upload.validationErrors = result;\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.hasError;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        }).pipe(takeUntil(this.cancel$));\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * request responds with an error\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        /** not completed since we could retry */\n        this.upload.state    = UploadState.COMPLETED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent:           this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response:       this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * handle http progress event\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload completed with 20x\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.response = uploadResponse;\n        this.upload.state    = UploadState.COMPLETED;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n\n    /**\n     * reset upload\n     */\n    private resetUpload() {\n        this.upload.state     = UploadState.IDLE;\n        this.upload.response  = {success: false, body: null, errors: null};\n        this.upload.uploaded  = 0;\n        this.upload.isPending = false;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadQueue.html":{"url":"classes/UploadQueue.html","title":"class - UploadQueue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadQueue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    concurrent\n                                \n                                \n                                    change\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:42\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(upload: UploadRequest)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        concurrent\n                    \n                \n\n\n                \n                    \n                        setconcurrent(count: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:31\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            count\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:35\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UploadState } from \"../../../data/api\";\nimport { UploadRequest } from \"./upload.request\";\nimport { Observable, of, merge, BehaviorSubject } from \"rxjs\";\nimport { filter, take, map, takeUntil, tap, buffer, debounceTime } from \"rxjs/operators\";\nimport { runInThisContext } from 'vm';\n\nexport interface QueueState {\n\n    pending: UploadRequest[];\n\n    processing: UploadRequest[];\n}\n\nexport class UploadQueue {\n\n    private active = 0;\n\n    private queuedUploads: UploadRequest[] = [];\n\n    private progressingUploads: UploadRequest[] = [];\n\n    private concurrentCount = -1;\n\n    /**\n     * subscribe to get notified queue has been changed\n     */\n    private queueChange$: BehaviorSubject;\n\n    private observedUploads = new WeakSet();\n\n    public set concurrent(count: number) {\n        this.concurrentCount = count;\n    }\n\n    public get change(): Observable {\n        const queueChanged  = this.queueChange$.asObservable();\n        return queueChanged\n            .pipe(\n                buffer(queueChanged.pipe(debounceTime(10))),\n                map((bufferedChanges) => bufferedChanges.pop()),\n            );\n    }\n\n    public constructor() {\n        this.queueChange$ = new BehaviorSubject({\n            pending: [], processing: []\n        });\n    }\n\n    public register(upload: UploadRequest) {\n        upload.beforeStart(() => this.createBeforeStartHook(upload));\n    }\n\n    public destroy() {\n        this.queueChange$.complete();\n\n        this.queueChange$       = null;\n        this.queuedUploads      = null;\n        this.progressingUploads = null;\n        this.active             = null;\n    }\n\n    /**\n     * create before start hook, if any upload wants to start we have to check\n     */\n    private createBeforeStartHook(upload: UploadRequest): Observable {\n        return of(true).pipe(\n            /**\n             * before any download starts we registers on it\n             * to get notified when it starts and when it is completed, destroyed\n             */\n            tap(() => this.registerUploadChange(upload)),\n            /**\n             * check active uploads and max uploads we could run\n             */\n            map(() => this.active  {\n                if (!isStartAble) {\n                    upload.state = UploadState.PENDING;\n                    upload.update();\n                    this.queuedUploads.push(upload);\n                    this.notifyObserver();\n                }\n            })\n        );\n    }\n\n    /**\n     * register to upload change\n     */\n    private registerUploadChange(request: UploadRequest) {\n\n        if (this.observedUploads.has(request))  {\n            return;\n        }\n\n        const change$ = request.change;\n\n        /** register for changes which make request complete */\n        const uploadComplete$ = change$\n            .pipe(filter(() => request.isCompleted(true)), take(1));\n\n        change$\n            .pipe(\n                filter((upload) => upload.state === UploadState.START),\n                takeUntil(merge(request.destroyed, uploadComplete$))\n            )\n            .subscribe({\n                next: ()     => this.requestStarting(request),\n                complete: () => this.requestCompleted(request)\n            });\n\n        this.observedUploads.add(request);\n    }\n\n    /**\n     * a new request is starting\n     */\n    private requestStarting(req: UploadRequest) {\n        this.active += 1;\n        this.progressingUploads.push(req);\n        this.notifyObserver();\n    }\n\n    /**\n     * requests gets completed, this means request is pending or was progressing and the user\n     * cancel request, remove it or even destroys them\n     */\n    private requestCompleted(request: UploadRequest) {\n        this.isInUploadQueue(request)\n            ? this.removeFromQueue(request)\n            : this.startNextInQueue(request);\n\n        this.observedUploads.delete(request);\n        this.notifyObserver();\n    }\n\n    /**\n     * checks upload is in queue\n     */\n    private isInUploadQueue(request: UploadRequest): boolean {\n        return this.queuedUploads.indexOf(request) > -1;\n    }\n\n    /**\n     * remove upload request from queued uploads\n     */\n    private removeFromQueue(request) {\n        this.queuedUploads = this.queuedUploads.filter(upload =>  upload !== request);\n    }\n\n    /**\n     * try to start next upload in queue, returns false if no further uploads\n     * exists\n     */\n    private startNextInQueue(request: UploadRequest) {\n        this.progressingUploads = this.progressingUploads.filter((upload) => upload !== request);\n        this.active = Math.max(this.active - 1, 0);\n        if (this.queuedUploads.length > 0) {\n            const nextUpload = this.queuedUploads.shift();\n            nextUpload.start();\n        }\n    }\n\n    private notifyObserver() {\n        this.queueChange$.next({\n            pending:    [...this.queuedUploads],\n            processing: [...this.progressingUploads]\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadRequest.html":{"url":"classes/UploadRequest.html","title":"class - UploadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.request.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n            \n                Implements\n            \n            \n                            Upload\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beforeStart\n                            \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isCompleted\n                            \n                            \n                                    Public\n                                isIdle\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                isPending\n                            \n                            \n                                    Public\n                                isProgress\n                            \n                            \n                                    Public\n                                isRequestCompleted\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                                \n                                    destroyed\n                                \n                                \n                                    data\n                                \n                                \n                                    requestId\n                                \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:84\n                            \n                        \n\n                \n                    \n                            create UploadRequest service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            beforeStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    beforeStart(hook: () => void)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hook\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:115\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:217\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isCompleted(ignoreError)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    ignoreError\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isIdle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isIdle()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:146\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isPending\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isPending()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isProgress()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isRequestCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isRequestCompleted()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:170\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:180\n                \n            \n\n\n            \n                \n                    start file upload\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(validator: Validator | ValidationFn)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:202\n                \n            \n\n\n            \n                \n                    validate upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        destroyed\n                    \n                \n\n                \n                    \n                        getdestroyed()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:66\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:70\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        requestId\n                    \n                \n\n                \n                    \n                        getrequestId()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:82\n                                \n                            \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:78\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable, forkJoin } from \"rxjs\";\nimport { takeUntil, filter, switchMap, map } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload, Validator, ValidationFn} from \"../../../data/api\";\nimport { UploadModel } from \"../../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class UploadRequest implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    /**\n     * upload stream gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    private hooks: {beforeStart: Array Observable>} = { beforeStart: [] };\n\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    public get destroyed(): Observable {\n        return this.destroyed$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    public get requestId(): string {\n        return this.upload.requestId;\n    }\n\n    public set state(state: UploadState) {\n        this.upload.state = state;\n    }\n\n    public get state() {\n        return this.upload.state;\n    }\n\n    /**\n     * create UploadRequest service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        const reqId = Array.from({length: 4}, () => Math.random().toString(32).slice(2));\n        this.upload.requestId = reqId.join(\"_\");\n\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    public beforeStart(hook: () => Observable) {\n        this.hooks.beforeStart = [\n            ...this.hooks.beforeStart,\n            hook\n        ];\n    }\n\n    public update() {\n        this.notifyObservers();\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        if (!this.isCompleted(true) && !this.upload.isInvalid) {\n            this.upload.state = UploadState.CANCELED;\n            this.cancel$.next(true);\n            this.notifyObservers();\n        }\n    }\n\n    public destroy() {\n        this.cancel$.next(true);\n        this.destroyed$.next(true);\n\n        this.cancel$.complete();\n        this.upload$.complete();\n\n        this.hooks      = null;\n        this.upload$    = null;\n        this.upload     = null;\n        this.cancel$    = null;\n    }\n\n    public isCompleted(ignoreError = false): boolean {\n        let isCompleted = this.isRequestCompleted();\n        isCompleted = isCompleted && (ignoreError || !this.hasError());\n        isCompleted = isCompleted || this.state === UploadState.CANCELED;\n        return isCompleted;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isInvalid;\n    }\n\n    public isProgress(): boolean {\n        return this.upload.state === UploadState.PROGRESS || this.upload.state === UploadState.START;\n    }\n\n    public isPending(): boolean {\n        return this.upload.state === UploadState.PENDING;\n    }\n\n    public isIdle(): boolean {\n        return this.upload.state === UploadState.IDLE;\n    }\n\n    public isRequestCompleted() {\n        return this.upload.state === UploadState.COMPLETED;\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.state === UploadState.COMPLETED && this.upload.hasError) {\n            this.resetUpload();\n            this.start();\n        }\n    }\n\n    /**\n     * start file upload\n     */\n    public start() {\n\n        if (!this.isIdle() && !this.isPending()) {\n            return;\n        }\n\n        /** call beforeStart hooks, if one returns false upload will not started */\n        forkJoin(this.hooks.beforeStart.map((hook) => hook()))\n            .pipe(\n                map((result: boolean[]) => result.reduce((prev, cur) => prev && cur, true)),\n                filter(result => result),\n                switchMap(() => this.uploadFile()),\n            )\n            .subscribe({\n                next:  (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n    }\n\n    /**\n     * validate upload\n     */\n    public validate(validator: Validator | ValidationFn) {\n        const result = \"validate\" in validator\n            ? validator.validate(this.upload.file)\n            : validator(this.upload.file);\n\n        if (result !== null) {\n            this.upload.state = UploadState.INVALID;\n        }\n        this.upload.validationErrors = result;\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.hasError;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        }).pipe(takeUntil(this.cancel$));\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * request responds with an error\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        /** not completed since we could retry */\n        this.upload.state    = UploadState.COMPLETED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent:           this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response:       this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * handle http progress event\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload completed with 20x\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.response = uploadResponse;\n        this.upload.state    = UploadState.COMPLETED;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n\n    /**\n     * reset upload\n     */\n    private resetUpload() {\n        this.upload.state     = UploadState.IDLE;\n        this.upload.response  = {success: false, body: null, errors: null};\n        this.upload.uploaded  = 0;\n        this.upload.isPending = false;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadStorage.html":{"url":"classes/UploadStorage.html","title":"class - UploadStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n        \n\n            \n                Description\n            \n            \n                could renamed to upload manager\nmaybe we change this design to redux ... dont know\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                change\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                purge\n                            \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                removeInvalid\n                            \n                            \n                                    Public\n                                startAll\n                            \n                            \n                                    Public\n                                stopAll\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    queueChange\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: UploadStorageConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        UploadStorageConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(upload: UploadRequest)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:64\n                \n            \n\n\n            \n                \n                    add new upload to store\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            change\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    change()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:48\n                \n            \n\n\n            \n                \n                    register to get notified something on store change, add and remove\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:85\n                \n            \n\n\n            \n                \n                    destroy upload storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            purge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    purge()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:118\n                \n            \n\n\n            \n                \n                    remove all uploads which has been invalid\ncanceled or upload has been completed even it is has an error\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(upload: UploadRequest | string)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:108\n                \n            \n\n\n            \n                \n                    remove upload from store\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:147\n                \n            \n\n\n            \n                \n                    remove invalidated uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            startAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:129\n                \n            \n\n\n            \n                \n                    starts all queued uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stopAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stopAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:140\n                \n            \n\n\n            \n                \n                    stops all active uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        queueChange\n                    \n                \n\n                \n                    \n                        getqueueChange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:57\n                                \n                            \n                    \n                        \n                                get queue change observable to get notified something happens on queue.\nthis will submit if pending uploads changes or new uploads will processing\nnot if any upload has been added\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { buffer, debounceTime, tap } from \"rxjs/operators\";\nimport { UploadQueue, QueueState } from \"./upload.queue\";\nimport { take } from \"rxjs/internal/operators/take\";\n\nexport interface UploadStorageConfig {\n    concurrentUploads?: number;\n\n    /** not implemented yet */\n    removeCompletedUploads?: boolean;\n}\n\nconst defaultStoreConfig: UploadStorageConfig = {\n    concurrentUploads: 5\n};\n\n/**\n * could renamed to upload manager\n * maybe we change this design to redux ... dont know\n */\nexport class UploadStorage {\n\n    private change$: BehaviorSubject;\n    private uploads: Map = new Map();\n    private uploadQueue: UploadQueue;\n\n    private storeConfig: UploadStorageConfig;\n\n    /**\n     * submits if an upload gets destroyed\n     */\n    private uploadDestroy$: Subject = new Subject();\n\n    public constructor(config: UploadStorageConfig = {}) {\n        this.change$     = new BehaviorSubject([]);\n        this.uploadQueue = new UploadQueue();\n\n        this.storeConfig = {...defaultStoreConfig, ...config};\n        this.uploadQueue.concurrent = this.storeConfig.concurrentUploads;\n\n        this.registerUploadDestroyEvent();\n    }\n\n    /**\n     * register to get notified something on store change, add and remove\n     */\n    public change(): Observable {\n        return this.change$.asObservable();\n    }\n\n    /**\n     * get queue change observable to get notified something happens on queue.\n     * this will submit if pending uploads changes or new uploads will processing\n     * not if any upload has been added\n     */\n    public get queueChange(): Observable {\n        return this.uploadQueue.change;\n    }\n\n    /**\n     * add new upload to store\n     */\n    public add(upload: UploadRequest) {\n        this.uploads.set(upload.requestId, upload);\n\n        if (!upload.isInvalid()) {\n            this.uploadQueue.register(upload);\n        }\n\n        /**\n         * register to upload destroy, this can happens on any place\n         * not only in store. And pipe to interal subject we are subscribed\n         */\n        upload.destroyed\n            .pipe(take(1))\n            .subscribe(() => this.uploadDestroy$.next(upload));\n\n        this.notifyObserver();\n    }\n\n    /**\n     * destroy upload storage\n     */\n    public destroy() {\n\n        /** destroy all uploads */\n        this.uploads.forEach(upload => (upload.destroy()));\n\n        /** destroy upload queue */\n        this.uploadQueue.destroy();\n        this.uploadQueue = null;\n\n        /** destroy change stream */\n        this.change$.complete();\n        this.change$ = null;\n\n        /** destroy upload destroy stream */\n        this.uploadDestroy$.complete();\n        this.uploadDestroy$ = null;\n\n        this.uploads = null;\n    }\n\n    /**\n     * remove upload from store\n     */\n    public remove(upload: UploadRequest | string) {\n        const id = upload instanceof UploadRequest ? upload.requestId : upload;\n        const request = this.uploads.get(id);\n        request.destroy();\n    }\n\n    /**\n     * remove all uploads which has been invalid\n     * canceled or upload has been completed even it is has an error\n     */\n    public purge() {\n        this.uploads.forEach((upload) => {\n            if (upload.isCompleted() || upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n    }\n\n    /**\n     * starts all queued uploads\n     */\n    public startAll() {\n        this.uploads.forEach((upload) => {\n            if (upload.isIdle()) {\n                upload.start();\n            }\n        });\n    }\n\n    /**\n     * stops all active uploads\n     */\n    public stopAll() {\n        this.uploads.forEach(upload => (upload.cancel(), upload.destroy()));\n    }\n\n    /**\n     * remove invalidated uploads\n     */\n    public removeInvalid() {\n        this.uploads.forEach((upload) => {\n            if (upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n        this.notifyObserver();\n    }\n\n    /**\n     * registers to uploads destroy event, since multiple uploads\n     * can destroyed in short amount of time we buffer them at least for 10ms.\n     * and then remove them from list and notify observer\n     */\n    private registerUploadDestroyEvent() {\n        this.uploadDestroy$.pipe(\n            tap((request: UploadRequest) => this.uploads.delete(request.requestId)),\n            buffer(this.uploadDestroy$.pipe(debounceTime(10))),\n        ).subscribe({\n            next: () => this.notifyObserver()\n        });\n    }\n\n    /**\n     * notify observer store data has been changed\n     */\n    private notifyObserver() {\n        this.change$.next(\n            Array.from(this.uploads.values())\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadStorageConfig.html":{"url":"interfaces/UploadStorageConfig.html","title":"interface - UploadStorageConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadStorageConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        concurrentUploads\n                                \n                                \n                                            Optional\n                                        removeCompletedUploads\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        concurrentUploads\n                                    \n                                \n                                \n                                    \n                                        concurrentUploads:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeCompletedUploads\n                                    \n                                \n                                \n                                    \n                                        removeCompletedUploads:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    not implemented yet \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { buffer, debounceTime, tap } from \"rxjs/operators\";\nimport { UploadQueue, QueueState } from \"./upload.queue\";\nimport { take } from \"rxjs/internal/operators/take\";\n\nexport interface UploadStorageConfig {\n    concurrentUploads?: number;\n\n    /** not implemented yet */\n    removeCompletedUploads?: boolean;\n}\n\nconst defaultStoreConfig: UploadStorageConfig = {\n    concurrentUploads: 5\n};\n\n/**\n * could renamed to upload manager\n * maybe we change this design to redux ... dont know\n */\nexport class UploadStorage {\n\n    private change$: BehaviorSubject;\n    private uploads: Map = new Map();\n    private uploadQueue: UploadQueue;\n\n    private storeConfig: UploadStorageConfig;\n\n    /**\n     * submits if an upload gets destroyed\n     */\n    private uploadDestroy$: Subject = new Subject();\n\n    public constructor(config: UploadStorageConfig = {}) {\n        this.change$     = new BehaviorSubject([]);\n        this.uploadQueue = new UploadQueue();\n\n        this.storeConfig = {...defaultStoreConfig, ...config};\n        this.uploadQueue.concurrent = this.storeConfig.concurrentUploads;\n\n        this.registerUploadDestroyEvent();\n    }\n\n    /**\n     * register to get notified something on store change, add and remove\n     */\n    public change(): Observable {\n        return this.change$.asObservable();\n    }\n\n    /**\n     * get queue change observable to get notified something happens on queue.\n     * this will submit if pending uploads changes or new uploads will processing\n     * not if any upload has been added\n     */\n    public get queueChange(): Observable {\n        return this.uploadQueue.change;\n    }\n\n    /**\n     * add new upload to store\n     */\n    public add(upload: UploadRequest) {\n        this.uploads.set(upload.requestId, upload);\n\n        if (!upload.isInvalid()) {\n            this.uploadQueue.register(upload);\n        }\n\n        /**\n         * register to upload destroy, this can happens on any place\n         * not only in store. And pipe to interal subject we are subscribed\n         */\n        upload.destroyed\n            .pipe(take(1))\n            .subscribe(() => this.uploadDestroy$.next(upload));\n\n        this.notifyObserver();\n    }\n\n    /**\n     * destroy upload storage\n     */\n    public destroy() {\n\n        /** destroy all uploads */\n        this.uploads.forEach(upload => (upload.destroy()));\n\n        /** destroy upload queue */\n        this.uploadQueue.destroy();\n        this.uploadQueue = null;\n\n        /** destroy change stream */\n        this.change$.complete();\n        this.change$ = null;\n\n        /** destroy upload destroy stream */\n        this.uploadDestroy$.complete();\n        this.uploadDestroy$ = null;\n\n        this.uploads = null;\n    }\n\n    /**\n     * remove upload from store\n     */\n    public remove(upload: UploadRequest | string) {\n        const id = upload instanceof UploadRequest ? upload.requestId : upload;\n        const request = this.uploads.get(id);\n        request.destroy();\n    }\n\n    /**\n     * remove all uploads which has been invalid\n     * canceled or upload has been completed even it is has an error\n     */\n    public purge() {\n        this.uploads.forEach((upload) => {\n            if (upload.isCompleted() || upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n    }\n\n    /**\n     * starts all queued uploads\n     */\n    public startAll() {\n        this.uploads.forEach((upload) => {\n            if (upload.isIdle()) {\n                upload.start();\n            }\n        });\n    }\n\n    /**\n     * stops all active uploads\n     */\n    public stopAll() {\n        this.uploads.forEach(upload => (upload.cancel(), upload.destroy()));\n    }\n\n    /**\n     * remove invalidated uploads\n     */\n    public removeInvalid() {\n        this.uploads.forEach((upload) => {\n            if (upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n        this.notifyObserver();\n    }\n\n    /**\n     * registers to uploads destroy event, since multiple uploads\n     * can destroyed in short amount of time we buffer them at least for 10ms.\n     * and then remove them from list and notify observer\n     */\n    private registerUploadDestroyEvent() {\n        this.uploadDestroy$.pipe(\n            tap((request: UploadRequest) => this.uploads.delete(request.requestId)),\n            buffer(this.uploadDestroy$.pipe(debounceTime(10))),\n        ).subscribe({\n            next: () => this.notifyObserver()\n        });\n    }\n\n    /**\n     * notify observer store data has been changed\n     */\n    private notifyObserver() {\n        this.change$.next(\n            Array.from(this.uploads.values())\n        );\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadStoreConfig.html":{"url":"interfaces/UploadStoreConfig.html","title":"interface - UploadStoreConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadStoreConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        concurrentUploads\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        concurrentUploads\n                                    \n                                \n                                \n                                    \n                                        concurrentUploads:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    max count of uploads at once, set to -1 for no limit\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadViewComponent.html":{"url":"components/UploadViewComponent.html","title":"component - UploadViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/libs/ui/src/upload-view.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./upload-view.scss\n            \n\n\n\n            \n                templateUrl\n                upload-view.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                stopAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                storage\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    storage\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:49\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:19\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:31\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:96\n                \n            \n\n\n            \n                \n                    purge uploads, invalid, completed, canceled will be removed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stopAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stopAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:91\n                \n            \n\n\n            \n                \n                    stop all uploads \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:86\n                \n            \n\n\n            \n                \n                    start upload for all files \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UploadRequest[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:43\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n\n                \n                    \n                        getstorage()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:39\n                                \n                            \n\n                \n                    \n                        setstorage(storage)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:34\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            storage\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, TemplateRef, Input, OnInit, OnDestroy } from \"@angular/core\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { UploadRequest, UploadStorage } from \"../../upload\";\nimport { FileUploadItemContext } from \"./upload-item.component\";\n\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./upload-view.scss\"],\n    templateUrl: \"upload-view.html\",\n})\nexport class UploadViewComponent implements OnInit, OnDestroy {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    @Input()\n    public url: string;\n\n    @Input()\n    public useFormData = true;\n\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    @Input()\n    public set storage(storage: UploadStorage) {\n        this.uploadStorage = storage;\n        this.uploadStorageSet = true;\n    }\n\n    public get storage(): UploadStorage {\n        return this.uploadStorage;\n    }\n\n    public uploads: UploadRequest[] = [];\n\n    private destroyed$: Subject;\n\n    private uploadStorage: UploadStorage;\n\n    private uploadStorageSet = false;\n\n    public constructor() {\n        this.destroyed$ = new Subject();\n    }\n\n    public ngOnInit() {\n\n        if (!this.uploadStorage) {\n            this.uploadStorage = new UploadStorage();\n        }\n\n        this.registerStoreEvents();\n    }\n\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n\n        /** we handle our own storage so destroy this one */\n        if (!this.uploadStorageSet) {\n            this.uploadStorage.destroy();\n            this.uploadStorage = null;\n        }\n    }\n\n    /**\n     * register events for store changes\n     */\n    private registerStoreEvents() {\n        this.uploadStorage.change()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe({\n                next: (uploads) => this.uploads = uploads\n            });\n    }\n\n    /** start upload for all files */\n    public uploadAll() {\n        this.uploadStorage.startAll();\n    }\n\n    /** stop all uploads */\n    public stopAll() {\n        this.uploadStorage.stopAll();\n    }\n\n    /** purge uploads, invalid, completed, canceled will be removed */\n    public cleanAll() {\n        this.uploadStorage.purge();\n    }\n}\n\n    \n\n    \n        \n    upload all\n    remove all\n    Clean Uploads\n\n\n\n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n        \n    \n\n\n\n    \n\n    \n                \n                    ./upload-view.scss\n                \n                $ngx-fileupload-icons--font-path: '../../../assets/fonts' !default;\n\n@import '../../../assets//scss/variables';\n@import '../../../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n        padding: 1rem 0;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    upload all    remove all    Clean Uploads                                    Drag/Drop files here or click                                    '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'FileBrowserDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/data/api/index.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            Upload\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadData\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadStoreConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.model.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/file-browser.ts\n            \n            directive\n            FileBrowserDirective\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n            \n            component\n            UploadItemComponent\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-view.ts\n            \n            component\n            UploadViewComponent\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.control.ts\n            \n            class\n            UploadControl\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n            \n            class\n            UploadQueue\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n            \n            interface\n            QueueState\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.request.ts\n            \n            class\n            UploadRequest\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.request.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            class\n            UploadStorage\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            interface\n            UploadStorageConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            variable\n            defaultStoreConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/factory.ts\n            \n            injectable\n            FileUploadFactory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/file-size.pipe.ts\n            \n            pipe\n            FileSizePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/state-to-string.pipe.ts\n            \n            pipe\n            StateToStringPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/public-api.ts\n            \n            variable\n            UploadApi\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.11\n        \n            @angular/cdk : ^8.2.3\n        \n            @angular/common : 8.2.11\n        \n            @angular/compiler : 8.2.11\n        \n            @angular/core : 8.2.11\n        \n            @angular/forms : 8.2.11\n        \n            @angular/platform-browser : 8.2.11\n        \n            @angular/platform-browser-dynamic : 8.2.11\n        \n            @angular/router : 8.2.11\n        \n            highlight.js : 9.15.10\n        \n            igniteui-angular : 8.2.3\n        \n            ngx-customscrollbar : ^2.0.1\n        \n            ngx-highlightjs : 3.0.3\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            web-animations-js : ^2.3.2\n        \n            zone.js : ^0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 IDLE\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileBrowserDirective\n\nFileBrowserDirective\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileBrowserDirective->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nStateToStringPipe\n\nStateToStringPipe\n\nNgxFileUploadModule -->\n\nStateToStringPipe->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileBrowserDirective \n\nFileBrowserDirective \n\nFileBrowserDirective  -->\n\nNgxFileUploadModule->FileBrowserDirective \n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nStateToStringPipe \n\nStateToStringPipe \n\nStateToStringPipe  -->\n\nNgxFileUploadModule->StateToStringPipe \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultStoreConfig   (lib/.../upload.storage.ts)\n                        \n                        \n                            UploadApi   (lib/.../public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultStoreConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UploadStorageConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    concurrentUploads: 5\n}\n                        \n                    \n\n\n            \n        \n\n    lib/public-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UploadApi\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : IUploadApi\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
