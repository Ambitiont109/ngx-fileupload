var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.17,1,2.126]],["body/classes/AndValidator.html",[0,0.193,1,3.165,2,1.433,3,0.272,4,0.272,5,0.41,6,0.156,7,3.103,8,4.059,9,3.388,10,0.313,11,1.384,12,4.194,13,2.131,14,1.187,15,1.444,16,3.08,17,2.448,18,3.741,19,3.547,20,3.547,21,0.372,22,0.03,23,2.903,24,4.98,25,1.174,26,3.103,27,3.187,28,3.697,29,1.404,30,0.846,31,1.198,32,0.817,33,1.879,34,1.174,35,2.712,36,3.103,37,1.098,38,3.103,39,2.712,40,2.712,41,1.975,42,1.737,43,3.103,44,2.712,45,1.433,46,0.026,47,3.103,48,0.525,49,2.712,50,3.697,51,0.272,52,1.936,53,4.059,54,5.391,55,1.679,56,2.712,57,3.103,58,3.103,59,0.98,60,0.496,61,0.021,62,0.016]],["title/directives/FileBrowserDirective.html",[63,1.75,64,1.604]],["body/directives/FileBrowserDirective.html",[0,0.122,3,0.171,4,0.171,5,0.38,6,0.195,10,0.198,15,1.343,17,2.47,21,0.341,22,0.03,25,1.156,29,0.858,30,0.689,31,0.733,32,0.313,34,0.675,37,0.529,41,1.746,42,1.507,46,0.01,48,0.569,51,0.171,52,1.674,55,2.117,59,0.927,60,0.313,61,0.015,62,0.01,63,2.69,64,1.726,65,1.71,66,5.086,67,1.957,68,1.151,69,1.507,70,4.995,71,5.439,72,1.466,73,2.746,74,3.522,75,0.964,76,1.378,77,2.288,78,3.846,79,2.565,80,3.077,81,3.522,82,2.746,83,3.522,84,2.935,85,2.935,86,3.1,87,3.497,88,1.726,89,1.079,90,2.332,91,4.662,92,4.196,93,3.05,94,2.332,95,2.935,96,2.935,97,3.497,98,3.497,99,2.269,100,2.511,101,2.332,102,2.332,103,3.419,104,1.439,105,4.995,106,2.565,107,1.134,108,3.497,109,2.071,110,2.332,111,2.332,112,1.201,113,2.565,114,1.164,115,1.954,116,2.935,117,3.497,118,2.565,119,2.332,120,3.419,121,2.332,122,2.565,123,3.522,124,2.779,125,1.957,126,2.288,127,2.332,128,2.565,129,3.497,130,2.067,131,2.332,132,4.662,133,2.332,134,2.756,135,3.497,136,2.332,137,2.332,138,2.332,139,3.05,140,1.71,141,3.743,142,2.565,143,0.977,144,1.295,145,0.529,146,1.71,147,0.667,148,2.332,149,2.332,150,2.332,151,2.332,152,2.332,153,3.497,154,1.601,155,0.977,156,2.332,157,1.151,158,1.466,159,1.627,160,1.079,161,4.196,162,3.497,163,2.332,164,3.497,165,2.332,166,2.332,167,2.332,168,1.526,169,1.526,170,2.332,171,2.332,172,2.332,173,3.05,174,3.419,175,2.332,176,2.332,177,3.497,178,3.913,179,2.332,180,3.497,181,1.71,182,2.332,183,2.332,184,2.332,185,2.332,186,2.332,187,2.332,188,2.332,189,2.332,190,2.332,191,2.332,192,2.332,193,2.067,194,2.332,195,3.497,196,2.332,197,2.332,198,2.332,199,2.332,200,2.332,201,3.497,202,2.332,203,3.497,204,2.565,205,2.332,206,1.526,207,1.957,208,2.332,209,1.201,210,2.332,211,2.332,212,1.059,213,2.332,214,2.332,215,2.332,216,2.332,217,1.71,218,0.904,219,2.332,220,2.332]],["title/pipes/FileSizePipe.html",[221,1.003,222,1.921]],["body/pipes/FileSizePipe.html",[0,0.233,3,0.329,4,0.329,5,0.28,6,0.176,14,1.098,21,0.28,22,0.03,25,0.863,29,1.098,30,0.871,31,0.937,32,0.6,46,0.02,48,0.485,51,0.329,60,0.6,61,0.024,62,0.02,72,1.876,76,2.645,107,1.238,143,1.876,154,1.28,221,1.684,222,3.226,223,3.281,224,4.58,225,3.755,226,4.002,227,3.281,228,5.457,229,1.96,230,4.474,231,2.287,232,4.58,233,4.474,234,3.755,235,4.474,236,4.474,237,4.474,238,5.144,239,4.474,240,4.474,241,5.887,242,1.016,243,5.457,244,4.474,245,4.474,246,4.474]],["title/injectables/FileUploadFactory.html",[93,2.126,247,2.126]],["body/injectables/FileUploadFactory.html",[0,0.218,3,0.306,4,0.306,5,0.386,6,0.192,10,0.353,14,1.282,15,1.463,21,0.327,22,0.03,25,1.101,29,1.282,30,0.773,31,1.094,32,0.701,46,0.018,48,0.668,51,0.306,52,1.497,60,0.701,61,0.023,62,0.018,89,1.612,93,3.418,109,2.952,143,1.748,147,1.632,154,1.193,160,1.761,247,3.418,248,4.17,249,3.499,250,5.98,251,5.224,252,4.17,253,4.608,254,4.17,255,4.17,256,5.224,257,4.386,258,3.535,259,4.17,260,2.728,261,1.287,262,2.465,263,4.17,264,4.17,265,4.17,266,4.17,267,4.384,268,4.17,269,4.17]],["title/interfaces/FileUploadItemContext.html",[270,0.204,271,1.921]],["body/interfaces/FileUploadItemContext.html",[0,0.163,3,0.23,4,0.23,5,0.27,6,0.1,10,0.265,11,1.235,15,1.412,21,0.27,22,0.03,37,0.709,46,0.014,48,0.645,51,0.317,59,0.828,60,0.419,61,0.019,62,0.014,72,1.309,73,2.825,75,1.113,77,2.043,86,1.846,89,0.964,104,1.788,112,1.416,120,4.109,124,1.961,126,2.043,140,2.29,141,3.237,142,3.629,143,1.309,144,1.647,145,0.709,147,1.416,154,1.235,155,1.309,157,2.442,158,1.309,159,1.674,160,1.647,168,2.043,173,2.043,174,2.29,181,2.29,206,2.043,209,1.235,212,1.418,221,1.332,242,0.709,261,1.332,262,1.846,270,0.196,271,2.925,272,0.964,273,2.043,274,2.29,275,4.702,276,3.156,277,1.777,278,2.62,279,4.109,280,3.623,281,1.541,282,2.131,283,1.309,284,2.043,285,2.62,286,4.152,287,2.043,288,3.237,289,2.825,290,2.29,291,2.62,292,2.29,293,2.62,294,1.541,295,0.893,296,2.62,297,3.792,298,3.623,299,2.62,300,4.152,301,3.623,302,2.62,303,2.825,304,2.29,305,1.039,306,2.043,307,2.62,308,2.62,309,2.62,310,2.29,311,2.62,312,2.62,313,2.62,314,1.674,315,2.62,316,2.62,317,2.62,318,2.62,319,2.62,320,0.654,321,2.62,322,2.62,323,2.62,324,2.043,325,2.29,326,2.29,327,2.62,328,2.62,329,2.62,330,2.29,331,2.62,332,3.623,333,1.541,334,2.62,335,2.62,336,1.846,337,0.828,338,1.541,339,2.62,340,2.62,341,2.62,342,2.62,343,1.541,344,2.29,345,2.62,346,2.62,347,2.62,348,2.62,349,2.62,350,1.309,351,1.211,352,2.62,353,2.62,354,2.62,355,2.62,356,2.62,357,2.62,358,2.62]],["title/classes/GroupedValidator.html",[0,0.17,9,1.75]],["body/classes/GroupedValidator.html",[0,0.244,2,1.362,3,0.258,4,0.258,5,0.402,6,0.197,9,2.518,10,0.298,11,1.338,12,4.401,13,2.303,14,1.148,15,1.456,16,2.831,17,2.545,18,3.926,19,3.429,20,4.11,21,0.366,22,0.03,23,3.351,25,1.158,27,2.764,29,1.376,30,0.829,31,1.174,32,0.805,33,1.801,34,1.081,35,2.576,37,1.193,39,3.429,40,3.429,41,2.135,42,2.012,44,3.429,45,2.038,46,0.023,48,0.381,51,0.258,56,3.854,60,0.627,61,0.021,62,0.015,72,1.96,89,1.443,134,2.764,310,2.576,359,2.947,360,3.512,361,4.675,362,2.947,363,3.512,364,3.512,365,3.512,366,3.512,367,2.947,368,3.512,369,3.512,370,3.512,371,3.512,372,2.576,373,3.512]],["title/interfaces/IDataNode.html",[270,0.204,374,2.383]],["body/interfaces/IDataNode.html",[3,0.369,4,0.369,5,0.315,6,0.188,22,0.029,25,0.969,45,1.948,46,0.022,51,0.455,61,0.026,62,0.022,75,0.89,107,1.327,270,0.315,272,1.551,374,4.288,375,4.217,376,4.217,377,3.457,378,5.025]],["title/modules/NgxFileUploadModule.html",[379,2.383,380,2.126]],["body/modules/NgxFileUploadModule.html",[0,0.206,3,0.291,4,0.291,5,0.317,6,0.127,22,0.03,46,0.017,48,0.673,51,0.291,61,0.022,62,0.017,64,3.243,143,1.658,222,3.885,260,2.587,294,3.243,379,2.9,380,4.397,381,2.9,382,2.587,383,2.587,384,4.672,385,3.319,386,3.319,387,4.672,388,3.319,389,3.319,390,3.319,391,3.885,392,3.539,393,4.239,394,1.658,395,3.319,396,3.954,397,3.954,398,5.051,399,5.051,400,3.319,401,5.051,402,3.954,403,3.954,404,3.954,405,3.954,406,3.954,407,3.954]],["title/classes/OrValidator.html",[0,0.17,408,2.126]],["body/classes/OrValidator.html",[0,0.194,2,1.444,3,0.274,4,0.274,5,0.41,6,0.156,8,4.08,9,3.394,10,0.316,11,1.391,12,4.206,13,2.136,14,1.193,15,1.446,16,3.089,17,2.457,18,3.752,19,3.565,20,3.565,21,0.373,22,0.03,23,2.914,24,4.992,25,1.177,26,3.127,27,3.199,29,1.408,30,0.848,31,1.201,32,0.819,33,1.883,34,1.199,35,2.732,36,3.127,37,1.103,38,3.127,39,2.732,40,2.732,41,1.98,42,1.745,43,3.127,44,2.732,45,1.444,46,0.026,47,3.127,48,0.527,49,2.732,51,0.274,52,1.745,53,4.541,56,2.732,57,3.127,58,3.127,60,0.5,61,0.021,62,0.016,367,3.127,408,3.181,409,3.127,410,3.725,411,2.202]],["title/interfaces/QueueState.html",[270,0.204,412,1.75]],["body/interfaces/QueueState.html",[0,0.14,3,0.197,4,0.197,5,0.168,6,0.086,10,0.227,11,1.108,15,1.2,21,0.243,22,0.03,32,0.359,34,0.962,46,0.012,48,0.541,51,0.285,52,1.79,55,2.066,59,0.71,60,0.669,61,0.017,62,0.012,69,1.899,75,1.126,89,0.827,99,1.216,112,0.766,114,1.892,130,1.583,145,0.608,147,1.818,154,1.78,155,1.624,158,1.123,159,1.038,160,0.827,193,1.583,209,1.513,212,1.759,217,1.964,218,1.038,221,0.827,229,0.891,242,1.033,270,0.168,272,0.827,281,1.322,282,1.322,283,1.123,295,0.766,303,1.752,305,1.76,306,1.752,320,1.044,337,1.027,338,1.912,350,1.624,351,1.502,411,2.69,412,2.086,413,1.964,414,1.835,415,3.607,416,1.583,417,1.634,418,2.248,419,2.45,420,1.752,421,2.534,422,1.759,423,1.752,424,1.752,425,1.752,426,1.443,427,1.752,428,2.248,429,2.248,430,2.248,431,2.311,432,0.962,433,1.752,434,2.248,435,2.248,436,1.322,437,3.25,438,2.248,439,2.248,440,2.248,441,2.248,442,3.25,443,2.248,444,2.248,445,2.248,446,2.248,447,1.322,448,2.248,449,3.818,450,3.818,451,4.184,452,1.964,453,1.632,454,1.752,455,2.248,456,2.248,457,1.123,458,1.322,459,1.907,460,2.248,461,2.248,462,1.964,463,2.248,464,2.248,465,2.248,466,2.248,467,1.583,468,2.248,469,2.248,470,2.977,471,2.248,472,2.248,473,1.583,474,2.248,475,1.624,476,3.25,477,2.248,478,2.248,479,2.248,480,2.248,481,1.123,482,1.502,483,1.195,484,2.248,485,2.248,486,2.248,487,2.248,488,2.248,489,2.248,490,2.248,491,2.248,492,2.248,493,2.248,494,2.29,495,2.248,496,2.947,497,1.583,498,2.248,499,1.583,500,2.248,501,2.248,502,3.818,503,2.248,504,1.123,505,2.248,506,1.443,507,2.248,508,2.248,509,2.248,510,2.248,511,2.248,512,0.891,513,2.248,514,2.248,515,2.248,516,2.248,517,2.248,518,2.248,519,2.248,520,2.248,521,2.248,522,2.248,523,2.248,524,2.248,525,2.248,526,1.752,527,2.248]],["title/pipes/StateToStringPipe.html",[221,1.003,391,1.921]],["body/pipes/StateToStringPipe.html",[0,0.233,3,0.328,4,0.328,5,0.28,6,0.175,14,1.096,21,0.28,22,0.03,25,0.862,29,1.096,30,0.87,31,0.936,32,0.599,46,0.02,48,0.591,51,0.328,60,0.868,61,0.024,62,0.02,72,1.872,76,2.64,99,2.028,107,1.237,143,1.872,221,1.682,223,3.275,227,3.275,232,4.574,281,2.204,295,1.753,320,0.936,337,1.184,391,3.222,414,1.486,453,1.378,467,2.64,494,2.64,496,3.777,497,2.64,499,2.64,504,1.872,506,2.405,528,4.574,529,3.748,530,5.451,531,5.451,532,4.466,533,2.113,534,3.275,535,1.604,536,2.922,537,1.732]],["title/interfaces/Upload.html",[75,0.576,270,0.204]],["body/interfaces/Upload.html",[3,0.211,4,0.211,5,0.378,6,0.182,10,0.243,11,1.165,13,1.462,14,1,21,0.255,22,0.03,25,1.048,30,0.602,32,0.83,33,1.257,34,0.554,37,1.281,45,1.834,46,0.013,48,0.513,51,0.415,59,1.496,60,0.547,61,0.018,62,0.018,69,1.032,75,1.166,104,1.742,107,0.924,112,1.354,114,1.809,115,1.204,144,1.257,145,0.652,209,1.615,218,1.579,229,1.713,231,1.983,242,0.652,261,0.887,270,0.34,272,0.887,277,1.713,295,1.165,305,1.356,314,1.834,320,0.991,337,0.762,343,2.335,394,2.158,414,0.956,417,2.026,431,1.204,432,1.462,436,1.418,453,1.742,457,1.204,458,1.418,459,1.707,475,1.707,481,1.707,482,1.579,483,1.46,504,1.204,512,1.974,533,2.188,535,1.699,537,1.579,538,1.418,539,2.486,540,2.468,541,2.468,542,2.338,543,2.873,544,2.873,545,2.541,546,2.01,547,2.01,548,2.149,549,2.873,550,2.01,551,2.873,552,2.01,553,2.01,554,2.338,555,2.873,556,2.408,557,1.707,558,1.699,559,1.699,560,1.547,561,1.305,562,1.114,563,1.418,564,1.579,565,2.01,566,1.699,567,1.699,568,1.699,569,1.699,570,1.699,571,1.699,572,1.699,573,1.699,574,1.699,575,1.699,576,1.305,577,1.305,578,1.305,579,2.408,580,1.418,581,1.699,582,1.699,583,1.699,584,1.305]],["title/classes/UploadControl.html",[0,0.17,276,1.921]],["body/classes/UploadControl.html",[0,0.17,2,1.26,3,0.239,4,0.239,5,0.204,6,0.189,10,0.275,14,1.089,15,1.466,17,1.476,21,0.356,22,0.03,25,1.096,29,1.395,30,0.841,31,1.191,32,0.729,37,1.232,46,0.014,48,0.482,51,0.239,61,0.02,62,0.014,68,1.604,74,3.725,75,1.083,86,1.922,89,1.37,124,2.776,126,4.227,145,0.738,147,1.554,154,1.27,155,1.86,173,2.127,242,0.738,276,2.624,288,3.306,289,2.904,297,2.904,320,0.93,326,3.255,333,1.604,337,0.862,338,2.494,351,1.26,362,4.557,416,1.922,452,2.384,453,1.811,483,1.37,539,2.383,542,2.665,585,2.728,586,4.438,587,4.438,588,4.302,589,2.728,590,4.438,591,4.557,592,3.251,593,3.251,594,4.438,595,3.251,596,4.438,597,3.251,598,4.438,599,3.255,600,4.438,601,4.438,602,2.624,603,3.255,604,4.438,605,4.438,606,4.438,607,3.251,608,4.438,609,3.251,610,3.251,611,2.728,612,3.251,613,5.053,614,3.251,615,3.251,616,3.251,617,3.251,618,2.384,619,2.728,620,3.251,621,2.127,622,3.251,623,3.251,624,3.251,625,3.251]],["title/interfaces/UploadData.html",[270,0.204,277,1.082]],["body/interfaces/UploadData.html",[3,0.208,4,0.208,5,0.339,6,0.091,10,0.24,11,1.154,13,1.017,21,0.387,22,0.03,30,0.831,32,0.754,33,1.245,34,0.547,37,1.066,45,2.241,46,0.012,48,0.509,51,0.413,59,1.49,60,0.38,61,0.018,62,0.021,69,1.017,75,1.17,104,1.245,107,1.275,112,1.154,114,1.924,115,1.188,144,0.874,145,0.643,209,1.154,218,1.098,229,2.029,231,2.477,242,0.643,261,0.874,270,0.339,272,0.874,277,1.563,295,1.464,305,1.342,314,1.82,320,0.845,337,0.751,343,2.317,394,1.69,414,0.943,417,1.686,431,1.69,432,1.017,436,1.398,453,1.579,457,1.188,458,1.99,459,1.188,475,1.188,481,2.355,482,1.82,483,1.449,504,1.188,512,2.074,533,2.29,535,2.075,537,1.82,538,1.398,539,1.968,540,2.455,541,2.455,542,1.287,545,1.99,546,1.398,547,1.398,548,2.455,550,1.398,552,1.398,553,1.398,554,2.132,556,1.675,557,1.188,558,1.675,559,1.675,560,1.526,561,1.287,562,1.098,563,1.398,564,1.983,565,2.525,566,2.384,567,2.384,568,2.384,569,2.384,570,2.384,571,2.384,572,2.384,573,2.384,574,2.384,575,2.384,576,2.323,577,1.832,578,2.323,579,2.384,580,1.398,581,1.675,582,1.675,583,1.675,584,1.287]],["title/components/UploadItemComponent.html",[157,1.604,294,1.604]],["body/components/UploadItemComponent.html",[0,0.089,3,0.125,4,0.125,5,0.172,6,0.182,10,0.232,11,0.784,14,0.673,15,1.364,21,0.27,22,0.03,25,1.072,29,0.673,30,0.638,31,0.574,32,0.461,37,0.78,46,0.007,48,0.564,51,0.201,59,0.452,60,0.229,61,0.012,62,0.007,63,0.918,64,0.841,65,1.25,68,0.841,72,1.149,73,2.249,75,1.14,76,1.007,77,2.823,78,1.25,79,2.009,80,1.25,84,2.299,85,2.299,86,2.327,88,1.352,89,1.061,99,1.244,100,0.918,104,1.215,112,1.234,115,1.149,116,1.43,120,3.553,123,1.43,124,1.561,125,1.43,126,1.793,128,1.25,140,1.25,141,2.249,142,2.52,143,0.714,144,1.215,145,0.387,147,0.983,154,0.784,155,1.149,157,1.943,158,0.714,159,1.062,160,1.215,168,1.115,173,1.115,174,1.25,181,1.25,206,3.402,207,2.299,209,0.784,212,0.774,221,1.061,226,2.009,227,1.25,229,0.567,231,2.031,242,1.398,261,0.846,262,1.007,270,0.107,271,2.032,273,3.693,274,1.25,275,2.299,276,1.62,277,0.912,278,1.43,279,3.694,280,2.884,281,0.841,282,1.352,283,0.714,284,1.115,285,1.43,286,3.867,287,2.823,288,3.296,289,3.902,290,2.009,291,2.299,292,2.009,293,2.884,294,1.943,295,0.983,296,2.299,297,3.832,298,3.304,299,2.884,300,3.867,301,2.884,302,1.43,303,1.793,304,1.25,305,1.144,306,1.115,307,1.43,308,1.43,309,1.43,310,1.25,311,2.884,312,2.884,313,2.884,314,1.526,315,1.43,316,1.43,317,1.43,318,1.43,319,1.43,320,0.72,321,2.884,322,1.43,323,1.43,324,2.249,325,2.887,326,2.52,327,2.884,328,1.43,329,1.43,330,1.25,331,1.43,332,2.884,333,0.841,334,1.43,335,2.299,336,1.62,337,0.726,338,1.352,339,2.299,340,2.299,341,1.43,342,1.43,343,0.841,344,1.25,345,1.43,346,1.43,347,1.43,348,1.43,349,1.43,350,0.714,351,0.661,352,1.43,353,1.43,354,1.43,355,2.299,356,2.299,357,2.299,358,3.304,377,1.62,383,1.115,392,0.918,422,2.093,462,2.52,481,1.149,482,0.661,483,1.061,533,1.062,535,0.984,539,0.714,562,0.661,563,0.841,618,2.009,626,2.009,627,1.43,628,1.43,629,1.43,630,2.74,631,2.74,632,2.74,633,2.74,634,1.704,635,1.704,636,1.704,637,1.704,638,1.704,639,1.704,640,1.704,641,1.704,642,3.937,643,2.74,644,2.74,645,2.74,646,1.43,647,4.065,648,1.43,649,1.43,650,1.43,651,1.43,652,1.43,653,3.867,654,3.621,655,3.304,656,4.577,657,2.299,658,1.43,659,4.065,660,3.436,661,4.228,662,4.478,663,2.884,664,1.43,665,3.867,666,3.304,667,3.436,668,1.704,669,1.704,670,1.704,671,1.704,672,1.704,673,1.704,674,4.065,675,3.937,676,1.704,677,1.704,678,1.704,679,3.937,680,2.74,681,3.38,682,1.704,683,2.576,684,1.704,685,1.704,686,1.704,687,2.74,688,1.704,689,1.704,690,1.704,691,2.299,692,1.704,693,1.704,694,1.704,695,1.704,696,1.704,697,1.704,698,2.74,699,1.43,700,1.43,701,1.704,702,1.704,703,1.704,704,4.065,705,1.704,706,2.74,707,2.74,708,2.884,709,3.304,710,2.74,711,2.299,712,2.884,713,2.74,714,2.884,715,1.704,716,2.299,717,2.884,718,3.621,719,3.436,720,1.43,721,1.704,722,2.74,723,2.299,724,2.74,725,2.884,726,2.74,727,1.704,728,1.25,729,1.704,730,1.704,731,2.74,732,1.704,733,1.704,734,2.299,735,1.704,736,1.704,737,1.704,738,1.704,739,2.299,740,1.43,741,1.704,742,1.43,743,1.43,744,1.43,745,1.704,746,1.704,747,2.299,748,1.704,749,1.704,750,2.299,751,2.299,752,1.704,753,1.704,754,1.704,755,1.115,756,1.704,757,2.299,758,3.304,759,1.43,760,1.43,761,1.43]],["title/classes/UploadModel.html",[0,0.17,261,1.003]],["body/classes/UploadModel.html",[0,0.118,2,0.874,3,0.166,4,0.166,5,0.396,6,0.206,10,0.191,14,0.837,15,1.464,21,0.324,22,0.03,25,1.231,29,1.32,30,0.819,31,1.126,32,0.849,33,1.598,34,0.884,37,1.175,45,0.874,46,0.01,48,0.37,51,0.166,52,0.809,55,1.867,59,0.904,60,0.835,61,0.015,62,0.01,68,1.113,75,1.024,88,1.683,89,0.696,95,2.861,96,2.861,104,1.598,107,1.257,112,1.702,154,1.584,226,3.61,229,1.843,231,2.064,234,2.861,238,2.861,242,0.512,261,1.052,267,1.892,277,1.368,295,1.409,314,1.777,320,0.96,414,1.135,481,2.422,506,1.214,512,1.723,533,2.24,535,1.859,536,1.475,540,2.082,541,2.082,548,2.624,554,1.867,564,2.008,576,2.082,577,1.548,578,2.082,683,2.69,762,1.892,763,2.5,764,4.584,765,4.923,766,4.112,767,4.112,768,3.409,769,2.254,770,3.015,771,2.254,772,2.254,773,2.254,774,3.409,775,2.254,776,2.254,777,2.254,778,2.254,779,2.254,780,2.254,781,3.409,782,2.254,783,2.254,784,2.254,785,2.254,786,2.254,787,2.254,788,2.254,789,2.254,790,2.254,791,2.254,792,1.892,793,2.254,794,2.254,795,2.254,796,1.892,797,2.254,798,1.892,799,2.254,800,2.254,801,2.254,802,2.254,803,2.254,804,2.254,805,2.254,806,2.254,807,2.254,808,2.254,809,2.254,810,2.254,811,2.254,812,2.254,813,2.254,814,2.254,815,2.254,816,2.254,817,2.254,818,2.254,819,2.254,820,2.254,821,2.254,822,2.5,823,2.254,824,2.254,825,2.254,826,2.254,827,4.112,828,2.254,829,4.112,830,2.5,831,2.254,832,3.409,833,1.653,834,3.409,835,2.254,836,3.409,837,2.254,838,3.409,839,3.409,840,3.409,841,2.254,842,2.254,843,2.254,844,2.254,845,2.254,846,2.254,847,2.254,848,2.254,849,1.653,850,2.254,851,2.254]],["title/interfaces/UploadOptions.html",[258,1.921,270,0.204]],["body/interfaces/UploadOptions.html",[0,0.1,3,0.141,4,0.141,5,0.339,6,0.062,10,0.163,11,0.862,13,0.689,15,1.41,16,1.623,21,0.264,22,0.03,23,1.034,30,0.55,31,0.631,32,0.404,34,1.043,41,1.238,42,1.082,46,0.02,48,0.496,51,0.221,52,1.823,55,2.205,59,1.346,60,0.812,61,0.013,62,0.008,68,0.948,72,0.805,75,1.106,89,0.593,103,2.727,104,1.3,106,3.088,107,1.038,112,1.064,113,1.408,114,1.003,115,1.918,118,1.408,124,1.368,134,1.781,139,3.322,144,1.498,145,0.436,147,0.862,154,1.717,158,0.805,159,1.442,160,1.3,169,1.256,193,1.781,209,0.862,218,0.744,221,0.593,242,0.436,253,2.21,257,3.723,258,2.49,260,1.256,261,0.93,262,1.135,270,0.12,272,0.593,277,1.003,281,0.948,282,0.948,283,0.805,295,0.862,314,1.168,320,0.779,324,2.755,333,0.948,336,1.781,350,0.805,351,0.744,394,1.559,411,2.198,417,1.743,419,1.623,420,1.256,422,0.872,432,0.689,447,0.948,453,0.93,454,1.971,467,1.135,475,0.805,482,1.442,483,1.3,494,1.135,496,2.198,497,1.781,499,2.49,506,1.623,512,1.75,533,1.442,534,2.21,535,0.689,536,1.256,539,1.765,540,0.872,541,0.872,542,1.368,545,1.487,546,0.948,547,0.948,548,0.872,550,0.948,552,0.948,553,0.948,554,2.387,557,0.805,561,0.872,564,1.968,576,0.872,578,0.872,588,1.408,599,2.727,602,1.135,603,2.21,621,1.256,728,1.408,763,1.408,770,1.408,822,1.408,830,2.21,833,1.408,849,1.408,852,1.408,853,4.809,854,3.013,855,3.121,856,1.612,857,2.529,858,2.529,859,3.121,860,1.612,861,2.529,862,1.612,863,3.121,864,1.612,865,1.612,866,1.612,867,1.971,868,2.529,869,2.529,870,3.121,871,1.612,872,1.612,873,1.612,874,2.529,875,4.937,876,1.612,877,1.612,878,1.612,879,1.612,880,1.612,881,3.121,882,1.612,883,2.529,884,1.612,885,2.529,886,1.612,887,4.074,888,1.612,889,2.529,890,2.529,891,2.529,892,1.612,893,1.612,894,1.612,895,1.612,896,1.612,897,4.074,898,1.612,899,1.612,900,1.612,901,1.612,902,1.612,903,2.529,904,1.612,905,1.612,906,1.612,907,1.612,908,1.612,909,1.408,910,1.612,911,1.612,912,1.612,913,2.529,914,1.612,915,1.612,916,1.612,917,1.612,918,1.612,919,1.612,920,1.612,921,1.612,922,1.612,923,2.529,924,1.612,925,1.612,926,1.612,927,1.612,928,1.612,929,1.612,930,1.612,931,1.612,932,1.612,933,2.529,934,1.612,935,1.612,936,1.612,937,2.529,938,1.612,939,1.612,940,1.612,941,1.612,942,1.612,943,3.121,944,1.612,945,1.612,946,1.612,947,1.612,948,1.612,949,1.612,950,1.612,951,1.612,952,1.612,953,2.529,954,1.612,955,1.612,956,1.612,957,1.612,958,1.612,959,1.612,960,1.612,961,1.612,962,1.612,963,1.612,964,1.612]],["title/classes/UploadQueue.html",[0,0.17,426,1.75]],["body/classes/UploadQueue.html",[0,0.133,2,0.988,3,0.187,4,0.187,5,0.16,6,0.174,10,0.216,14,0.917,15,1.351,21,0.234,22,0.03,25,1,29,0.917,30,0.552,31,0.782,32,0.653,34,0.939,37,1.003,46,0.011,48,0.528,51,0.274,52,1.748,55,2.008,59,0.675,60,0.653,61,0.016,62,0.011,69,1.861,75,1.124,88,1.843,89,1.364,99,1.157,112,0.729,114,1.863,130,1.506,145,0.578,147,1.779,154,1.764,155,1.565,158,1.068,159,0.988,160,0.786,193,1.506,209,1.601,212,2.211,217,1.868,218,0.988,221,0.786,229,1.471,242,1.003,270,0.16,281,1.257,282,1.257,283,1.068,295,0.729,303,1.667,305,1.725,306,1.667,320,1.02,337,0.99,338,1.843,350,1.565,351,1.448,411,2.613,412,1.372,413,1.868,414,1.471,415,2.893,416,1.506,417,1.587,418,2.138,419,2.381,420,1.667,421,2.443,422,1.696,423,1.667,424,1.667,425,1.667,426,2.011,427,1.667,428,2.138,429,2.138,430,2.138,431,2.271,432,0.915,433,1.667,434,2.138,435,2.138,436,1.843,437,3.134,438,2.138,439,2.138,440,2.138,441,2.138,442,3.134,443,3.134,444,2.138,445,2.138,446,2.138,447,2.403,448,2.138,449,3.71,450,3.71,451,4.086,452,1.868,453,1.6,454,1.667,455,2.138,456,2.138,457,1.068,458,1.257,459,1.853,460,2.138,461,2.138,462,1.868,463,2.138,464,2.138,465,2.138,466,2.138,467,1.506,468,2.138,469,2.138,470,2.893,471,2.138,472,2.138,473,1.506,474,2.138,475,1.565,476,3.134,477,2.138,478,2.138,479,2.138,480,2.138,481,1.068,482,1.448,483,1.152,484,2.138,485,2.138,486,2.138,487,2.138,488,2.138,489,2.138,490,2.138,491,2.138,492,2.138,493,2.138,494,2.208,495,2.138,496,2.878,497,1.506,498,2.138,499,1.506,500,2.138,501,2.138,502,3.71,503,2.138,504,1.068,505,2.138,506,1.372,507,2.138,508,2.138,509,2.138,510,2.138,511,2.138,512,0.848,513,2.138,514,2.138,515,2.138,516,2.138,517,2.138,518,2.138,519,2.138,520,2.138,521,2.138,522,2.138,523,2.138,524,2.138,525,2.138,526,1.667,527,2.138,965,3.734,966,2.547,967,2.547,968,2.547,969,2.547,970,2.547,971,2.138,972,2.547]],["title/classes/UploadRequest.html",[0,0.17,147,0.93]],["body/classes/UploadRequest.html",[0,0.083,2,0.616,3,0.117,4,0.117,5,0.335,6,0.195,10,0.135,13,0.93,14,0.636,15,1.486,16,2.241,21,0.205,22,0.03,23,0.856,25,1.161,29,1.022,30,0.726,31,0.872,32,0.789,34,0.979,37,1.152,41,1.485,42,1.357,46,0.018,48,0.452,51,0.19,52,1.69,55,2.137,59,1.346,60,0.789,61,0.011,62,0.007,68,0.784,72,1.085,75,1.109,88,1.278,89,0.799,99,0.722,100,0.856,103,1.899,104,1.284,106,2.771,107,0.744,112,1.081,113,1.165,114,0.862,115,1.744,118,1.165,124,1.176,134,1.531,139,2.144,144,1.452,145,0.361,147,1.081,154,1.65,158,0.666,159,1.613,160,1.166,169,1.04,193,1.937,209,1.191,218,1.004,221,0.49,242,0.361,253,2.771,257,3.451,258,2.46,260,1.04,261,1.166,262,0.939,270,0.1,277,0.862,281,0.784,282,0.784,283,0.666,295,0.741,314,1.271,320,0.792,324,2.144,333,0.784,336,1.531,350,0.666,351,0.616,372,1.165,394,1.744,411,1.937,417,1.602,419,1.395,420,1.04,422,0.722,432,0.571,447,1.865,453,1.377,454,2.144,467,0.939,475,1.085,482,1.271,483,1.284,494,0.939,496,1.937,497,1.531,499,2.234,506,1.395,512,1.897,533,1.824,534,1.899,535,0.571,536,1.04,539,2.057,540,1.716,541,1.716,542,1.89,545,1.617,546,1.278,547,1.278,548,1.176,550,1.278,552,1.278,553,1.278,554,2.305,557,0.666,561,0.722,564,1.824,576,1.716,578,1.488,588,1.899,599,2.771,602,0.939,603,1.899,621,1.04,728,1.165,763,1.899,770,1.165,792,1.333,796,1.333,798,1.333,822,1.165,830,1.899,833,1.165,849,1.165,852,1.165,853,4.259,855,2.75,856,1.333,857,2.173,858,2.173,859,2.75,860,1.333,861,2.173,862,1.333,863,2.75,864,1.333,865,1.333,866,1.333,867,1.694,868,2.173,869,2.173,870,3.493,871,1.333,872,1.333,873,1.333,874,2.173,875,4.721,876,2.173,877,1.333,878,1.333,879,1.333,880,1.333,881,2.75,882,1.333,883,2.173,884,2.173,885,2.173,886,3.172,887,3.745,888,1.333,889,2.173,890,2.173,891,2.173,892,1.333,893,1.333,894,1.333,895,1.333,896,2.173,897,4.118,898,1.333,899,2.173,900,3.172,901,3.172,902,3.172,903,2.173,904,1.333,905,1.333,906,1.333,907,1.333,908,1.333,909,1.165,910,1.333,911,1.333,912,1.333,913,2.173,914,1.333,915,1.333,916,1.333,917,1.333,918,2.173,919,1.333,920,1.333,921,1.333,922,1.333,923,2.173,924,1.333,925,1.333,926,1.333,927,1.333,928,1.333,929,1.333,930,1.333,931,1.333,932,1.333,933,2.173,934,1.333,935,1.333,936,1.333,937,2.173,938,1.333,939,1.333,940,1.333,941,1.333,942,1.333,943,2.75,944,1.333,945,1.333,946,1.333,947,1.333,948,1.333,949,1.333,950,1.333,951,1.333,952,1.333,953,2.173,954,1.333,955,1.333,956,1.333,957,1.333,958,1.333,959,1.333,960,1.333,961,1.333,962,1.333,963,1.333,964,1.333,971,1.333,973,1.589,974,1.589,975,1.589,976,1.589,977,1.589,978,1.589,979,1.589,980,1.589,981,1.589,982,1.589,983,1.589,984,1.589,985,1.589,986,1.589,987,1.589,988,1.589,989,1.589,990,1.589,991,1.589,992,1.589,993,1.589,994,1.589,995,1.589,996,1.589]],["title/interfaces/UploadResponse.html",[270,0.204,564,1.26]],["body/interfaces/UploadResponse.html",[3,0.236,4,0.236,5,0.355,6,0.104,10,0.273,11,1.261,13,1.155,21,0.315,22,0.03,30,0.652,32,0.725,33,1.36,34,0.621,37,1.141,45,1.948,46,0.014,48,0.545,51,0.43,59,1.433,60,0.432,61,0.019,62,0.019,69,1.155,75,1.154,104,1.36,107,1,112,1.261,114,1.799,115,2.266,144,0.993,145,0.73,209,1.261,218,1.247,229,1.799,231,2.107,242,0.73,261,0.993,270,0.355,272,0.993,277,1.467,295,1.261,305,1.467,314,1.708,320,0.923,337,0.853,343,2.175,394,1.847,414,1.071,417,1.805,431,1.348,432,1.155,436,1.588,453,1.551,457,1.348,458,1.588,459,1.348,475,1.348,481,1.847,482,2.195,483,1.36,504,1.348,512,2.029,533,2.096,535,1.805,537,1.708,538,1.588,539,2.107,540,2.001,541,2.001,542,1.461,545,2.175,546,1.588,547,1.588,548,2.001,550,1.588,552,1.588,553,1.588,554,2.656,556,1.902,557,1.348,558,1.902,559,1.902,560,1.732,561,1.461,562,1.247,563,1.588,564,1.948,565,2.175,566,1.902,567,1.902,568,1.902,569,1.902,570,1.902,571,1.902,572,1.902,573,1.902,574,1.902,575,1.902,576,1.461,577,1.461,578,1.461,579,2.605,580,1.588,581,1.902,582,1.902,583,1.902,584,1.461]],["title/classes/UploadStorage.html",[0,0.17,109,1.604]],["body/classes/UploadStorage.html",[0,0.119,2,0.885,3,0.168,4,0.168,5,0.143,6,0.189,10,0.193,14,0.845,15,1.474,17,2.363,21,0.26,22,0.03,25,1.118,29,1.017,30,0.613,31,0.868,32,0.763,34,0.89,37,1.225,46,0.01,48,0.537,51,0.253,52,1.487,60,0.462,61,0.015,62,0.01,68,1.126,69,2.224,75,1.128,82,2.251,88,1.698,89,0.704,104,0.704,107,0.94,109,1.698,114,0.759,122,2.523,124,1.036,130,2.726,144,1.423,145,0.518,147,1.627,154,1.545,155,2.468,158,0.956,159,1.334,160,1.715,204,1.673,209,1.707,212,1.881,221,0.704,229,0.759,270,0.143,283,0.956,320,0.721,333,1.126,337,0.912,338,1.698,350,1.442,351,0.885,412,1.229,414,1.145,415,2.251,416,1.349,417,1.939,419,2.231,421,1.493,422,1.563,423,1.493,424,2.251,425,1.493,426,2.484,427,2.251,431,2.074,432,0.819,433,2.71,447,2.978,459,1.442,470,2.71,473,2.034,483,1.062,512,0.759,526,1.493,537,1.334,557,1.442,562,0.885,577,1.036,584,1.563,602,2.726,755,1.493,867,2.251,997,1.493,998,2.887,999,2.887,1000,2.887,1001,2.887,1002,2.887,1003,2.887,1004,3.382,1005,3.87,1006,3.87,1007,3.382,1008,2.887,1009,3.075,1010,2.282,1011,2.887,1012,2.887,1013,2.282,1014,4.076,1015,2.282,1016,2.282,1017,2.282,1018,2.887,1019,2.887,1020,2.282,1021,2.282,1022,2.887,1023,2.282,1024,2.887,1025,2.282,1026,2.887,1027,2.282,1028,2.282,1029,3.476,1030,2.887,1031,1.915,1032,1.915,1033,1.915,1034,1.915,1035,2.251,1036,1.915,1037,1.915,1038,1.915,1039,2.887,1040,2.887,1041,1.915,1042,1.915,1043,1.915,1044,1.915,1045,1.915,1046,1.915,1047,1.915,1048,3.476,1049,1.915,1050,1.915,1051,1.915,1052,1.915,1053,1.915,1054,1.915,1055,1.915,1056,2.887,1057,3.87,1058,1.915,1059,1.915,1060,1.915,1061,1.915,1062,1.673,1063,1.915,1064,1.915,1065,1.915,1066,3.476,1067,1.915,1068,1.915,1069,1.915,1070,1.915,1071,1.915,1072,1.915,1073,1.915,1074,1.915,1075,1.915,1076,2.887,1077,1.915,1078,1.915,1079,1.915,1080,1.915,1081,1.915,1082,1.915,1083,1.915]],["title/interfaces/UploadStorageConfig.html",[270,0.204,1009,1.921]],["body/interfaces/UploadStorageConfig.html",[0,0.142,3,0.2,4,0.2,5,0.171,6,0.088,10,0.231,11,1.122,15,1.372,17,1.782,21,0.246,22,0.03,31,1.053,34,0.97,46,0.012,48,0.578,51,0.288,52,1.65,60,0.526,61,0.017,62,0.012,69,2.171,75,1.106,82,1.784,104,0.841,107,0.619,109,1.346,114,0.907,122,1.999,124,1.238,130,2.319,144,1.551,145,0.619,147,1.524,154,1.635,155,2.232,158,1.143,159,1.521,160,1.711,204,1.999,209,1.587,212,1.782,221,0.841,229,1.529,270,0.171,272,0.841,283,1.143,320,0.571,333,1.346,337,0.723,338,1.346,350,1.644,351,1.057,412,1.468,414,0.907,415,1.784,416,1.612,417,1.805,419,2.475,421,1.784,422,1.782,423,1.784,424,2.567,425,1.784,426,2.707,427,1.784,431,1.926,432,0.979,433,1.784,447,2.94,459,1.143,470,3.007,473,1.612,483,0.841,512,1.529,526,1.784,537,1.057,557,1.644,562,1.057,577,1.238,584,2.419,602,2.319,755,1.784,867,2.567,997,1.784,998,2.288,999,2.288,1000,2.288,1001,2.288,1002,2.288,1003,2.288,1004,1.999,1005,2.288,1006,2.288,1007,1.999,1008,2.288,1009,3.148,1011,2.288,1012,2.288,1014,3.905,1018,2.288,1019,2.288,1022,2.288,1024,2.288,1026,2.288,1029,3.292,1030,2.288,1031,2.288,1032,2.288,1033,3.292,1034,4.218,1035,2.567,1036,2.288,1037,2.288,1038,2.288,1039,3.292,1040,3.292,1041,2.288,1042,2.288,1043,2.288,1044,2.288,1045,2.288,1046,2.288,1047,2.288,1048,3.856,1049,2.288,1050,2.288,1051,2.288,1052,2.288,1053,2.288,1054,2.288,1055,2.288,1056,3.292,1057,4.218,1058,2.288,1059,2.288,1060,2.288,1061,2.288,1062,1.999,1063,2.288,1064,2.288,1065,2.288,1066,3.856,1067,2.288,1068,2.288,1069,2.288,1070,2.288,1071,2.288,1072,2.288,1073,2.288,1074,2.288,1075,2.288,1076,3.292,1077,2.288,1078,2.288,1079,2.288,1080,2.288,1081,2.288,1082,2.288,1083,2.288]],["title/interfaces/UploadStoreConfig.html",[270,0.204,580,1.604]],["body/interfaces/UploadStoreConfig.html",[3,0.237,4,0.237,5,0.355,6,0.104,10,0.274,11,1.264,13,1.16,21,0.202,22,0.03,30,0.653,32,0.727,33,1.364,34,0.623,37,1.143,45,1.952,46,0.014,48,0.546,51,0.43,59,1.436,60,0.433,61,0.019,62,0.019,69,1.586,75,1.155,104,1.364,107,1.003,112,1.441,114,1.802,115,1.354,144,0.997,145,0.733,209,1.264,218,1.252,229,1.949,231,2.111,242,0.733,261,0.997,270,0.355,272,0.997,277,1.471,295,1.264,305,1.676,314,1.713,320,0.926,337,0.856,343,2.181,394,1.852,414,1.075,417,1.808,431,1.354,432,1.16,436,2.181,453,1.554,457,1.354,458,1.594,459,1.354,475,1.354,481,1.852,482,1.713,483,1.364,504,1.354,512,1.949,533,2.099,535,1.808,537,1.713,538,1.594,539,2.111,540,2.007,541,2.007,542,1.467,545,2.181,546,1.594,547,1.594,548,2.007,550,1.594,552,1.594,553,1.594,554,2.287,556,1.909,557,1.354,558,1.909,559,1.909,560,1.739,561,1.467,562,1.252,563,1.594,564,1.713,565,2.181,566,1.909,567,1.909,568,1.909,569,1.909,570,1.909,571,1.909,572,1.909,573,1.909,574,1.909,575,1.909,576,1.467,577,1.467,578,1.467,579,2.612,580,2.181,581,2.612,582,2.612,583,2.612,584,2.459]],["title/interfaces/UploadValidation.html",[270,0.204,565,1.604]],["body/interfaces/UploadValidation.html",[3,0.238,4,0.238,5,0.356,6,0.104,10,0.275,11,1.268,13,1.164,21,0.203,22,0.03,30,0.655,32,0.728,33,1.674,34,0.974,37,1.145,45,1.956,46,0.014,48,0.548,51,0.431,59,1.438,60,0.435,61,0.019,62,0.019,69,1.164,75,1.155,104,1.367,107,1.005,112,1.268,114,1.805,115,1.359,144,1.001,145,0.736,209,1.268,218,1.257,229,1.805,231,2.115,242,0.736,261,1.001,270,0.356,272,1.001,277,1.474,295,1.268,305,1.474,314,1.718,320,0.928,337,0.86,343,2.187,394,1.857,414,1.079,417,1.812,431,1.359,432,1.164,436,1.6,453,1.557,457,1.359,458,1.6,459,1.359,475,1.359,481,1.857,482,1.718,483,1.367,504,1.359,512,1.951,533,2.103,535,1.812,537,1.718,538,1.6,539,2.115,540,2.012,541,2.012,542,1.473,545,2.187,546,1.6,547,1.6,548,2.012,550,1.6,552,1.6,553,1.6,554,2.662,556,1.917,557,1.359,558,1.917,559,1.917,560,1.746,561,1.473,562,1.257,563,1.6,564,1.718,565,2.491,566,1.917,567,1.917,568,1.917,569,1.917,570,1.917,571,1.917,572,1.917,573,1.917,574,1.917,575,1.917,576,1.473,577,1.473,578,1.473,579,2.619,580,1.6,581,1.917,582,1.917,583,1.917,584,1.473]],["title/components/UploadViewComponent.html",[157,1.604,392,1.75]],["body/components/UploadViewComponent.html",[0,0.111,3,0.292,4,0.157,5,0.318,6,0.194,10,0.181,11,0.936,14,0.803,15,1.444,17,0.969,18,2.14,21,0.279,22,0.03,25,1.148,29,0.524,30,0.659,31,0.447,32,0.598,34,0.412,37,1.011,41,1.687,42,1.428,46,0.009,48,0.591,51,0.157,55,0.969,59,1.054,60,0.286,61,0.014,62,0.009,63,1.15,64,1.053,65,1.565,69,2.08,72,1.371,73,2.601,75,1.085,76,1.262,77,3.144,78,1.565,79,2.399,80,1.565,81,3.337,82,3.562,83,3.337,86,1.933,88,1.614,89,1.227,99,2.024,100,2.141,107,0.742,109,2.502,112,1.138,128,1.565,134,1.262,139,2.601,141,3.452,143,0.895,144,1.227,145,0.484,146,1.565,147,1.138,154,1.275,155,1.371,157,1.962,159,0.828,160,1.009,168,1.397,169,1.397,178,3.74,206,3.317,212,0.969,231,0.895,242,1.378,271,1.262,273,3.935,279,2.916,282,1.053,283,0.895,287,3.452,288,3.562,289,1.397,290,2.399,292,2.399,294,1.053,297,2.601,304,2.399,305,1.323,320,0.685,325,2.399,336,1.262,337,0.867,344,2.399,350,0.895,351,0.828,377,1.262,383,1.397,392,2.4,422,1.806,447,1.053,453,1.009,473,1.262,537,1.268,589,1.791,591,2.745,611,1.791,618,2.399,619,2.745,621,2.14,626,2.399,627,1.791,628,1.791,629,1.791,646,1.791,647,2.745,648,1.791,649,1.791,650,1.791,651,1.791,652,1.791,653,3.337,654,3.337,655,3.337,656,5.095,657,3.74,658,2.745,659,3.337,661,3.337,662,4.862,663,3.337,664,3.337,665,4.568,666,2.745,674,2.745,681,1.565,683,1.397,691,3.337,699,1.791,700,1.791,704,3.74,708,1.791,709,2.745,711,1.791,712,1.791,714,3.337,716,3.74,717,1.791,718,1.791,720,2.745,723,3.74,725,2.745,734,1.791,739,2.745,740,2.745,742,3.337,743,3.74,744,1.791,747,1.791,750,1.791,751,1.791,755,1.397,757,2.745,758,3.74,759,1.791,760,1.791,761,1.791,909,1.565,1004,2.399,1007,3.268,1014,1.565,1062,1.565,1084,1.791,1085,3.976,1086,3.976,1087,3.27,1088,4.456,1089,4.456,1090,3.976,1091,2.134,1092,2.134,1093,2.134,1094,3.27,1095,3.27,1096,2.134,1097,2.134,1098,2.134,1099,2.134,1100,2.134,1101,2.134,1102,2.134,1103,2.134,1104,2.134,1105,2.134,1106,2.134,1107,2.134,1108,2.134,1109,4.805,1110,3.27,1111,2.134,1112,2.134,1113,2.134,1114,2.134,1115,2.134,1116,2.134,1117,2.134,1118,2.134,1119,2.134,1120,2.134,1121,2.134,1122,3.27,1123,2.134,1124,3.27,1125,2.134,1126,3.27,1127,2.134,1128,2.134,1129,2.134,1130,2.134,1131,2.134,1132,2.134,1133,2.134,1134,2.134,1135,2.134,1136,3.976,1137,2.134,1138,2.134,1139,2.134,1140,3.27,1141,2.134,1142,2.134]],["title/classes/ValidationBuilder.html",[0,0.17,1143,2.383]],["body/classes/ValidationBuilder.html",[0,0.232,1,2.906,2,1.722,3,0.327,4,0.327,5,0.278,6,0.189,9,3.378,10,0.376,13,1.951,14,1.334,15,1.233,21,0.34,22,0.03,23,3.437,25,1.048,29,1.334,30,0.803,31,1.138,32,0.729,41,1.478,42,1.595,46,0.02,48,0.663,49,3.258,51,0.327,60,0.729,61,0.024,62,0.02,146,3.258,160,1.677,330,4.68,408,2.906,1143,3.984,1144,3.728,1145,4.442,1146,4.442,1147,4.442,1148,4.442,1149,4.442,1150,4.442,1151,4.442,1152,4.442,1153,4.442,1154,4.442]],["title/interfaces/ValidationErrors.html",[33,1.003,270,0.204]],["body/interfaces/ValidationErrors.html",[3,0.359,4,0.359,5,0.395,6,0.185,21,0.306,22,0.029,25,0.942,27,2.888,33,1.948,34,1.11,41,1.626,42,1.754,46,0.021,51,0.449,61,0.025,62,0.021,107,1.305,270,0.36,272,1.508,376,4.1,377,3.4,1155,3.196,1156,4.885]],["title/interfaces/Validator.html",[41,1.082,270,0.204]],["body/interfaces/Validator.html",[3,0.348,4,0.348,5,0.41,6,0.182,10,0.401,14,1.386,16,3.041,21,0.354,22,0.03,25,0.913,27,3.337,29,1.162,30,0.7,31,0.992,32,0.635,33,1.928,34,1.164,41,1.879,42,1.7,46,0.021,51,0.443,61,0.025,62,0.021,107,1.074,270,0.354,272,1.461,377,2.798,1155,3.097,1157,4.734]],["title/coverage.html",[1158,3.724]],["body/coverage.html",[0,0.33,1,2.359,5,0.226,6,0.218,7,3.025,9,1.942,21,0.226,22,0.03,33,1.113,41,1.2,46,0.016,61,0.021,62,0.016,63,1.942,64,1.779,66,3.025,67,3.025,75,0.639,93,2.359,109,1.779,147,1.031,157,2.348,160,1.113,221,1.468,222,2.131,224,3.025,225,3.025,242,1.487,247,2.359,249,3.025,258,2.131,261,1.113,270,0.406,271,2.131,273,3.484,274,3.489,276,2.131,277,1.2,284,2.359,294,1.779,359,3.025,374,2.644,375,3.025,391,2.131,392,1.942,408,2.359,409,3.025,412,1.942,413,3.489,426,1.942,528,3.025,529,3.025,538,2.905,564,1.398,565,1.779,580,1.779,585,3.025,681,3.489,683,3.113,762,3.025,852,3.489,997,3.484,1009,2.131,1035,2.359,1084,3.025,1143,2.644,1144,3.025,1155,3.113,1158,3.025,1159,3.605,1160,3.605,1161,3.605,1162,6.045,1163,3.605,1164,3.605,1165,3.605,1166,3.605,1167,5.324,1168,3.605,1169,4.757,1170,4.757,1171,4.757,1172,3.605,1173,3.605,1174,3.605,1175,5.324,1176,4.757,1177,3.605,1178,3.605,1179,3.605,1180,3.605,1181,3.605,1182,3.605,1183,4.757,1184,5.324,1185,5.324,1186,3.025,1187,3.025,1188,3.605,1189,3.605]],["title/dependencies.html",[382,2.558,1190,2.713]],["body/dependencies.html",[22,0.03,46,0.021,61,0.025,62,0.021,143,1.969,145,1.066,287,3.677,382,3.074,400,3.942,1191,4.697,1192,6.589,1193,4.697,1194,5.619,1195,4.697,1196,4.697,1197,5.619,1198,4.716,1199,4.697,1200,4.697,1201,4.697,1202,4.697,1203,4.697,1204,4.697,1205,4.697,1206,4.697,1207,4.697,1208,4.697,1209,4.697,1210,4.697,1211,4.697,1212,4.697,1213,4.697,1214,4.697,1215,4.697,1216,4.697,1217,4.697]],["title/miscellaneous/enumerations.html",[1218,1.461,1219,3.281]],["body/miscellaneous/enumerations.html",[6,0.158,10,0.417,22,0.029,46,0.022,61,0.025,62,0.022,100,3.553,242,1.118,295,1.653,305,1.639,320,1.032,337,1.306,414,1.639,453,1.52,457,2.064,504,2.064,535,1.768,537,1.909,538,2.43,560,2.652,561,2.236,562,1.909,563,2.43,1218,2.652,1219,4.133,1220,4.924]],["title/index.html",[10,0.275,1221,2.728]],["body/index.html",[2,1.719,22,0.029,46,0.02,61,0.024,62,0.02,63,2.388,64,3.188,222,3.819,223,3.252,247,2.901,272,1.368,294,3.188,305,1.952,379,3.98,380,4.425,382,2.901,383,2.901,384,3.721,385,3.721,386,3.721,387,3.721,388,3.721,389,3.721,390,3.721,391,3.819,392,3.479,393,4.554,394,1.859,395,3.721,457,2.275,626,3.252,1221,3.721,1222,4.434,1223,4.434]],["title/modules.html",[381,3.254]],["body/modules.html",[22,0.026,46,0.023,61,0.026,62,0.023,380,3.429,381,3.843,1198,4.398,1224,5.24,1225,5.24,1226,5.24]],["title/miscellaneous/typealiases.html",[1218,1.461,1227,3.909]],["body/miscellaneous/typealiases.html",[6,0.167,10,0.44,21,0.326,22,0.026,42,2.141,46,0.023,61,0.026,62,0.023,372,3.81,1155,3.4,1218,2.798,1228,5.196,1229,5.196]],["title/miscellaneous/variables.html",[1218,1.461,1230,3.281]],["body/miscellaneous/variables.html",[6,0.161,10,0.424,21,0.314,22,0.029,46,0.022,61,0.026,62,0.022,99,2.65,100,3.142,284,3.817,562,1.94,584,2.273,997,3.275,1009,2.959,1035,3.817,1186,4.2,1187,4.896,1218,2.695,1230,4.2,1231,5.005,1232,5.005,1233,5.005]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":242,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["0.9.1",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1162,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":305,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["1.10.0",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":749,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1/2",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1182,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":683,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["1024",{"_index":243,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["10ms",{"_index":1075,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["11/12",{"_index":1166,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1223,"title":{},"body":{"index.html":{}}}],["15",{"_index":685,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1px",{"_index":665,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["1rem",{"_index":725,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["2",{"_index":457,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["2.0.1",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["2.5rem",{"_index":1134,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["20x",{"_index":955,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["25,safari5.1",{"_index":689,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25rem",{"_index":660,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25s",{"_index":737,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["2e2e2e",{"_index":1137,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["3",{"_index":560,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["3.0.3",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":1185,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":1140,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["4",{"_index":561,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["4/12",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1136,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["404",{"_index":940,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["42",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":664,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["5",{"_index":562,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["50",{"_index":681,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["50%,#f7f7f7",{"_index":687,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["5rem",{"_index":661,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["6",{"_index":563,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["6.5.3",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["63",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["7/11",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":703,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["8.2.11",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":1172,"title":{},"body":{"coverage.html":{}}}],["8/16",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["85rem",{"_index":721,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["87",{"_index":1163,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":734,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["9",{"_index":1222,"title":{},"body":{"index.html":{}}}],["9.15.10",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":1181,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["9rem",{"_index":719,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abort",{"_index":556,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["absolute",{"_index":729,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":88,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{}}}],["action",{"_index":712,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["actions",{"_index":722,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["active",{"_index":427,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["actual_component",{"_index":761,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["add(...validators",{"_index":369,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(upload",{"_index":1012,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":122,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["affect",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["afterviewinit",{"_index":280,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["again",{"_index":218,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["aliases",{"_index":1228,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":714,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["allowed",{"_index":745,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["amount",{"_index":1073,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["and(...validators",{"_index":1151,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":1145,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":1149,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":1152,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":1204,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":400,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":260,"title":{},"body":{"injectables/FileUploadFactory.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["angular/compiler",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":143,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["animations",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["anything",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["api.ts",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/upload",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["api/validation",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["arguments",{"_index":123,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":179,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":215,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["array.from(this.uploads.values",{"_index":1083,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["array.from({length",{"_index":878,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["array.isarray(errors",{"_index":942,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["array.isarray(validators",{"_index":368,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["assets//scss/variables",{"_index":650,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/fonts",{"_index":649,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/scss/icons",{"_index":651,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["auto",{"_index":1123,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["back",{"_index":547,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["background",{"_index":674,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["basis",{"_index":1131,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["before",{"_index":452,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"classes/UploadQueue.html":{}}}],["beforestart",{"_index":870,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["beforestart(hook",{"_index":884,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["behaviorsubject",{"_index":419,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["behaviorsubject(this.upload",{"_index":882,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["between",{"_index":701,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["bind",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["block",{"_index":652,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["body",{"_index":115,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["boolean",{"_index":512,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":385,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":662,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bottom",{"_index":691,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bound",{"_index":301,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["box",{"_index":1126,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["break",{"_index":411,"title":{},"body":{"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["broken",{"_index":601,"title":{},"body":{"classes/UploadControl.html":{}}}],["browse",{"_index":1226,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1198,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browser.ts",{"_index":67,"title":{},"body":{"directives/FileBrowserDirective.html":{},"coverage.html":{}}}],["browser.ts:104",{"_index":137,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:119",{"_index":127,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:30",{"_index":121,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:33",{"_index":110,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:36",{"_index":108,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:41",{"_index":119,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:48",{"_index":111,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:55",{"_index":102,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:58",{"_index":101,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:70",{"_index":94,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browser.ts:95",{"_index":133,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["browsers",{"_index":677,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["buffer",{"_index":424,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["buffer(queuechanged.pipe(debouncetime(10",{"_index":439,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["buffer(this.uploaddestroy$.pipe(debouncetime(10",{"_index":1081,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["bufferedchanges.pop",{"_index":441,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["build",{"_index":922,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["button",{"_index":738,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["byte",{"_index":234,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":238,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes.tofixed(2",{"_index":245,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["call",{"_index":908,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["cancel",{"_index":539,"title":{},"body":{"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["canceled",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":198,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["case",{"_index":496,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["center",{"_index":716,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chance",{"_index":605,"title":{},"body":{"classes/UploadControl.html":{}}}],["change",{"_index":209,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["changed",{"_index":432,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["changes",{"_index":473,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["check",{"_index":455,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["checks",{"_index":510,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["child",{"_index":743,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chrome10",{"_index":688,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["chrome26",{"_index":695,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["cleanall",{"_index":1088,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["clear",{"_index":216,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["click",{"_index":86,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["click(event",{"_index":125,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":388,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":389,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":390,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["color",{"_index":653,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["colors",{"_index":751,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["column",{"_index":658,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["commonmodule",{"_index":399,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":475,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["completed",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["component",{"_index":157,"title":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":759,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["components",{"_index":626,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["components/ngxfileuploaditem.html",{"_index":612,"title":{},"body":{"classes/UploadControl.html":{}}}],["concurrent",{"_index":965,"title":{},"body":{"classes/UploadQueue.html":{}}}],["concurrent(count",{"_index":434,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["concurrentcount",{"_index":430,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["concurrentuploads",{"_index":584,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":1011,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["connection",{"_index":600,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{}}}],["constructor(config",{"_index":1008,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["constructor(file",{"_index":768,"title":{},"body":{"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":592,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":973,"title":{},"body":{"classes/UploadRequest.html":{}}}],["constructor(httpclient",{"_index":252,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["constructor(renderer",{"_index":90,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["constructor(validators",{"_index":360,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contains",{"_index":571,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["content",{"_index":700,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["context",{"_index":300,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["context.ctrl",{"_index":590,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":587,"title":{},"body":{"classes/UploadControl.html":{}}}],["couldn't",{"_index":486,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["count",{"_index":436,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["coverage",{"_index":1158,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":193,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["createbeforestarthook(upload",{"_index":463,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["createfieldinputfield",{"_index":200,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["creates",{"_index":95,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadModel.html":{}}}],["createstore",{"_index":250,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createupload",{"_index":251,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createupload(file",{"_index":256,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["createuploadbody",{"_index":929,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["ctrl",{"_index":275,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["cur",{"_index":913,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["current",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["currently",{"_index":458,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":739,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["custom",{"_index":1094,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["customscrollbar",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["d2d2d2",{"_index":1125,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dark",{"_index":655,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["darken(#fdfdfd",{"_index":702,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["dashed",{"_index":1135,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data",{"_index":104,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["data/api",{"_index":281,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["data/api/upload",{"_index":285,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["data/api/validation",{"_index":146,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["data/upload.model",{"_index":262,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["debouncetime",{"_index":425,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["declarations",{"_index":384,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":99,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"miscellaneous/variables.html":{}}}],["defaultstoreconfig",{"_index":1035,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultuploaditem",{"_index":632,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":864,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["delay",{"_index":616,"title":{},"body":{"classes/UploadControl.html":{}}}],["dependencies",{"_index":382,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":68,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{}}}],["design",{"_index":1001,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["destroy",{"_index":447,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["destroyed",{"_index":159,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["direction",{"_index":657,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directive",{"_index":63,"title":{"directives/FileBrowserDirective.html":{}},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":65,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directly",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/UploadItemComponent.html":{}}}],["disable",{"_index":355,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["disabled",{"_index":80,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["display",{"_index":206,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["document.createelement(\"input",{"_index":202,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["documentation",{"_index":1159,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":628,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["done",{"_index":489,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["dont",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["download",{"_index":553,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["drag",{"_index":70,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drag/drop",{"_index":1122,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dragevent",{"_index":132,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dragover",{"_index":87,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dragover(event",{"_index":131,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drop",{"_index":71,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["drop(event",{"_index":136,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dummy",{"_index":194,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["dynamic",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":210,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["e4e4e4",{"_index":667,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["edit",{"_index":669,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":673,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["element",{"_index":618,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ellipsis",{"_index":710,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["emits",{"_index":865,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["enabled",{"_index":863,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["ensure",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["enum",{"_index":559,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":1219,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":483,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["error.value",{"_index":644,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["errors",{"_index":554,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["even",{"_index":1018,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["event",{"_index":124,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["event.loaded",{"_index":954,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["event.preventdefault",{"_index":174,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":173,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["event.type",{"_index":945,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["eventemitter",{"_index":120,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["events",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["example",{"_index":74,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadControl.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["exists",{"_index":518,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exports",{"_index":387,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":682,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["failed",{"_index":598,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["false",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["fdfdfd",{"_index":675,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff16",{"_index":694,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff3.6",{"_index":684,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["field",{"_index":105,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["filebrowserdirective",{"_index":64,"title":{"directives/FileBrowserDirective.html":{}},"body":{"directives/FileBrowserDirective.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":765,"title":{},"body":{"classes/UploadModel.html":{}}}],["files",{"_index":178,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["files.foreach((file",{"_index":188,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["fileselect",{"_index":163,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["filesize",{"_index":226,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["filesizepipe",{"_index":222,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["filetype",{"_index":766,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload",{"_index":288,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["fileupload/data/api/index.ts",{"_index":375,"title":{},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["fileupload/data/api/index.ts:1",{"_index":378,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/data/api/upload.ts",{"_index":538,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/data/api/upload.ts:101",{"_index":543,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:107",{"_index":544,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:112",{"_index":549,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:90",{"_index":555,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:96",{"_index":551,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/validation.ts",{"_index":1155,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/data/api/validation.ts:1",{"_index":1156,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/data/api/validation.ts:8",{"_index":1157,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileupload/data/upload.model.ts",{"_index":762,"title":{},"body":{"classes/UploadModel.html":{},"coverage.html":{}}}],["fileupload/data/upload.model.ts:104",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:111",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:118",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:122",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:126",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:130",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:135",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:139",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:147",{"_index":771,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:23",{"_index":769,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:35",{"_index":773,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:42",{"_index":776,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:49",{"_index":778,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:56",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:63",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:70",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:74",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:78",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:82",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:86",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:90",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:97",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/libs/ui/src/file",{"_index":66,"title":{},"body":{"directives/FileBrowserDirective.html":{},"coverage.html":{}}}],["fileupload/libs/ui/src/upload",{"_index":273,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.control.ts",{"_index":585,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:19",{"_index":593,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:33",{"_index":597,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:41",{"_index":607,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:49",{"_index":609,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.control.ts:61",{"_index":595,"title":{},"body":{"classes/UploadControl.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts",{"_index":413,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:28",{"_index":970,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:32",{"_index":972,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:39",{"_index":966,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:47",{"_index":968,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.queue.ts:52",{"_index":967,"title":{},"body":{"classes/UploadQueue.html":{}}}],["fileupload/libs/upload/src/upload.request.ts",{"_index":852,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"coverage.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:101",{"_index":975,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:108",{"_index":987,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:115",{"_index":976,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:123",{"_index":977,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:136",{"_index":979,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:146",{"_index":981,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:150",{"_index":983,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:154",{"_index":982,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:158",{"_index":980,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:162",{"_index":984,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:170",{"_index":985,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:180",{"_index":986,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:202",{"_index":988,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:217",{"_index":978,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:62",{"_index":989,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:66",{"_index":991,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:70",{"_index":993,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:74",{"_index":994,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:78",{"_index":996,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:82",{"_index":995,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.request.ts:84",{"_index":974,"title":{},"body":{"classes/UploadRequest.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts",{"_index":997,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:108",{"_index":1020,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:118",{"_index":1017,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:129",{"_index":1023,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:140",{"_index":1025,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:147",{"_index":1021,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:33",{"_index":1010,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:48",{"_index":1015,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:57",{"_index":1028,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:64",{"_index":1013,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/upload/src/upload.storage.ts:85",{"_index":1016,"title":{},"body":{"classes/UploadStorage.html":{}}}],["fileupload/libs/validation/src/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts",{"_index":359,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:13",{"_index":366,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:18",{"_index":363,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:25",{"_index":364,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:32",{"_index":365,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/grouped.validator.ts:5",{"_index":361,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/libs/validation/src/or.validator.ts",{"_index":409,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/or.validator.ts:6",{"_index":410,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts",{"_index":1144,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts:12",{"_index":1148,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/libs/validation/src/validation.builder.ts:8",{"_index":1146,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/ngx",{"_index":396,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/utils/factory.ts",{"_index":249,"title":{},"body":{"injectables/FileUploadFactory.html":{},"coverage.html":{}}}],["fileupload/utils/factory.ts:10",{"_index":254,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/factory.ts:16",{"_index":259,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/factory.ts:21",{"_index":255,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["fileupload/utils/file",{"_index":224,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["fileupload/utils/state",{"_index":528,"title":{},"body":{"pipes/StateToStringPipe.html":{},"coverage.html":{}}}],["fileuploadfactory",{"_index":93,"title":{"injectables/FileUploadFactory.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"coverage.html":{}}}],["fileuploaditemcontext",{"_index":271,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["filter",{"_index":420,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["filter(result",{"_index":915,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["finished",{"_index":572,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["finishes",{"_index":567,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["first",{"_index":1139,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flex",{"_index":656,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["font",{"_index":647,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["footer",{"_index":747,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["forkjoin",{"_index":860,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["forkjoin(this.hooks.beforestart.map((hook",{"_index":910,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["form",{"_index":103,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdata",{"_index":853,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdata.append(label",{"_index":932,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["formdataname",{"_index":81,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["function",{"_index":372,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadRequest.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":517,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["gb",{"_index":237,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["get($colors",{"_index":654,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["get($map",{"_index":750,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["getchange",{"_index":971,"title":{},"body":{"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["getdata",{"_index":992,"title":{},"body":{"classes/UploadRequest.html":{}}}],["getdestroyed",{"_index":990,"title":{},"body":{"classes/UploadRequest.html":{}}}],["getfile",{"_index":772,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":777,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":775,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["gethaserror",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["getisinvalid",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["getispending",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["getisuploadable",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["getprogress",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["getqueuechange",{"_index":1027,"title":{},"body":{"classes/UploadStorage.html":{}}}],["getrequestid",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["getresponse",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":158,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["getstate",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["getstorage",{"_index":1103,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["getuploaded",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":604,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":671,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(to",{"_index":690,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(top",{"_index":680,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["green",{"_index":753,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":1130,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["handle",{"_index":134,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["handleerror(response",{"_index":936,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleevent(event",{"_index":625,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":187,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["handlehttpevent(event",{"_index":944,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleprogress(event",{"_index":952,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handleresponse(res",{"_index":956,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["handlesent",{"_index":959,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["happen",{"_index":617,"title":{},"body":{"classes/UploadControl.html":{}}}],["happens",{"_index":1029,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["haserror",{"_index":540,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["haserrors",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":698,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["height",{"_index":718,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["here",{"_index":304,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hidden",{"_index":711,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["highlight.js",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["holds",{"_index":569,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["hook",{"_index":454,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["hooks",{"_index":869,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["host",{"_index":128,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hostlistener",{"_index":140,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":181,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":171,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["hostlistener(\"drop",{"_index":175,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["hostlisteners",{"_index":85,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["html",{"_index":757,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["htmlinputelement",{"_index":164,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["http",{"_index":599,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpclient",{"_index":253,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpclientmodule",{"_index":401,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":859,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpevent",{"_index":855,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype",{"_index":856,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.response",{"_index":950,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.sent",{"_index":946,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpeventtype.uploadprogress",{"_index":948,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpprogressevent",{"_index":857,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["httpresponse",{"_index":858,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["https://colorzilla.com/gradient",{"_index":672,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["icon",{"_index":1133,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["icons",{"_index":646,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["id",{"_index":577,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["idatanode",{"_index":374,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["identifier",{"_index":1160,"title":{},"body":{"coverage.html":{}}}],["idle",{"_index":504,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["ie10",{"_index":693,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["igniteui",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["ignoreerror",{"_index":899,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["implemented",{"_index":1033,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["implements",{"_index":72,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":407,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":376,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["inheritdoc",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["injectable",{"_index":247,"title":{"injectables/FileUploadFactory.html":{}},"body":{"injectables/FileUploadFactory.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":248,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["inner",{"_index":735,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["input",{"_index":141,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["input(\"ngxfileupload",{"_index":151,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["input[type=\"file",{"_index":213,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["inputfield",{"_index":201,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["instance",{"_index":96,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadModel.html":{}}}],["instanceof",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["interal",{"_index":1051,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["interface",{"_index":270,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":272,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":537,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["invalidated",{"_index":1022,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["iscompleted",{"_index":897,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["iscompleted(ignoreerror",{"_index":896,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isidle",{"_index":901,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isinuploadqueue(request",{"_index":511,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["isinvalid",{"_index":541,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["isnan(size",{"_index":239,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["ispending",{"_index":576,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["ispending(pending",{"_index":828,"title":{},"body":{"classes/UploadModel.html":{}}}],["isprogress",{"_index":900,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isrequestcompleted",{"_index":902,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["isstartable",{"_index":465,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["isuploadable",{"_index":767,"title":{},"body":{"classes/UploadModel.html":{}}}],["item",{"_index":289,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item'},{'name",{"_index":760,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item.component",{"_index":1106,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["item.component.html",{"_index":291,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.scss",{"_index":293,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.ts",{"_index":274,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:121",{"_index":636,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:25",{"_index":639,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:30",{"_index":638,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:35",{"_index":637,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:53",{"_index":633,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:62",{"_index":634,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:65",{"_index":630,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:78",{"_index":631,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:89",{"_index":635,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["items",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["itemtemplate",{"_index":1090,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["itemtpl",{"_index":299,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["iuploadapi",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":699,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["kb",{"_index":235,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["key",{"_index":377,"title":{},"body":{"interfaces/IDataNode.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":357,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["know",{"_index":1003,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["label",{"_index":728,"title":{},"body":{"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["last",{"_index":742,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["left",{"_index":731,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["legend",{"_index":383,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["lib/.../public",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../upload.storage.ts",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../upload.ts",{"_index":1220,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":1229,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/data/api",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{}}}],["lib/data/api/validation",{"_index":367,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/public",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/ui",{"_index":402,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["libs/upload/src/upload.request",{"_index":263,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["libs/upload/src/upload.storage",{"_index":264,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["light",{"_index":1138,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#2e2e2e",{"_index":1141,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#3e3e3e",{"_index":1142,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(map",{"_index":744,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["limit",{"_index":583,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["line",{"_index":717,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["linear",{"_index":679,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["list",{"_index":755,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["listener",{"_index":129,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["literal",{"_index":854,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["lose",{"_index":485,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["make",{"_index":474,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["manager",{"_index":999,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["map",{"_index":422,"title":{},"body":{"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["map((bufferedchanges",{"_index":440,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["map((result",{"_index":911,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["margin",{"_index":704,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["marked",{"_index":573,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["matching",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.max(this.active",{"_index":521,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["math.random().tostring(32).slice(2",{"_index":879,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["math.round(progress",{"_index":841,"title":{},"body":{"classes/UploadModel.html":{}}}],["max",{"_index":581,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["maybe",{"_index":1000,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["mb",{"_index":236,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["merge",{"_index":418,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["message",{"_index":748,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["metadata",{"_index":76,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":1218,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":267,"title":{},"body":{"injectables/FileUploadFactory.html":{},"classes/UploadModel.html":{}}}],["module",{"_index":379,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":381,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":126,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["move",{"_index":844,"title":{},"body":{"classes/UploadModel.html":{}}}],["moz",{"_index":678,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["much",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["multiple",{"_index":204,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["new",{"_index":160,"title":{},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":351,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["nextupload",{"_index":523,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["nextupload.start",{"_index":525,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["ngafterviewinit",{"_index":347,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["ngmodule",{"_index":398,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":168,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngoninit",{"_index":1113,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngx",{"_index":287,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["ngxfileupload",{"_index":78,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileupload(url",{"_index":152,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ngxfileuploaddirective",{"_index":97,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ngxfileuploaditem",{"_index":589,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem]{@link",{"_index":611,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":1107,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadmodule",{"_index":380,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["none",{"_index":207,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["notification",{"_index":960,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["notified",{"_index":130,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["notify",{"_index":557,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["notifyobserver",{"_index":526,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["notifyobservers",{"_index":961,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["nowrap",{"_index":707,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":229,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":118,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["object.assign(validationresult",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":417,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["observe",{"_index":927,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["observer",{"_index":1076,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["observers",{"_index":868,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["of(true).pipe",{"_index":464,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["old",{"_index":676,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["once",{"_index":582,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["onclick(event",{"_index":182,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["ondestroy",{"_index":73,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["one",{"_index":909,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["onfiledragover(event",{"_index":172,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["onfiledrop(event",{"_index":176,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["onfileselect(event",{"_index":214,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["oninit",{"_index":1085,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onitemclick(event",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onuploadstatechange(req",{"_index":493,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["opera12",{"_index":696,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":257,"title":{},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["or(...validators",{"_index":1153,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":1147,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":1150,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":408,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":1154,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":217,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["out",{"_index":395,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":741,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["output",{"_index":142,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["outputs",{"_index":84,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["over",{"_index":135,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["overflow",{"_index":709,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["overview",{"_index":1221,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1190,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":659,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["parsefloat(size.tostring",{"_index":240,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pass",{"_index":344,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passed",{"_index":326,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["passes",{"_index":620,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":648,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["pending",{"_index":414,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["percent",{"_index":566,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["permalink",{"_index":668,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["pipe",{"_index":221,"title":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["pipe(filter",{"_index":477,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["pipe(take(1",{"_index":1054,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["pipe(takeuntil(merge(request.destroyed",{"_index":490,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["pipe(takeuntil(this.cancel",{"_index":928,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":1118,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["pipes",{"_index":223,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"index.html":{}}}],["pipetransform",{"_index":232,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{}}}],["place",{"_index":1050,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["plain",{"_index":117,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["pointer",{"_index":740,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["position",{"_index":726,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["post",{"_index":113,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["prev",{"_index":914,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["prevent",{"_index":460,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["private",{"_index":154,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["processing",{"_index":415,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["progress",{"_index":535,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":724,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["progressevent",{"_index":938,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["progressing",{"_index":505,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["progressinguploads",{"_index":429,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providedin",{"_index":265,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["providers",{"_index":386,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["purge",{"_index":1004,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["pushed",{"_index":461,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["queue",{"_index":431,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["queuechange",{"_index":433,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["queuechanged",{"_index":437,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["queued",{"_index":459,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["queueduploads",{"_index":428,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["queuestate",{"_index":412,"title":{"interfaces/QueueState.html":{}},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["radius",{"_index":663,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["raw",{"_index":774,"title":{},"body":{"classes/UploadModel.html":{}}}],["readonly",{"_index":579,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":197,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["red",{"_index":752,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["redux",{"_index":1002,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["register",{"_index":212,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["register(upload",{"_index":443,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["registered",{"_index":456,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["registers",{"_index":1071,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["registerstoreevents",{"_index":1116,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["registeruploaddestroyevent",{"_index":1077,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["registeruploadevents(request",{"_index":471,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["relative",{"_index":727,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["reload",{"_index":746,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["remote",{"_index":586,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":155,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["remove(event",{"_index":594,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove(upload",{"_index":1019,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["removecompleteduploads",{"_index":1034,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["removed",{"_index":619,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["removefromqueue(request",{"_index":514,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["removeinvalid",{"_index":1005,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["renamed",{"_index":998,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["render",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["rendered",{"_index":298,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["renderer",{"_index":98,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["renderer2",{"_index":91,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["repeat",{"_index":487,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["repeated",{"_index":484,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["reportprogress",{"_index":926,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["represents",{"_index":763,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["req.state",{"_index":495,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["reqid",{"_index":877,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["reqid.join(\"_",{"_index":880,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["request",{"_index":114,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["request.change",{"_index":472,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["request.destroy",{"_index":1065,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["request.iscompleted",{"_index":478,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["request.state",{"_index":503,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["requestcompleted(request",{"_index":501,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["requestid",{"_index":578,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["requestid(id",{"_index":831,"title":{},"body":{"classes/UploadModel.html":{}}}],["res.body",{"_index":958,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["res.ok",{"_index":957,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["reset",{"_index":394,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"index.html":{}}}],["resetupload",{"_index":963,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["responds",{"_index":935,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response",{"_index":548,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":826,"title":{},"body":{"classes/UploadModel.html":{}}}],["response.error",{"_index":937,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response.message",{"_index":941,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["response.status",{"_index":939,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["restart",{"_index":552,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.reduce((prev",{"_index":912,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":542,"title":{},"body":{"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["retry(event",{"_index":596,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":358,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["reverse",{"_index":1124,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["root",{"_index":266,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["row",{"_index":720,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["running",{"_index":575,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["rxjs",{"_index":145,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["rxjs/internal/operators/take",{"_index":1032,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["rxjs/operators",{"_index":283,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["safari7",{"_index":697,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["save",{"_index":302,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["security",{"_index":196,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["select",{"_index":195,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["selected",{"_index":184,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["selector",{"_index":77,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["self",{"_index":715,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["send",{"_index":106,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["sends",{"_index":546,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["server",{"_index":545,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["service",{"_index":876,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["set",{"_index":112,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["setconcurrent(count",{"_index":969,"title":{},"body":{"classes/UploadQueue.html":{}}}],["setispending(pending",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["setngxfileupload(url",{"_index":138,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["setrequestid(id",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["setresponse(response",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["setstate(state",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadRequest.html":{}}}],["setstorage(storage",{"_index":1105,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["settemplate(tpl",{"_index":641,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setupload(fileupload",{"_index":640,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":670,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["short",{"_index":1072,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["shrink",{"_index":1129,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["simply",{"_index":488,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["single",{"_index":588,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["size",{"_index":231,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["size.pipe",{"_index":404,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["size.pipe.ts",{"_index":225,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["size.pipe.ts:10",{"_index":230,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["sizing",{"_index":1127,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["solid",{"_index":666,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["something",{"_index":602,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["sort",{"_index":356,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":462,"title":{},"body":{"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{}}}],["start",{"_index":453,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":606,"title":{},"body":{"classes/UploadControl.html":{}}}],["startall",{"_index":1006,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["started",{"_index":603,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["startnextinqueue(request",{"_index":519,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["starts",{"_index":1024,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["state",{"_index":533,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["state(state",{"_index":833,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["statechange",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["statements",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["statetostring",{"_index":530,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["statetostringpipe",{"_index":391,"title":{"pipes/StateToStringPipe.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"pipes/StateToStringPipe.html":{},"coverage.html":{},"index.html":{}}}],["static",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["still",{"_index":574,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["stop",{"_index":591,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["stop(event",{"_index":608,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopall",{"_index":1007,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["stopped",{"_index":866,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["stops",{"_index":1026,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["storage",{"_index":82,"title":{},"body":{"directives/FileBrowserDirective.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["storage(storage",{"_index":1108,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["store",{"_index":1014,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["storeconfig",{"_index":1036,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["stream",{"_index":867,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["string",{"_index":107,"title":{},"body":{"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"interfaces/IDataNode.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["string.pipe",{"_index":406,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["string.pipe.ts",{"_index":529,"title":{},"body":{"pipes/StateToStringPipe.html":{},"coverage.html":{}}}],["string.pipe.ts:9",{"_index":532,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["style",{"_index":756,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["styles",{"_index":627,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["styleurls",{"_index":292,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["sub",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{}}}],["subject",{"_index":144,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["submit",{"_index":1030,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["submits",{"_index":1037,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["subscribe",{"_index":350,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["subscribed",{"_index":1052,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["subscribtions",{"_index":156,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["subscription",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"classes/UploadQueue.html":{}}}],["succes",{"_index":568,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["success",{"_index":482,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":1224,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1225,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":494,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["switchmap",{"_index":861,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["table",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":421,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["take(1",{"_index":479,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["takeuntil",{"_index":282,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["takeuntil(this.destroyed",{"_index":349,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["tap",{"_index":423,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["tap((request",{"_index":1079,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["template",{"_index":297,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["template(tpl",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["templateref",{"_index":279,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["templateurl",{"_index":290,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["text",{"_index":708,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["think",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.active",{"_index":451,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.add",{"_index":165,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.cancel",{"_index":895,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.cancel$.complete",{"_index":892,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.cancel$.next(true",{"_index":891,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.change",{"_index":1039,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.asobservable",{"_index":1045,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.complete",{"_index":1059,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.change$.next",{"_index":1082,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.completed",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.concurrentcount",{"_index":435,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.context",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.context.data",{"_index":352,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.createbeforestarthook(upload",{"_index":446,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.createfieldinputfield",{"_index":167,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.createuploadbody",{"_index":924,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.destroyed",{"_index":1112,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.destroyed$.asobservable",{"_index":872,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.destroyed$.complete",{"_index":170,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.destroyed$.next(true",{"_index":169,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["this.destroyed.next(true",{"_index":354,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.disabled",{"_index":177,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.execvalidator(validator",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":824,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.size",{"_index":823,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.type",{"_index":825,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.filename",{"_index":845,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":166,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.click",{"_index":183,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.files",{"_index":220,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.fileselect.value",{"_index":219,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.filesize",{"_index":840,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":623,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.change",{"_index":348,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.data",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.destroy",{"_index":624,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.retry",{"_index":614,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":615,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handleerror(error",{"_index":917,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleevent(event",{"_index":613,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":180,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.handlehttpevent(event",{"_index":916,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleprogress(event",{"_index":949,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handleresponse(event",{"_index":951,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.handlesent",{"_index":947,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.haserror",{"_index":849,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.hooks",{"_index":894,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.hooks.beforestart",{"_index":885,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.http.post(this.options.url",{"_index":925,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.iscompleted(true",{"_index":888,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isidle",{"_index":906,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isinuploadqueue(request",{"_index":507,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.isinvalid",{"_index":850,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.ispending",{"_index":907,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.isrequestcompleted",{"_index":898,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.itemtpl",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.notifyobserver",{"_index":470,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.notifyobservers",{"_index":887,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.onfileselect(e",{"_index":211,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.onuploadstatechange(request",{"_index":491,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.options",{"_index":883,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.options.formdata.enabled",{"_index":930,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.options.formdata.name",{"_index":931,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.progress",{"_index":846,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.progressinguploads",{"_index":450,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.progressinguploads.filter((upload",{"_index":520,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.progressinguploads.push(req",{"_index":498,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange",{"_index":442,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.asobservable",{"_index":438,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.complete",{"_index":448,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queuechange$.next",{"_index":527,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads",{"_index":449,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.filter(upload",{"_index":515,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.indexof(request",{"_index":513,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.length",{"_index":522,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.push(upload",{"_index":469,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.queueduploads.shift",{"_index":524,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.registerstoreevents",{"_index":1114,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.registeruploaddestroyevent",{"_index":1044,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.registeruploadevents(upload",{"_index":444,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.removefromqueue(request",{"_index":508,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.renderer.listen(inputfield",{"_index":208,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":203,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":205,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.requestcompleted(req",{"_index":500,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.requestcompleted(request",{"_index":492,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.requestid",{"_index":851,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.resetupload",{"_index":904,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.response",{"_index":847,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.start",{"_index":905,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.startnextinqueue(request",{"_index":509,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["this.state",{"_index":830,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.statechange",{"_index":323,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.storage.add(upload",{"_index":192,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.storeconfig",{"_index":1041,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.storeconfig.concurrentuploads",{"_index":1043,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.units.length",{"_index":244,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.units[unit",{"_index":246,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.upload",{"_index":881,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.asobservable",{"_index":871,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.complete",{"_index":893,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload$.next(this.upload",{"_index":962,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.file",{"_index":933,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.filename",{"_index":934,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.haserror",{"_index":903,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.isinvalid",{"_index":889,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.ispending",{"_index":964,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.requestid",{"_index":874,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.response",{"_index":943,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.state",{"_index":875,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.tojson",{"_index":873,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.uploaded",{"_index":953,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.upload.validationerrors",{"_index":921,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.uploaddestroy",{"_index":1061,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.complete",{"_index":1060,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.next(upload",{"_index":1055,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaddestroy$.pipe",{"_index":1078,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploaded",{"_index":839,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":836,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":834,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfactory.createupload(file",{"_index":189,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.uploadfile",{"_index":822,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["this.uploadpending",{"_index":829,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadqueue",{"_index":1040,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.change",{"_index":1046,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.concurrent",{"_index":1042,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.destroy",{"_index":1058,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadqueue.register(upload",{"_index":1049,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadrequestid",{"_index":832,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadresponse",{"_index":827,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadresponse.errors",{"_index":842,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploads",{"_index":1062,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{}}}],["this.uploads.delete(request.requestid",{"_index":1080,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.foreach((upload",{"_index":1066,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.foreach(upload",{"_index":1056,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.get(id",{"_index":1064,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploads.set(upload.requestid",{"_index":1047,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["this.uploadstorage",{"_index":1109,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.change",{"_index":1117,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.destroy",{"_index":1115,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.purge",{"_index":1121,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.startall",{"_index":1119,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorage.stopall",{"_index":1120,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadstorageset",{"_index":1110,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploadvalidationerrors",{"_index":838,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.url",{"_index":153,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.validationerrors",{"_index":848,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.validator",{"_index":190,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["this.validators",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":370,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":621,"title":{},"body":{"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["time",{"_index":1074,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["timer",{"_index":610,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":622,"title":{},"body":{"classes/UploadControl.html":{}}}],["title",{"_index":705,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["todo",{"_index":843,"title":{},"body":{"classes/UploadModel.html":{}}}],["tojson",{"_index":764,"title":{},"body":{"classes/UploadModel.html":{}}}],["top",{"_index":732,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["total",{"_index":570,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["tpl",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["transform",{"_index":227,"title":{},"body":{"pipes/FileSizePipe.html":{},"pipes/StateToStringPipe.html":{},"components/UploadItemComponent.html":{}}}],["transform(size",{"_index":228,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["transform(state",{"_index":531,"title":{},"body":{"pipes/StateToStringPipe.html":{}}}],["transition",{"_index":736,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["translate",{"_index":733,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["transparent",{"_index":713,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tree",{"_index":629,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["trigger",{"_index":161,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["try",{"_index":516,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["tslib",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"pipes/FileSizePipe.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type=\"file",{"_index":186,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["typealiases",{"_index":1227,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ul",{"_index":754,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["unit",{"_index":241,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["units",{"_index":233,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["unsubscribe",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["until",{"_index":480,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["update",{"_index":886,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["updatequeue",{"_index":502,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload",{"_index":75,"title":{"interfaces/Upload.html":{}},"body":{"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["upload(fileupload",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.beforestart",{"_index":445,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.cancel",{"_index":1070,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.destroy",{"_index":1057,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.destroyed",{"_index":1053,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.iscompleted",{"_index":1067,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.isidle",{"_index":1068,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.isinvalid",{"_index":1048,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.model",{"_index":558,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["upload.module.ts",{"_index":397,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":642,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.queue",{"_index":1031,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.request",{"_index":416,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.requestid",{"_index":1063,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.response.body.message",{"_index":645,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.size",{"_index":643,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.start",{"_index":1069,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["upload.state",{"_index":466,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.tojson",{"_index":353,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.update",{"_index":468,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["upload.validate(this.validator",{"_index":191,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["upload/src/upload.request",{"_index":148,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["upload/src/upload.storage",{"_index":150,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["uploadall",{"_index":1089,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploadapi",{"_index":284,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadapi.uploadstate",{"_index":296,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploadbody",{"_index":923,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadcomplete",{"_index":476,"title":{},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{}}}],["uploadcontrol",{"_index":276,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":319,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploaddata",{"_index":277,"title":{"interfaces/UploadData.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddestroy",{"_index":1038,"title":{},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{}}}],["uploaded",{"_index":481,"title":{},"body":{"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["uploaded(bytes",{"_index":835,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadfactory",{"_index":92,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["uploadfile",{"_index":770,"title":{},"body":{"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadinvalid",{"_index":819,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploaditemcomponent",{"_index":294,"title":{"components/UploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploadmodel",{"_index":261,"title":{"classes/UploadModel.html":{}},"body":{"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":268,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["uploadoptions",{"_index":258,"title":{"interfaces/UploadOptions.html":{}},"body":{"injectables/FileUploadFactory.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"coverage.html":{}}}],["uploadpending",{"_index":820,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadqueue",{"_index":426,"title":{"classes/UploadQueue.html":{}},"body":{"interfaces/QueueState.html":{},"classes/UploadQueue.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{}}}],["uploadrequest",{"_index":147,"title":{"classes/UploadRequest.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["uploadrequest(this.httpclient",{"_index":269,"title":{},"body":{"injectables/FileUploadFactory.html":{}}}],["uploadrequestid",{"_index":821,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadresponse",{"_index":564,"title":{"interfaces/UploadResponse.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":69,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/QueueState.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadQueue.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["uploadstate",{"_index":295,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":890,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.completed",{"_index":499,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.idle",{"_index":506,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.invalid",{"_index":536,"title":{},"body":{"pipes/StateToStringPipe.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.pending",{"_index":467,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.progress",{"_index":534,"title":{},"body":{"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["uploadstate.start",{"_index":497,"title":{},"body":{"interfaces/QueueState.html":{},"pipes/StateToStringPipe.html":{},"interfaces/UploadOptions.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{}}}],["uploadstorage",{"_index":109,"title":{"classes/UploadStorage.html":{}},"body":{"directives/FileBrowserDirective.html":{},"injectables/FileUploadFactory.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["uploadstorageconfig",{"_index":1009,"title":{"interfaces/UploadStorageConfig.html":{}},"body":{"classes/UploadStorage.html":{},"interfaces/UploadStorageConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadstorageset",{"_index":1111,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploadstoreconfig",{"_index":580,"title":{"interfaces/UploadStoreConfig.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidation",{"_index":565,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadviewcomponent",{"_index":392,"title":{"components/UploadViewComponent.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":139,"title":{},"body":{"directives/FileBrowserDirective.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{}}}],["use",{"_index":116,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{}}}],["used",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["useformdata",{"_index":83,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadViewComponent.html":{}}}],["utils/factory",{"_index":149,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["utils/file",{"_index":403,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["utils/state",{"_index":405,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validate(validator",{"_index":918,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validated",{"_index":550,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":1143,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":837,"title":{},"body":{"classes/UploadModel.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":373,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator(this.upload.file",{"_index":920,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validator.validate(file",{"_index":371,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(this.upload.file",{"_index":919,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":100,"title":{},"body":{"directives/FileBrowserDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadRequest.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":758,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["variable",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1230,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":185,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["view",{"_index":286,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["view.html",{"_index":1087,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.scss",{"_index":1086,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts",{"_index":1084,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["view.ts:19",{"_index":1093,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:22",{"_index":1096,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:25",{"_index":1097,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:28",{"_index":1092,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:31",{"_index":1098,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:34",{"_index":1095,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:39",{"_index":1104,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:43",{"_index":1102,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:49",{"_index":1091,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:86",{"_index":1101,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:91",{"_index":1100,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:96",{"_index":1099,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["viewchild",{"_index":278,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"directives/FileBrowserDirective.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"classes/UploadQueue.html":{},"classes/UploadRequest.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStorage.html":{},"interfaces/UploadStoreConfig.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["w3c",{"_index":692,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["want",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["web",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":686,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["white",{"_index":706,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["width",{"_index":723,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["window",{"_index":162,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["without",{"_index":199,"title":{},"body":{"directives/FileBrowserDirective.html":{}}}],["wrapped",{"_index":862,"title":{},"body":{"interfaces/UploadOptions.html":{},"classes/UploadRequest.html":{}}}],["wrapper",{"_index":1132,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["x",{"_index":1128,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["yes",{"_index":362,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":730,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["zone.js",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":393,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"@lib/data/api\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FileBrowserDirective.html":{"url":"directives/FileBrowserDirective.html","title":"directive - FileBrowserDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  FileBrowserDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/ui/src/file-browser.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                storage\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ngxFileUpload\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, uploadFactory: FileUploadFactory)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:70\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadFactory\n                                                  \n                                                        \n                                                                        FileUploadFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:55\n                            \n                        \n                \n                    \n                        form data field name with which form >data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n                \n                    \n                        Type :         UploadStorage\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:48\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:41\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:30\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:119\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:95\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:104\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n\n\n                \n                    \n                        setngxFileUpload(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/file-browser.ts:36\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { UploadRequest } from \"../../upload/src/upload.request\";\nimport { FileUploadFactory } from \"../../../utils/factory\";\nimport { UploadStorage } from \"../../upload/src/upload.storage\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\"\n})\nexport class FileBrowserDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    @Input()\n    public storage: UploadStorage;\n\n    @Input(\"ngxFileUpload\")\n    public set ngxFileUpload(url: string) {\n        this.url = url;\n    }\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form >data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public disabled = false;\n\n    private url: string;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private renderer: Renderer2,\n        private uploadFactory: FileUploadFactory,\n    ) {\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            const files = Array.from(event.dataTransfer.files);\n            this.handleFileSelect(files);\n        }\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        files.forEach((file: File) => {\n            const upload = this.uploadFactory.createUpload(file, {url: this.url});\n            if (this.validator) {\n                upload.validate(this.validator);\n            }\n            this.storage.add(upload);\n        });\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FileSizePipe.html":{"url":"pipes/FileSizePipe.html","title":"pipe - FileSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FileSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/file-size.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        fileSize\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/file-size.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"fileSize\"\n})\nexport class FileSizePipe implements PipeTransform {\n\n    private units = [\"Byte\", \"Kb\", \"Mb\", \"Gb\"];\n\n    transform(size: number): string {\n        let bytes = isNaN(size) ? parseFloat(size.toString()) : size;\n        let unit  = 0;\n\n        while (bytes > 1024 && this.units.length > unit) {\n            bytes = bytes / 1024;\n            unit++;\n        }\n        return `${bytes.toFixed(2)} ${this.units[unit]}`;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadFactory.html":{"url":"injectables/FileUploadFactory.html","title":"injectable - FileUploadFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createStore\n                            \n                            \n                                    Public\n                                createUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/factory.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createStore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createStore()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/factory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         UploadStorage\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createUpload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUpload(file: File, options: UploadOptions)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/factory.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                UploadOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UploadRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { UploadModel } from \"../data/upload.model\";\nimport { UploadRequest, UploadOptions } from \"../libs/upload/src/upload.request\";\nimport { UploadStorage } from \"../libs/upload/src/upload.storage\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FileUploadFactory {\n\n    public constructor(\n        private httpClient: HttpClient\n    ) {}\n\n    public createUpload(file: File, options: UploadOptions): UploadRequest {\n        const model = new UploadModel(file);\n        return new UploadRequest(this.httpClient, model, options);\n    }\n\n    public createStore(): UploadStorage {\n        return new UploadStorage();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter, AfterViewInit } from \"@angular/core\";\nimport { UploadRequest, UploadControl } from \"../../upload\";\nimport { UploadModel } from \"../../../data/upload.model\";\nimport { UploadData } from \"../../../data/api\";\nimport {  Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport * as UploadAPI from \"../../../data/api/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements AfterViewInit, OnDestroy {\n\n    public uploadState = UploadAPI.UploadState;\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: UploadRequest;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private destroyed: Subject = new Subject();\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: UploadRequest) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: this.fileUpload.data,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void {\n        this.fileUpload.change\n            .pipe(\n                takeUntil(this.destroyed)\n            )\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.destroyed.next(true);\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"@lib/data/api/validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/index.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/index.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface IDataNode {\n    [key: string]: any;\n}\n\nexport * from \"./validation\";\nexport * from \"./upload\";\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileBrowserDirective\n\nFileBrowserDirective\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileBrowserDirective->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nStateToStringPipe\n\nStateToStringPipe\n\nNgxFileUploadModule -->\n\nStateToStringPipe->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileBrowserDirective \n\nFileBrowserDirective \n\nFileBrowserDirective  -->\n\nNgxFileUploadModule->FileBrowserDirective \n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nStateToStringPipe \n\nStateToStringPipe \n\nStateToStringPipe  -->\n\nNgxFileUploadModule->StateToStringPipe \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FileBrowserDirective\n                        \n                        \n                            FileSizePipe\n                        \n                        \n                            StateToStringPipe\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileBrowserDirective\n                        \n                        \n                            FileSizePipe\n                        \n                        \n                            StateToStringPipe\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { UploadViewComponent, FileBrowserDirective, UploadItemComponent } from \"./libs/ui\";\nimport { FileSizePipe } from \"./utils/file-size.pipe\";\nimport { StateToStringPipe } from \"./utils/state-to-string.pipe\";\n\n@NgModule({\n    declarations: [\n        FileBrowserDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        StateToStringPipe,\n        FileSizePipe\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n    ],\n    exports: [\n        FileBrowserDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        StateToStringPipe,\n        FileSizePipe\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationErrors } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueueState.html":{"url":"interfaces/QueueState.html","title":"interface - QueueState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QueueState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pending\n                                \n                                \n                                        processing\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pending\n                                    \n                                \n                                \n                                    \n                                        pending:         UploadRequest[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadRequest[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        processing\n                                    \n                                \n                                \n                                    \n                                        processing:         UploadRequest[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadRequest[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UploadState } from \"../../../data/api\";\nimport { UploadRequest } from \"./upload.request\";\nimport { Observable, of, merge, BehaviorSubject } from \"rxjs\";\nimport { filter, take, map, takeUntil, tap, buffer, debounceTime } from \"rxjs/operators\";\n\nexport interface QueueState {\n\n    pending: UploadRequest[];\n\n    processing: UploadRequest[];\n}\n\nexport class UploadQueue {\n\n    private active = 0;\n\n    private queuedUploads: UploadRequest[] = [];\n\n    private progressingUploads: UploadRequest[] = [];\n\n    private concurrentCount = -1;\n\n    /**\n     * subscribe to get notified queue has been changed\n     */\n    private queueChange$: BehaviorSubject;\n\n    public set concurrent(count: number) {\n        this.concurrentCount = count;\n    }\n\n    public get change(): Observable {\n        const queueChanged  = this.queueChange$.asObservable();\n        return queueChanged\n            .pipe(\n                buffer(queueChanged.pipe(debounceTime(10))),\n                map((bufferedChanges) => bufferedChanges.pop()),\n            );\n    }\n\n    public constructor() {\n        this.queueChange$ = new BehaviorSubject({\n            pending: [], processing: []\n        });\n    }\n\n    public register(upload: UploadRequest) {\n        this.registerUploadEvents(upload);\n        upload.beforeStart(() => this.createBeforeStartHook(upload));\n    }\n\n    public destroy() {\n        this.queueChange$.complete();\n\n        this.queueChange$       = null;\n        this.queuedUploads      = null;\n        this.progressingUploads = null;\n        this.active             = null;\n    }\n\n    /**\n     * create before start hook, if any upload wants to start we have to check\n     *\n     * 1. upload is registered in queue\n     * 2. upload is currently not queued\n     *\n     * otherwise this will return false and prevent upload to start,\n     * after that upload will pushed to queue and start again if queue has space\n     */\n    private createBeforeStartHook(upload: UploadRequest): Observable {\n        return of(true).pipe(\n            map(() => this.active  {\n                if (!isStartAble) {\n                    upload.state = UploadState.PENDING;\n                    upload.update();\n                    this.queuedUploads.push(upload);\n                    this.notifyObserver();\n                }\n            })\n        );\n    }\n\n    /**\n     * register to upload change\n     */\n    private registerUploadEvents(request: UploadRequest) {\n        const change$ = request.change;\n\n        /** register for changes which make request complete */\n        const uploadComplete$ = change$\n            .pipe(filter(() => request.isCompleted()), take(1));\n\n        change$\n            /**\n             * take all until upload was completed (uploaded with success or canceled)\n             * we dont remove sub if upload completed with an error since the upload request\n             * can be repeated, so we dont lose our subscription on this.\n             *\n             * canceled uploads or upload completed with success couldn't repeat they are\n             * simply done\n             */\n            .pipe(takeUntil(merge(request.destroyed, uploadComplete$)))\n            .subscribe({\n                next: ()     => this.onUploadStateChange(request),\n                complete: () => this.requestCompleted(request)\n            });\n    }\n\n    private onUploadStateChange(req: UploadRequest) {\n        switch (req.state) {\n\n            case UploadState.START:\n                this.active += 1;\n                this.progressingUploads.push(req);\n                this.notifyObserver();\n                break;\n\n            /** request has been completed but with an error */\n            case UploadState.COMPLETED:\n                this.requestCompleted(req);\n                break;\n        }\n    }\n\n    private requestCompleted(request: UploadRequest) {\n        let updateQueue = true;\n\n        switch (request.state) {\n            /**\n             * request gets destroyed but was idle\n             * in this case the upload is not in progressing uploads nor\n             * in queued uploads\n             */\n            case UploadState.IDLE:\n                updateQueue = false;\n                break;\n\n            default:\n                this.isInUploadQueue(request)\n                    ? this.removeFromQueue(request)\n                    : this.startNextInQueue(request);\n        }\n\n        if (updateQueue) {\n            this.notifyObserver();\n        }\n    }\n\n    /**\n     * checks upload is in queue\n     */\n    private  isInUploadQueue(request: UploadRequest): boolean {\n        return this.queuedUploads.indexOf(request) > -1;\n    }\n\n    /**\n     * remove upload request from queued uploads\n     */\n    private removeFromQueue(request) {\n        this.queuedUploads = this.queuedUploads.filter(upload =>  upload !== request);\n    }\n\n    /**\n     * try to start next upload in queue, returns false if no further uploads\n     * exists\n     */\n    private startNextInQueue(request: UploadRequest) {\n\n        this.progressingUploads = this.progressingUploads.filter((upload) => upload !== request);\n\n        this.active = Math.max(this.active - 1, 0);\n        if (this.queuedUploads.length > 0) {\n            const nextUpload = this.queuedUploads.shift();\n            nextUpload.start();\n        }\n    }\n\n    private notifyObserver() {\n        this.queueChange$.next({\n            pending:    [...this.queuedUploads],\n            processing: [...this.progressingUploads]\n        });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StateToStringPipe.html":{"url":"pipes/StateToStringPipe.html","title":"pipe - StateToStringPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StateToStringPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/state-to-string.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stateToString\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(state: UploadState)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/state-to-string.pipe.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                UploadState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\nimport { UploadState } from \"../data/api\";\n\n@Pipe({\n    name: \"stateToString\"\n})\nexport class StateToStringPipe implements PipeTransform {\n\n    transform(state: UploadState): string {\n\n        switch (state) {\n            case UploadState.IDLE:      return \"idle\";\n            case UploadState.PENDING:   return \"pending\";\n            case UploadState.PROGRESS:  return \"progress\";\n            case UploadState.COMPLETED: return \"completed\";\n            case UploadState.START:     return \"start\";\n            case UploadState.INVALID:   return \"invalid\";\n            default:                    return \"canceled\";\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Upload.html":{"url":"interfaces/Upload.html","title":"interface - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        change\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                                \n                                    hasError\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    retry\n                                \n                                \n                                    start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:101\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:107\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \nisInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:112\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \nretry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:96\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:90\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change\n                                    \n                                \n                                \n                                    \n                                        change:         Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Observable\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns observable which notify if file upload state\nhas been changed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    get upload data informations\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: UploadRequest)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        UploadRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:33\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:41\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.control.ts:49\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     */\n    public constructor(\n        private fileUpload: UploadRequest\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    public remove(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.destroy();\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hasError\n                                \n                                \n                                        isInvalid\n                                \n                                \n                                        isPending\n                                \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        requestId\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns true if upload request was finished with an error\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isInvalid\n                                    \n                                \n                                \n                                    \n                                        isInvalid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns true if upload is invalid\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPending\n                                    \n                                \n                                \n                                    \n                                        isPending:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload is marked for start but still in upload queue\nand not running currently\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    name of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    progress in percent\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestId\n                                    \n                                \n                                \n                                    \n                                        requestId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload request id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    upload finishes request with a succes, holds success informations\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    total size of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    current state of upload\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    uploaded size\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    contains validation results\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadItemComponent.html":{"url":"components/UploadItemComponent.html","title":"component - UploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./upload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                upload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                            \n                                    Public\n                                uploadState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                completed\n                            \n                            \n                                stateChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:65\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:78\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:53\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        stateChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:65\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:89\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:121\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:35\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:30\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploadState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : UploadAPI.UploadState\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:53\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-item.component.ts:78\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter, AfterViewInit } from \"@angular/core\";\nimport { UploadRequest, UploadControl } from \"../../upload\";\nimport { UploadModel } from \"../../../data/upload.model\";\nimport { UploadData } from \"../../../data/api\";\nimport {  Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport * as UploadAPI from \"../../../data/api/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements AfterViewInit, OnDestroy {\n\n    public uploadState = UploadAPI.UploadState;\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: UploadRequest;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private destroyed: Subject = new Subject();\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: UploadRequest) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: this.fileUpload.data,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void {\n        this.fileUpload.change\n            .pipe(\n                takeUntil(this.destroyed)\n            )\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.destroyed.next(true);\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n                {{upload.name}}\n            \n\n            \n            \n                \n            \n        \n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | fileSize}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n                \n                    \n                        {{error}}\n                    \n                \n\n                \n                    \n                        {{upload.response.body.message}}\n                    \n                    \n                        {{upload.name}} uploaded\n                    \n                \n            \n\n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./upload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../../../assets/fonts' !default;\n\n@import '../../../assets//scss/variables';\n@import '../../../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n\n        display: flex;\n        justify-content: space-between;\n        border-bottom: 1px solid darken(#FDFDFD, 8);\n        padding: 0 0 .25rem;\n        margin: 0 0 .25rem;\n\n        .title {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            overflow: hidden;\n        }\n\n        .action-remove {\n            padding: 0;\n            margin: 0;\n            border: 0;\n            background: transparent;\n            align-self: center;\n            line-height: .9rem;\n            font-size: .9rem;\n            color: map-get($colors, dark);\n        }\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n\n        .upload-item--state {\n            font-size: .85rem;\n        }\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: 1rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n            transition: width .25s linear;\n        }\n    }\n\n    .upload-item--actions {\n\n        display: flex;\n\n        button {\n            display: flex;\n            padding: 0;\n            color: map-get($colors, dark);\n            cursor: pointer;\n            outline: none;\n            background: transparent;\n            line-height: 1rem;\n            border: 0;\n            font-size: 1rem;\n            margin: 0 .5rem 0 0;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                color: lighten(map-get($colors, dark), 50%);\n                cursor: not-allowed;\n            }\n        }\n\n        .item-action--reload, \n        .item-action--cancel {\n            font-size: .9rem;\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n            text-align: left;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{upload.name}}                                                                                                                                                                                                {{upload.size | fileSize}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                                                    {{error}}                                                                                                {{upload.response.body.message}}                                                                {{upload.name}} uploaded                                                            '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'FileBrowserDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.model.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    isPending\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    requestId\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                                \n                                    isUploadAble\n                                \n                                \n                                    hasError\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/upload.model.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/upload.model.ts:147\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:35\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:42\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:49\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:56\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:70\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:63\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isPending\n                    \n                \n\n                \n                    \n                        getisPending()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:78\n                                \n                            \n\n                \n                    \n                        setisPending(pending: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:74\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            pending\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isInvalid\n                    \n                \n\n                \n                    \n                        getisInvalid()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:82\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        requestId\n                    \n                \n\n                \n                    \n                        getrequestId()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:90\n                                \n                            \n\n                \n                    \n                        setrequestId(id: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:86\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            id\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:104\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:97\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:118\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:111\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:126\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:122\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isUploadAble\n                    \n                \n\n                \n                    \n                        getisUploadAble()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hasError\n                    \n                \n\n                \n                    \n                        gethasError()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:139\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"./api/validation\";\nimport { UploadState, UploadResponse, UploadData } from \"./api/upload\";\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.IDLE;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    private uploadInvalid = false;\n\n    private uploadPending = false;\n\n    private uploadRequestId = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    public set isPending(pending: boolean) {\n        this.uploadPending = pending;\n    }\n\n    public get isPending(): boolean {\n        return this.uploadPending;\n    }\n\n    public get isInvalid(): boolean {\n        return this.state === UploadState.INVALID;\n    }\n\n    public set requestId(id: string) {\n        this.uploadRequestId = id;\n    }\n\n    public get requestId(): string {\n        return this.uploadRequestId;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    public get isUploadAble(): boolean {\n        return true;\n    }\n\n    public get hasError() {\n        return this.uploadResponse && this.uploadResponse.errors ? true : false;\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            },\n            hasError:  this.hasError,\n            isInvalid: this.isInvalid,\n            isPending: this.uploadPending,\n            requestId: this.requestId\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.request.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable, forkJoin } from \"rxjs\";\nimport { takeUntil, filter, switchMap, map } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload, Validator, ValidationFn} from \"../../../data/api\";\nimport { UploadModel } from \"../../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class UploadRequest implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    /**\n     * upload stream gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    private hooks: {beforeStart: Array Observable>} = { beforeStart: [] };\n\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    public get destroyed(): Observable {\n        return this.destroyed$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    public get requestId(): string {\n        return this.upload.requestId;\n    }\n\n    public set state(state: UploadState) {\n        this.upload.state = state;\n    }\n\n    public get state() {\n        return this.upload.state;\n    }\n\n    /**\n     * create UploadRequest service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        const reqId = Array.from({length: 4}, () => Math.random().toString(32).slice(2));\n        this.upload.requestId = reqId.join(\"_\");\n\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    public beforeStart(hook: () => Observable) {\n        this.hooks.beforeStart = [\n            ...this.hooks.beforeStart,\n            hook\n        ];\n    }\n\n    public update() {\n        this.notifyObservers();\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        if (!this.isCompleted(true) && !this.upload.isInvalid) {\n            this.upload.state = UploadState.CANCELED;\n            this.cancel$.next(true);\n            this.notifyObservers();\n        }\n    }\n\n    public destroy() {\n        this.cancel$.next(true);\n        this.destroyed$.next(true);\n\n        this.cancel$.complete();\n        this.upload$.complete();\n\n        this.hooks      = null;\n        this.upload$    = null;\n        this.upload     = null;\n        this.cancel$    = null;\n    }\n\n    public isCompleted(ignoreError = false): boolean {\n        let isCompleted = this.isRequestCompleted();\n        isCompleted = isCompleted && (ignoreError ? true : !this.hasError());\n        isCompleted = isCompleted || this.state === UploadState.CANCELED;\n        return isCompleted;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isInvalid;\n    }\n\n    public isProgress(): boolean {\n        return this.upload.state === UploadState.PROGRESS || this.upload.state === UploadState.START;\n    }\n\n    public isPending(): boolean {\n        return this.upload.state === UploadState.PENDING;\n    }\n\n    public isIdle(): boolean {\n        return this.upload.state === UploadState.IDLE;\n    }\n\n    public isRequestCompleted() {\n        return this.upload.state === UploadState.COMPLETED;\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.state === UploadState.COMPLETED && this.upload.hasError) {\n            this.resetUpload();\n            this.start();\n        }\n    }\n\n    /**\n     * start file upload\n     */\n    public start() {\n\n        if (!this.isIdle() && !this.isPending()) {\n            return;\n        }\n\n        /** call beforeStart hooks, if one returns false upload will not started */\n        forkJoin(this.hooks.beforeStart.map((hook) => hook()))\n            .pipe(\n                map((result: boolean[]) => result.reduce((prev, cur) => prev && cur, true)),\n                filter(result => result),\n                switchMap(() => this.uploadFile()),\n            )\n            .subscribe({\n                next:  (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n    }\n\n    /**\n     * validate upload\n     */\n    public validate(validator: Validator | ValidationFn) {\n        const result = \"validate\" in validator\n            ? validator.validate(this.upload.file)\n            : validator(this.upload.file);\n\n        if (result !== null) {\n            this.upload.state = UploadState.INVALID;\n        }\n        this.upload.validationErrors = result;\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.hasError;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        }).pipe(takeUntil(this.cancel$));\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * request responds with an error\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        /** not completed since we could retry */\n        this.upload.state    = UploadState.COMPLETED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent:           this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response:       this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * handle http progress event\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload completed with 20x\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.response = uploadResponse;\n        this.upload.state    = UploadState.COMPLETED;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n\n    /**\n     * reset upload\n     */\n    private resetUpload() {\n        this.upload.state     = UploadState.IDLE;\n        this.upload.response  = {success: false, body: null, errors: null};\n        this.upload.uploaded  = 0;\n        this.upload.isPending = false;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadQueue.html":{"url":"classes/UploadQueue.html","title":"class - UploadQueue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadQueue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    concurrent\n                                \n                                \n                                    change\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:39\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(upload: UploadRequest)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        concurrent\n                    \n                \n\n\n                \n                    \n                        setconcurrent(count: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:28\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            count\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.queue.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UploadState } from \"../../../data/api\";\nimport { UploadRequest } from \"./upload.request\";\nimport { Observable, of, merge, BehaviorSubject } from \"rxjs\";\nimport { filter, take, map, takeUntil, tap, buffer, debounceTime } from \"rxjs/operators\";\n\nexport interface QueueState {\n\n    pending: UploadRequest[];\n\n    processing: UploadRequest[];\n}\n\nexport class UploadQueue {\n\n    private active = 0;\n\n    private queuedUploads: UploadRequest[] = [];\n\n    private progressingUploads: UploadRequest[] = [];\n\n    private concurrentCount = -1;\n\n    /**\n     * subscribe to get notified queue has been changed\n     */\n    private queueChange$: BehaviorSubject;\n\n    public set concurrent(count: number) {\n        this.concurrentCount = count;\n    }\n\n    public get change(): Observable {\n        const queueChanged  = this.queueChange$.asObservable();\n        return queueChanged\n            .pipe(\n                buffer(queueChanged.pipe(debounceTime(10))),\n                map((bufferedChanges) => bufferedChanges.pop()),\n            );\n    }\n\n    public constructor() {\n        this.queueChange$ = new BehaviorSubject({\n            pending: [], processing: []\n        });\n    }\n\n    public register(upload: UploadRequest) {\n        this.registerUploadEvents(upload);\n        upload.beforeStart(() => this.createBeforeStartHook(upload));\n    }\n\n    public destroy() {\n        this.queueChange$.complete();\n\n        this.queueChange$       = null;\n        this.queuedUploads      = null;\n        this.progressingUploads = null;\n        this.active             = null;\n    }\n\n    /**\n     * create before start hook, if any upload wants to start we have to check\n     *\n     * 1. upload is registered in queue\n     * 2. upload is currently not queued\n     *\n     * otherwise this will return false and prevent upload to start,\n     * after that upload will pushed to queue and start again if queue has space\n     */\n    private createBeforeStartHook(upload: UploadRequest): Observable {\n        return of(true).pipe(\n            map(() => this.active  {\n                if (!isStartAble) {\n                    upload.state = UploadState.PENDING;\n                    upload.update();\n                    this.queuedUploads.push(upload);\n                    this.notifyObserver();\n                }\n            })\n        );\n    }\n\n    /**\n     * register to upload change\n     */\n    private registerUploadEvents(request: UploadRequest) {\n        const change$ = request.change;\n\n        /** register for changes which make request complete */\n        const uploadComplete$ = change$\n            .pipe(filter(() => request.isCompleted()), take(1));\n\n        change$\n            /**\n             * take all until upload was completed (uploaded with success or canceled)\n             * we dont remove sub if upload completed with an error since the upload request\n             * can be repeated, so we dont lose our subscription on this.\n             *\n             * canceled uploads or upload completed with success couldn't repeat they are\n             * simply done\n             */\n            .pipe(takeUntil(merge(request.destroyed, uploadComplete$)))\n            .subscribe({\n                next: ()     => this.onUploadStateChange(request),\n                complete: () => this.requestCompleted(request)\n            });\n    }\n\n    private onUploadStateChange(req: UploadRequest) {\n        switch (req.state) {\n\n            case UploadState.START:\n                this.active += 1;\n                this.progressingUploads.push(req);\n                this.notifyObserver();\n                break;\n\n            /** request has been completed but with an error */\n            case UploadState.COMPLETED:\n                this.requestCompleted(req);\n                break;\n        }\n    }\n\n    private requestCompleted(request: UploadRequest) {\n        let updateQueue = true;\n\n        switch (request.state) {\n            /**\n             * request gets destroyed but was idle\n             * in this case the upload is not in progressing uploads nor\n             * in queued uploads\n             */\n            case UploadState.IDLE:\n                updateQueue = false;\n                break;\n\n            default:\n                this.isInUploadQueue(request)\n                    ? this.removeFromQueue(request)\n                    : this.startNextInQueue(request);\n        }\n\n        if (updateQueue) {\n            this.notifyObserver();\n        }\n    }\n\n    /**\n     * checks upload is in queue\n     */\n    private  isInUploadQueue(request: UploadRequest): boolean {\n        return this.queuedUploads.indexOf(request) > -1;\n    }\n\n    /**\n     * remove upload request from queued uploads\n     */\n    private removeFromQueue(request) {\n        this.queuedUploads = this.queuedUploads.filter(upload =>  upload !== request);\n    }\n\n    /**\n     * try to start next upload in queue, returns false if no further uploads\n     * exists\n     */\n    private startNextInQueue(request: UploadRequest) {\n\n        this.progressingUploads = this.progressingUploads.filter((upload) => upload !== request);\n\n        this.active = Math.max(this.active - 1, 0);\n        if (this.queuedUploads.length > 0) {\n            const nextUpload = this.queuedUploads.shift();\n            nextUpload.start();\n        }\n    }\n\n    private notifyObserver() {\n        this.queueChange$.next({\n            pending:    [...this.queuedUploads],\n            processing: [...this.progressingUploads]\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadRequest.html":{"url":"classes/UploadRequest.html","title":"class - UploadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.request.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n            \n                Implements\n            \n            \n                            Upload\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                beforeStart\n                            \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isCompleted\n                            \n                            \n                                    Public\n                                isIdle\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                isPending\n                            \n                            \n                                    Public\n                                isProgress\n                            \n                            \n                                    Public\n                                isRequestCompleted\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                                \n                                    destroyed\n                                \n                                \n                                    data\n                                \n                                \n                                    requestId\n                                \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:84\n                            \n                        \n\n                \n                    \n                            create UploadRequest service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            beforeStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    beforeStart(hook: () => void)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    hook\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:115\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:217\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isCompleted(ignoreError)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    ignoreError\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isIdle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isIdle()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:146\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isPending\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isPending()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isProgress()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isRequestCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isRequestCompleted()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:170\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:180\n                \n            \n\n\n            \n                \n                    start file upload\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(validator: Validator | ValidationFn)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:202\n                \n            \n\n\n            \n                \n                    validate upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        destroyed\n                    \n                \n\n                \n                    \n                        getdestroyed()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:66\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:70\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        requestId\n                    \n                \n\n                \n                    \n                        getrequestId()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:82\n                                \n                            \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.request.ts:78\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable, forkJoin } from \"rxjs\";\nimport { takeUntil, filter, switchMap, map } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload, Validator, ValidationFn} from \"../../../data/api\";\nimport { UploadModel } from \"../../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class UploadRequest implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    /**\n     * upload stream gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    private hooks: {beforeStart: Array Observable>} = { beforeStart: [] };\n\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    public get destroyed(): Observable {\n        return this.destroyed$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    public get requestId(): string {\n        return this.upload.requestId;\n    }\n\n    public set state(state: UploadState) {\n        this.upload.state = state;\n    }\n\n    public get state() {\n        return this.upload.state;\n    }\n\n    /**\n     * create UploadRequest service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        const reqId = Array.from({length: 4}, () => Math.random().toString(32).slice(2));\n        this.upload.requestId = reqId.join(\"_\");\n\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    public beforeStart(hook: () => Observable) {\n        this.hooks.beforeStart = [\n            ...this.hooks.beforeStart,\n            hook\n        ];\n    }\n\n    public update() {\n        this.notifyObservers();\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        if (!this.isCompleted(true) && !this.upload.isInvalid) {\n            this.upload.state = UploadState.CANCELED;\n            this.cancel$.next(true);\n            this.notifyObservers();\n        }\n    }\n\n    public destroy() {\n        this.cancel$.next(true);\n        this.destroyed$.next(true);\n\n        this.cancel$.complete();\n        this.upload$.complete();\n\n        this.hooks      = null;\n        this.upload$    = null;\n        this.upload     = null;\n        this.cancel$    = null;\n    }\n\n    public isCompleted(ignoreError = false): boolean {\n        let isCompleted = this.isRequestCompleted();\n        isCompleted = isCompleted && (ignoreError ? true : !this.hasError());\n        isCompleted = isCompleted || this.state === UploadState.CANCELED;\n        return isCompleted;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isInvalid;\n    }\n\n    public isProgress(): boolean {\n        return this.upload.state === UploadState.PROGRESS || this.upload.state === UploadState.START;\n    }\n\n    public isPending(): boolean {\n        return this.upload.state === UploadState.PENDING;\n    }\n\n    public isIdle(): boolean {\n        return this.upload.state === UploadState.IDLE;\n    }\n\n    public isRequestCompleted() {\n        return this.upload.state === UploadState.COMPLETED;\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.state === UploadState.COMPLETED && this.upload.hasError) {\n            this.resetUpload();\n            this.start();\n        }\n    }\n\n    /**\n     * start file upload\n     */\n    public start() {\n\n        if (!this.isIdle() && !this.isPending()) {\n            return;\n        }\n\n        /** call beforeStart hooks, if one returns false upload will not started */\n        forkJoin(this.hooks.beforeStart.map((hook) => hook()))\n            .pipe(\n                map((result: boolean[]) => result.reduce((prev, cur) => prev && cur, true)),\n                filter(result => result),\n                switchMap(() => this.uploadFile()),\n            )\n            .subscribe({\n                next:  (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n    }\n\n    /**\n     * validate upload\n     */\n    public validate(validator: Validator | ValidationFn) {\n        const result = \"validate\" in validator\n            ? validator.validate(this.upload.file)\n            : validator(this.upload.file);\n\n        if (result !== null) {\n            this.upload.state = UploadState.INVALID;\n        }\n        this.upload.validationErrors = result;\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.hasError;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        }).pipe(takeUntil(this.cancel$));\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * request responds with an error\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        /** not completed since we could retry */\n        this.upload.state    = UploadState.COMPLETED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent:           this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response:       this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * handle http progress event\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload completed with 20x\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.response = uploadResponse;\n        this.upload.state    = UploadState.COMPLETED;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n\n    /**\n     * reset upload\n     */\n    private resetUpload() {\n        this.upload.state     = UploadState.IDLE;\n        this.upload.response  = {success: false, body: null, errors: null};\n        this.upload.uploaded  = 0;\n        this.upload.isPending = false;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadStorage.html":{"url":"classes/UploadStorage.html","title":"class - UploadStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n        \n\n            \n                Description\n            \n            \n                could renamed to upload manager\nmaybe we change this design to redux ... dont know\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                change\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                purge\n                            \n                            \n                                    Public\n                                remove\n                            \n                            \n                                    Public\n                                removeInvalid\n                            \n                            \n                                    Public\n                                startAll\n                            \n                            \n                                    Public\n                                stopAll\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    queueChange\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: UploadStorageConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        UploadStorageConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(upload: UploadRequest)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:64\n                \n            \n\n\n            \n                \n                    add new upload to store\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            change\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    change()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:48\n                \n            \n\n\n            \n                \n                    register to get notified something on store change, add and remove\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:85\n                \n            \n\n\n            \n                \n                    destroy upload storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            purge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    purge()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:118\n                \n            \n\n\n            \n                \n                    remove all uploads which has been invalid\ncanceled or upload has been completed even it is has an error\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(upload: UploadRequest | string)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:108\n                \n            \n\n\n            \n                \n                    remove upload from store\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadRequest | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:147\n                \n            \n\n\n            \n                \n                    remove invalidated uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            startAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    startAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:129\n                \n            \n\n\n            \n                \n                    starts all queued uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stopAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stopAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:140\n                \n            \n\n\n            \n                \n                    stops all active uploads\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        queueChange\n                    \n                \n\n                \n                    \n                        getqueueChange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/upload/src/upload.storage.ts:57\n                                \n                            \n                    \n                        \n                                get queue change observable to get notified something happens on queue.\nthis will submit if pending uploads changes or new uploads will processing\nnot if any upload has been added\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { buffer, debounceTime, tap } from \"rxjs/operators\";\nimport { UploadQueue, QueueState } from \"./upload.queue\";\nimport { take } from \"rxjs/internal/operators/take\";\n\nexport interface UploadStorageConfig {\n    concurrentUploads?: number;\n\n    /** not implemented yet */\n    removeCompletedUploads?: boolean;\n}\n\nconst defaultStoreConfig: UploadStorageConfig = {\n    concurrentUploads: 5\n};\n\n/**\n * could renamed to upload manager\n * maybe we change this design to redux ... dont know\n */\nexport class UploadStorage {\n\n    private change$: BehaviorSubject;\n    private uploads: Map = new Map();\n    private uploadQueue: UploadQueue;\n\n    private storeConfig: UploadStorageConfig;\n\n    /**\n     * submits if an upload gets destroyed\n     */\n    private uploadDestroy$: Subject = new Subject();\n\n    public constructor(config: UploadStorageConfig = {}) {\n        this.change$     = new BehaviorSubject([]);\n        this.uploadQueue = new UploadQueue();\n\n        this.storeConfig = {...defaultStoreConfig, ...config};\n        this.uploadQueue.concurrent = this.storeConfig.concurrentUploads;\n\n        this.registerUploadDestroyEvent();\n    }\n\n    /**\n     * register to get notified something on store change, add and remove\n     */\n    public change(): Observable {\n        return this.change$.asObservable();\n    }\n\n    /**\n     * get queue change observable to get notified something happens on queue.\n     * this will submit if pending uploads changes or new uploads will processing\n     * not if any upload has been added\n     */\n    public get queueChange(): Observable {\n        return this.uploadQueue.change;\n    }\n\n    /**\n     * add new upload to store\n     */\n    public add(upload: UploadRequest) {\n        this.uploads.set(upload.requestId, upload);\n\n        if (!upload.isInvalid()) {\n            this.uploadQueue.register(upload);\n        }\n\n        /**\n         * register to upload destroy, this can happens on any place\n         * not only in store. And pipe to interal subject we are subscribed\n         */\n        upload.destroyed\n            .pipe(take(1))\n            .subscribe(() => this.uploadDestroy$.next(upload));\n\n        this.notifyObserver();\n    }\n\n    /**\n     * destroy upload storage\n     */\n    public destroy() {\n\n        /** destroy all uploads */\n        this.uploads.forEach(upload => (upload.destroy()));\n\n        /** destroy upload queue */\n        this.uploadQueue.destroy();\n        this.uploadQueue = null;\n\n        /** destroy change stream */\n        this.change$.complete();\n        this.change$ = null;\n\n        /** destroy upload destroy stream */\n        this.uploadDestroy$.complete();\n        this.uploadDestroy$ = null;\n\n        this.uploads = null;\n    }\n\n    /**\n     * remove upload from store\n     */\n    public remove(upload: UploadRequest | string) {\n        const id = upload instanceof UploadRequest ? upload.requestId : upload;\n        const request = this.uploads.get(id);\n        request.destroy();\n    }\n\n    /**\n     * remove all uploads which has been invalid\n     * canceled or upload has been completed even it is has an error\n     */\n    public purge() {\n        this.uploads.forEach((upload) => {\n            if (upload.isCompleted() || upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n    }\n\n    /**\n     * starts all queued uploads\n     */\n    public startAll() {\n        this.uploads.forEach((upload) => {\n            if (upload.isIdle()) {\n                upload.start();\n            }\n        });\n    }\n\n    /**\n     * stops all active uploads\n     */\n    public stopAll() {\n        this.uploads.forEach(upload => (upload.cancel(), upload.destroy()));\n    }\n\n    /**\n     * remove invalidated uploads\n     */\n    public removeInvalid() {\n        this.uploads.forEach((upload) => {\n            if (upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n        this.notifyObserver();\n    }\n\n    /**\n     * registers to uploads destroy event, since multiple uploads\n     * can destroyed in short amount of time we buffer them at least for 10ms.\n     * and then remove them from list and notify observer\n     */\n    private registerUploadDestroyEvent() {\n        this.uploadDestroy$.pipe(\n            tap((request: UploadRequest) => this.uploads.delete(request.requestId)),\n            buffer(this.uploadDestroy$.pipe(debounceTime(10))),\n        ).subscribe({\n            next: () => this.notifyObserver()\n        });\n    }\n\n    /**\n     * notify observer store data has been changed\n     */\n    private notifyObserver() {\n        this.change$.next(\n            Array.from(this.uploads.values())\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadStorageConfig.html":{"url":"interfaces/UploadStorageConfig.html","title":"interface - UploadStorageConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadStorageConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        concurrentUploads\n                                \n                                \n                                            Optional\n                                        removeCompletedUploads\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        concurrentUploads\n                                    \n                                \n                                \n                                    \n                                        concurrentUploads:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeCompletedUploads\n                                    \n                                \n                                \n                                    \n                                        removeCompletedUploads:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    not implemented yet \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UploadRequest } from \"./upload.request\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { buffer, debounceTime, tap } from \"rxjs/operators\";\nimport { UploadQueue, QueueState } from \"./upload.queue\";\nimport { take } from \"rxjs/internal/operators/take\";\n\nexport interface UploadStorageConfig {\n    concurrentUploads?: number;\n\n    /** not implemented yet */\n    removeCompletedUploads?: boolean;\n}\n\nconst defaultStoreConfig: UploadStorageConfig = {\n    concurrentUploads: 5\n};\n\n/**\n * could renamed to upload manager\n * maybe we change this design to redux ... dont know\n */\nexport class UploadStorage {\n\n    private change$: BehaviorSubject;\n    private uploads: Map = new Map();\n    private uploadQueue: UploadQueue;\n\n    private storeConfig: UploadStorageConfig;\n\n    /**\n     * submits if an upload gets destroyed\n     */\n    private uploadDestroy$: Subject = new Subject();\n\n    public constructor(config: UploadStorageConfig = {}) {\n        this.change$     = new BehaviorSubject([]);\n        this.uploadQueue = new UploadQueue();\n\n        this.storeConfig = {...defaultStoreConfig, ...config};\n        this.uploadQueue.concurrent = this.storeConfig.concurrentUploads;\n\n        this.registerUploadDestroyEvent();\n    }\n\n    /**\n     * register to get notified something on store change, add and remove\n     */\n    public change(): Observable {\n        return this.change$.asObservable();\n    }\n\n    /**\n     * get queue change observable to get notified something happens on queue.\n     * this will submit if pending uploads changes or new uploads will processing\n     * not if any upload has been added\n     */\n    public get queueChange(): Observable {\n        return this.uploadQueue.change;\n    }\n\n    /**\n     * add new upload to store\n     */\n    public add(upload: UploadRequest) {\n        this.uploads.set(upload.requestId, upload);\n\n        if (!upload.isInvalid()) {\n            this.uploadQueue.register(upload);\n        }\n\n        /**\n         * register to upload destroy, this can happens on any place\n         * not only in store. And pipe to interal subject we are subscribed\n         */\n        upload.destroyed\n            .pipe(take(1))\n            .subscribe(() => this.uploadDestroy$.next(upload));\n\n        this.notifyObserver();\n    }\n\n    /**\n     * destroy upload storage\n     */\n    public destroy() {\n\n        /** destroy all uploads */\n        this.uploads.forEach(upload => (upload.destroy()));\n\n        /** destroy upload queue */\n        this.uploadQueue.destroy();\n        this.uploadQueue = null;\n\n        /** destroy change stream */\n        this.change$.complete();\n        this.change$ = null;\n\n        /** destroy upload destroy stream */\n        this.uploadDestroy$.complete();\n        this.uploadDestroy$ = null;\n\n        this.uploads = null;\n    }\n\n    /**\n     * remove upload from store\n     */\n    public remove(upload: UploadRequest | string) {\n        const id = upload instanceof UploadRequest ? upload.requestId : upload;\n        const request = this.uploads.get(id);\n        request.destroy();\n    }\n\n    /**\n     * remove all uploads which has been invalid\n     * canceled or upload has been completed even it is has an error\n     */\n    public purge() {\n        this.uploads.forEach((upload) => {\n            if (upload.isCompleted() || upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n    }\n\n    /**\n     * starts all queued uploads\n     */\n    public startAll() {\n        this.uploads.forEach((upload) => {\n            if (upload.isIdle()) {\n                upload.start();\n            }\n        });\n    }\n\n    /**\n     * stops all active uploads\n     */\n    public stopAll() {\n        this.uploads.forEach(upload => (upload.cancel(), upload.destroy()));\n    }\n\n    /**\n     * remove invalidated uploads\n     */\n    public removeInvalid() {\n        this.uploads.forEach((upload) => {\n            if (upload.isInvalid()) {\n                upload.destroy();\n            }\n        });\n        this.notifyObserver();\n    }\n\n    /**\n     * registers to uploads destroy event, since multiple uploads\n     * can destroyed in short amount of time we buffer them at least for 10ms.\n     * and then remove them from list and notify observer\n     */\n    private registerUploadDestroyEvent() {\n        this.uploadDestroy$.pipe(\n            tap((request: UploadRequest) => this.uploads.delete(request.requestId)),\n            buffer(this.uploadDestroy$.pipe(debounceTime(10))),\n        ).subscribe({\n            next: () => this.notifyObserver()\n        });\n    }\n\n    /**\n     * notify observer store data has been changed\n     */\n    private notifyObserver() {\n        this.change$.next(\n            Array.from(this.uploads.values())\n        );\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadStoreConfig.html":{"url":"interfaces/UploadStoreConfig.html","title":"interface - UploadStoreConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadStoreConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        concurrentUploads\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        concurrentUploads\n                                    \n                                \n                                \n                                    \n                                        concurrentUploads:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    max count of uploads at once, set to -1 for no limit\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    INVALID   = 0,\n    CANCELED  = 1,\n    IDLE      = 2,\n    PENDING   = 3,\n    START     = 4,\n    PROGRESS  = 5,\n    COMPLETED = 6\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    /**\n     * name of upload\n     */\n    name: string;\n    /**\n     * progress in percent\n     */\n    progress: number;\n    /**\n     * upload finishes request with a succes, holds success informations\n     */\n    response: UploadResponse;\n    /**\n     * total size of upload\n     */\n    size: number;\n    /**\n     * current state of upload\n     */\n    state: UploadState;\n    /**\n     * uploaded size\n     */\n    uploaded: number;\n    /**\n     * contains validation results\n     */\n    validation: UploadValidation;\n    /**\n     * returns true if upload request was finished with an error\n     */\n    hasError: boolean;\n    /**\n     * returns true if upload is invalid\n     */\n    isInvalid: boolean;\n    /**\n     * upload is marked for start but still in upload queue\n     * and not running currently\n     */\n    isPending: boolean;\n    /**\n     * upload request id\n     */\n    requestId: string;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\nexport interface UploadStoreConfig {\n    /**\n     * max count of uploads at once, set to -1 for no limit\n     */\n    concurrentUploads: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadViewComponent.html":{"url":"components/UploadViewComponent.html","title":"component - UploadViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/libs/ui/src/upload-view.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./upload-view.scss\n            \n\n\n\n            \n                templateUrl\n                upload-view.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                stopAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                storage\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    storage\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:49\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:19\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:31\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:96\n                \n            \n\n\n            \n                \n                    purge uploads, invalid, completed, canceled will be removed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stopAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stopAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:91\n                \n            \n\n\n            \n                \n                    stop all uploads \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:86\n                \n            \n\n\n            \n                \n                    start upload for all files \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UploadRequest[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:43\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        storage\n                    \n                \n\n                \n                    \n                        getstorage()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:39\n                                \n                            \n\n                \n                    \n                        setstorage(storage)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/libs/ui/src/upload-view.ts:34\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            storage\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, TemplateRef, Input, OnInit, OnDestroy } from \"@angular/core\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { UploadRequest, UploadStorage } from \"../../upload\";\nimport { FileUploadItemContext } from \"./upload-item.component\";\n\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./upload-view.scss\"],\n    templateUrl: \"upload-view.html\",\n})\nexport class UploadViewComponent implements OnInit, OnDestroy {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    @Input()\n    public url: string;\n\n    @Input()\n    public useFormData = true;\n\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    @Input()\n    public set storage(storage: UploadStorage) {\n        this.uploadStorage = storage;\n        this.uploadStorageSet = true;\n    }\n\n    public get storage(): UploadStorage {\n        return this.uploadStorage;\n    }\n\n    public uploads: UploadRequest[] = [];\n\n    private destroyed$: Subject;\n\n    private uploadStorage: UploadStorage;\n\n    private uploadStorageSet = false;\n\n    public constructor() {\n        this.destroyed$ = new Subject();\n    }\n\n    public ngOnInit() {\n\n        if (!this.uploadStorage) {\n            this.uploadStorage = new UploadStorage();\n        }\n\n        this.registerStoreEvents();\n    }\n\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n\n        /** we handle our own storage so destroy this one */\n        if (!this.uploadStorageSet) {\n            this.uploadStorage.destroy();\n            this.uploadStorage = null;\n        }\n    }\n\n    /**\n     * register events for store changes\n     */\n    private registerStoreEvents() {\n        this.uploadStorage.change()\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe({\n                next: (uploads) => this.uploads = uploads\n            });\n    }\n\n    /** start upload for all files */\n    public uploadAll() {\n        this.uploadStorage.startAll();\n    }\n\n    /** stop all uploads */\n    public stopAll() {\n        this.uploadStorage.stopAll();\n    }\n\n    /** purge uploads, invalid, completed, canceled will be removed */\n    public cleanAll() {\n        this.uploadStorage.purge();\n    }\n}\n\n    \n\n    \n        \n    upload all\n    remove all\n    Clean Uploads\n\n\n\n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n        \n    \n\n\n\n    \n\n    \n                \n                    ./upload-view.scss\n                \n                $ngx-fileupload-icons--font-path: '../../../assets/fonts' !default;\n\n@import '../../../assets//scss/variables';\n@import '../../../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n        padding: 1rem 0;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    upload all    remove all    Clean Uploads                                    Drag/Drop files here or click                                    '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'FileBrowserDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/libs/validation/src/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/libs/validation/src/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"../../../data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/data/api/index.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            Upload\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadData\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadStoreConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.model.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/file-browser.ts\n            \n            directive\n            FileBrowserDirective\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n            \n            component\n            UploadItemComponent\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/ui/src/upload-view.ts\n            \n            component\n            UploadViewComponent\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.control.ts\n            \n            class\n            UploadControl\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n            \n            class\n            UploadQueue\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.queue.ts\n            \n            interface\n            QueueState\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.request.ts\n            \n            class\n            UploadRequest\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.request.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            class\n            UploadStorage\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            interface\n            UploadStorageConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n            \n            variable\n            defaultStoreConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/libs/validation/src/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/factory.ts\n            \n            injectable\n            FileUploadFactory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/file-size.pipe.ts\n            \n            pipe\n            FileSizePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/state-to-string.pipe.ts\n            \n            pipe\n            StateToStringPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/public-api.ts\n            \n            variable\n            UploadApi\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.11\n        \n            @angular/cdk : ^8.2.3\n        \n            @angular/common : 8.2.11\n        \n            @angular/compiler : 8.2.11\n        \n            @angular/core : 8.2.11\n        \n            @angular/forms : 8.2.11\n        \n            @angular/platform-browser : 8.2.11\n        \n            @angular/platform-browser-dynamic : 8.2.11\n        \n            @angular/router : 8.2.11\n        \n            highlight.js : 9.15.10\n        \n            igniteui-angular : 8.2.3\n        \n            ngx-customscrollbar : ^2.0.1\n        \n            ngx-highlightjs : 3.0.3\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            web-animations-js : ^2.3.2\n        \n            zone.js : ^0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 IDLE\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileBrowserDirective\n\nFileBrowserDirective\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileBrowserDirective->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nStateToStringPipe\n\nStateToStringPipe\n\nNgxFileUploadModule -->\n\nStateToStringPipe->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileBrowserDirective \n\nFileBrowserDirective \n\nFileBrowserDirective  -->\n\nNgxFileUploadModule->FileBrowserDirective \n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nStateToStringPipe \n\nStateToStringPipe \n\nStateToStringPipe  -->\n\nNgxFileUploadModule->StateToStringPipe \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultStoreConfig   (lib/.../upload.storage.ts)\n                        \n                        \n                            UploadApi   (lib/.../public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/libs/upload/src/upload.storage.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultStoreConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UploadStorageConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    concurrentUploads: 5\n}\n                        \n                    \n\n\n            \n        \n\n    lib/public-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UploadApi\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : IUploadApi\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
