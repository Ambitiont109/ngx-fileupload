var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.172,1,1.903]],["body/classes/AndValidator.html",[0,0.188,1,2.759,2,1.246,3,0.283,4,0.283,5,0.43,6,0.19,7,2.736,8,3.63,9,2.934,10,0.387,11,1.246,12,3.743,13,1.872,14,1.132,15,1.671,16,2.943,17,2.486,18,3.298,19,3.131,20,3.131,21,0.551,22,0.037,23,2.486,24,4.515,25,1.186,26,2.736,27,2.763,28,3.306,29,1.49,30,0.894,31,1.354,32,0.956,33,1.594,34,1.186,35,2.36,36,2.736,37,1.027,38,2.736,39,2.08,40,2.36,41,1.872,42,1.653,43,2.736,44,2.36,45,1.134,46,0.032,47,2.736,48,0.588,49,2.36,50,1.669,51,0.283,52,2.248,53,3.63,54,4.923,55,1.856,56,2.36,57,2.736,58,2.736,59,1.032,60,0.699,61,0.026,62,0.019]],["title/pipes/FileSizePipe.html",[63,1.527,64,1.698]],["body/pipes/FileSizePipe.html",[0,0.231,3,0.348,4,0.348,5,0.288,6,0.217,14,1.048,21,0.41,22,0.037,25,0.859,29,1.154,30,0.925,31,1.048,32,0.692,46,0.024,48,0.544,51,0.348,60,0.859,61,0.029,62,0.024,63,2.526,64,2.808,65,4.06,66,4.14,67,4.14,68,3.36,69,2.554,70,3.572,71,3.36,72,5.003,73,2.476,74,4.06,75,2.073,76,1.292,77,5.003,78,1.854,79,1.854,80,1.393,81,4.06,82,3.36,83,4.06,84,4.06,85,4.06,86,4.684,87,4.06,88,4.06,89,5.423,90,1.682,91,5.003,92,4.06,93,4.06,94,4.06]],["title/classes/FileUpload.html",[0,0.172,95,1.14]],["body/classes/FileUpload.html",[0,0.093,2,0.613,3,0.139,4,0.139,5,0.389,6,0.218,10,0.19,13,0.893,14,0.672,15,1.609,21,0.164,22,0.038,23,0.821,25,1.033,29,0.462,30,0.634,31,0.42,32,0.854,34,0.918,37,0.762,46,0.01,48,0.545,50,0.821,51,0.223,52,1.858,55,1.827,59,1.423,60,1.06,61,0.015,62,0.01,76,0.84,79,1.188,80,1.84,95,1.402,96,3.576,97,1.161,98,0.743,99,1.858,100,1.858,101,1.12,102,1.564,103,1.878,104,1.878,105,1.698,106,1.686,107,1.637,108,1.533,109,2.656,110,1.396,111,1.078,112,1.626,113,2.656,114,1.156,115,3.254,116,2.284,117,1.626,118,2.323,119,2.154,120,2.323,121,1.626,122,1.226,123,1.402,124,1.533,125,1.626,126,1.016,127,2.466,128,1.643,129,1.643,130,1.489,131,1.698,132,2.054,133,1.626,134,1.016,135,1.314,136,1.626,137,1.314,138,1.643,139,1.188,140,1.541,141,1.396,142,2.23,143,1.626,144,1.486,145,1.314,146,1.486,147,1.626,148,1.626,149,2.192,150,1.878,151,1.348,152,1.626,153,1.626,154,1.626,155,1.626,156,2.693,157,1.346,158,2.154,159,2.154,160,2.693,161,1.023,162,2.154,163,0.462,164,0.913,165,2.154,166,1.023,167,0.508,168,1.717,169,0.813,170,0.913,171,0.164,172,2.047,173,1.827,174,1.858,175,3.073,176,2.731,177,1.023,178,1.023,179,1.533,180,1.346,181,1.023,182,2.323,183,1.346,184,1.346,185,1.346,186,1.348,187,1.346,188,2.693,189,1.161,190,2.693,191,1.346,192,2.154,193,1.346,194,4.379,195,1.461,196,1.346,197,1.346,198,2.693,199,0.821,200,0.821,201,0.821,202,1.346,203,1.346,204,2.693,205,2.693,206,1.486,207,1.346,208,3.078,209,2.154,210,3.367,211,1.346,212,2.154,213,1.346,214,1.346,215,1.346,216,1.346,217,1.161,218,1.346,219,1.161,220,2.154,221,1.346,222,1.346,223,1.346,224,1.346,225,1.461,226,1.346,227,1.346,228,1.161,229,1.346,230,1.346,231,2.154,232,1.346,233,1.461,234,1.346,235,1.346,236,1.346,237,3.078,238,1.346,239,1.346,240,2.323,241,1.346,242,1.346,243,1.346,244,1.346,245,1.161,246,1.346,247,1.346,248,0.613,249,1.346,250,1.346,251,1.346,252,1.346,253,1.346,254,1.346,255,1.346,256,2.154,257,2.693,258,2.154,259,1.346,260,1.346,261,1.346,262,1.346,263,1.346,264,1.346,265,0.913,266,1.346,267,1.161,268,1.346,269,1.346,270,1.161,271,2.154,272,2.154,273,1.023,274,1.637,275,2.154,276,1.346,277,1.346,278,1.023,279,2.693,280,1.161,281,1.023,282,1.346,283,1.346,284,0.913,285,1.346,286,1.346,287,1.346,288,1.346,289,1.346,290,1.346,291,1.346,292,1.346,293,1.346,294,1.346]],["title/interfaces/FileUploadItemContext.html",[171,0.306,295,1.698]],["body/interfaces/FileUploadItemContext.html",[0,0.149,3,0.224,4,0.224,5,0.309,6,0.113,10,0.306,11,1.06,15,1.611,21,0.377,22,0.038,34,0.789,37,0.612,46,0.015,48,0.699,50,1.32,51,0.32,59,0.816,60,0.553,61,0.022,62,0.015,63,1.32,78,1.193,79,1.193,80,1.28,90,1.083,95,1.966,101,1.113,102,0.816,108,1.406,110,1.79,111,1.083,114,1.06,122,1.406,123,0.985,124,0.985,126,0.816,134,1.359,141,1.492,151,1.083,163,0.743,164,1.467,167,1.165,169,1.482,170,1.467,171,0.264,173,1.467,186,1.966,195,1.467,199,1.32,200,1.32,201,1.884,225,1.467,265,1.467,274,1.644,278,1.644,281,1.644,284,1.467,295,2.442,296,0.897,297,1.467,298,1.866,299,1.866,300,4.152,301,2.663,302,1.987,303,3.087,304,2.737,305,2.163,306,3.582,307,1.866,308,2.664,309,3.388,310,3.834,311,1.866,312,2.163,313,1.866,314,3.927,315,3.388,316,1.644,317,1.644,318,2.737,319,1.866,320,2.163,321,1.866,322,2.163,323,1.193,324,3.282,325,3.087,326,1.644,327,2.163,328,3.6,329,3.087,330,2.163,331,1.467,332,1.866,333,2.163,334,2.163,335,2.163,336,1.644,337,2.163,338,2.163,339,2.163,340,2.163,341,2.163,342,2.163,343,2.163,344,3.087,345,2.163,346,1.866,347,2.163,348,2.163,349,2.163,350,2.163,351,1.866,352,1.644,353,2.163,354,2.163,355,1.866,356,2.163,357,3.087,358,2.163,359,2.163,360,1.467,361,0.897,362,1.866,363,2.163,364,1.866,365,2.163,366,1.644,367,1.644,368,1.866,369,2.163,370,1.866,371,1.32,372,1.866,373,2.163,374,2.163,375,2.163,376,3.087,377,2.163,378,2.163,379,2.163,380,2.664,381,2.163,382,2.163,383,2.163,384,1.866,385,2.664,386,1.644,387,1.866,388,1.866,389,2.163,390,2.163,391,2.163,392,2.163,393,2.163]],["title/classes/GroupedValidator.html",[0,0.172,9,1.527]],["body/classes/GroupedValidator.html",[0,0.241,2,1.178,3,0.268,4,0.268,5,0.421,6,0.245,9,2.133,10,0.366,11,1.2,12,3.94,13,2.034,14,1.091,15,1.685,16,2.686,17,2.588,18,3.472,19,3.016,20,3.66,21,0.541,22,0.037,23,2.897,25,1.167,27,2.372,29,1.457,30,0.874,31,1.323,32,0.941,33,1.521,34,1.084,35,2.232,37,1.12,39,2.658,40,3.016,41,2.034,42,1.932,44,3.016,45,1.642,46,0.028,48,0.419,51,0.268,56,3.417,60,0.894,61,0.025,62,0.018,79,1.929,111,1.751,233,2.372,336,1.966,394,2.587,395,3.126,396,4.225,397,2.587,398,3.126,399,3.126,400,3.126,401,3.126,402,1.966,403,3.126,404,3.126,405,3.126,406,3.126,407,2.587,408,3.126]],["title/interfaces/IDataNode.html",[171,0.306,409,2.159]],["body/interfaces/IDataNode.html",[3,0.398,4,0.398,5,0.33,6,0.235,22,0.036,25,0.982,45,1.592,46,0.027,51,0.492,61,0.032,62,0.027,76,1.4,101,0.884,171,0.469,296,1.592,409,3.871,410,3.841,411,3.841,412,3.043,413,4.642]],["title/modules/NgxFileUploadModule.html",[414,2.159,415,1.903]],["body/modules/NgxFileUploadModule.html",[0,0.211,3,0.318,4,0.318,5,0.336,6,0.161,22,0.037,46,0.022,48,0.758,51,0.318,61,0.028,62,0.022,64,3.441,78,1.693,140,1.537,161,2.333,323,2.799,414,2.647,415,3.914,416,2.647,417,2.333,418,2.333,419,4.306,420,3.069,421,3.069,422,4.306,423,3.069,424,3.069,425,3.069,426,2.799,427,3.095,428,3.911,429,3.069,430,3.708,431,3.708,432,4.727,433,4.727,434,3.069,435,4.727,436,3.069,437,3.708,438,3.708]],["title/classes/OrValidator.html",[0,0.172,439,1.903]],["body/classes/OrValidator.html",[0,0.19,2,1.256,3,0.286,4,0.286,5,0.431,6,0.192,8,3.65,9,2.939,10,0.39,11,1.253,12,3.755,13,1.877,14,1.139,15,1.674,16,2.953,17,2.496,18,3.309,19,3.149,20,3.149,21,0.553,22,0.037,23,2.496,24,4.528,25,1.189,26,2.758,27,2.774,29,1.495,30,0.897,31,1.358,32,0.959,33,1.597,34,1.213,35,2.38,36,2.758,37,1.032,38,2.758,39,2.097,40,2.38,41,1.877,42,1.662,43,2.758,44,2.38,45,1.143,46,0.032,47,2.758,48,0.591,49,2.38,51,0.286,52,2.014,53,4.09,56,2.38,57,2.758,58,2.758,60,0.705,61,0.026,62,0.02,240,2.38,402,2.097,439,2.774,440,2.758,441,3.333]],["title/interfaces/Upload.html",[101,0.576,171,0.306]],["body/interfaces/Upload.html",[3,0.247,4,0.247,5,0.406,6,0.234,10,0.338,11,1.137,13,1.373,14,1.033,21,0.404,22,0.037,25,1.101,30,0.492,32,0.975,33,1.137,34,0.611,37,1.261,45,1.373,46,0.017,48,0.615,51,0.446,59,1.549,60,0.846,61,0.023,62,0.017,73,2.097,75,1.197,76,0.745,101,1.138,102,1.759,103,2.504,104,2.504,105,2.264,106,2.232,108,2.03,110,1.848,114,0.821,122,1.508,123,1.508,124,1.508,126,1.25,127,2.504,128,2.021,129,2.021,130,1.701,131,2.097,132,2.629,134,1.25,135,2.021,137,2.021,138,2.021,139,1.827,140,2.055,141,1.786,142,2.264,144,2.264,145,2.021,146,1.827,149,2.72,150,2.021,151,1.658,163,0.821,167,1.25,168,1.508,169,1.549,171,0.501,179,1.088,206,1.319,248,1.73,296,0.991,361,1.373,371,2.021,442,1.458,443,2.888,444,2.888,445,2.888,446,2.888,447,2.888,448,1.817,449,1.817,450,1.73,451,2.021,452,2.021,453,2.518]],["title/classes/UploadControl.html",[0,0.172,301,1.698]],["body/classes/UploadControl.html",[0,0.169,2,1.115,3,0.254,4,0.254,5,0.21,6,0.228,10,0.347,14,1.051,15,1.669,17,1.495,21,0.506,22,0.038,25,1.06,29,1.424,30,0.855,31,1.294,32,0.793,37,1.089,46,0.017,48,0.545,51,0.254,61,0.024,62,0.017,80,1.396,90,1.227,95,2.096,98,1.352,100,3.876,101,1.095,102,1.641,105,2.479,106,2.25,111,1.687,120,2.906,126,1.271,130,1.396,163,0.841,177,1.862,189,2.906,200,1.495,201,2.808,245,2.906,270,2.906,284,1.662,301,2.285,313,2.906,318,2.561,324,2.561,352,2.561,360,1.662,361,1.015,362,3.322,366,3.696,367,1.862,388,2.113,397,3.85,454,4.348,455,2.45,456,4.071,457,2.45,458,4.071,459,2.906,460,5.011,461,2.96,462,2.96,463,4.071,464,2.96,465,4.071,466,4.071,467,3.369,468,4.071,469,4.071,470,2.96,471,4.071,472,2.96,473,2.96,474,2.96,475,2.45,476,2.96,477,4.071,478,2.96,479,2.96,480,2.45,481,2.45,482,2.96,483,2.113,484,2.45,485,2.96,486,2.96,487,2.96]],["title/interfaces/UploadData.html",[169,0.945,171,0.306]],["body/interfaces/UploadData.html",[3,0.27,4,0.27,5,0.381,6,0.137,10,0.37,11,1.208,13,1.082,21,0.571,22,0.038,30,0.878,32,0.725,33,1.208,34,0.667,37,1.125,45,1.843,46,0.019,48,0.644,51,0.46,59,1.328,60,0.667,61,0.025,62,0.019,73,2.66,75,2.132,76,1.241,101,1.077,102,1.502,103,1.593,104,1.593,105,1.441,106,1.992,108,1.602,110,1.458,114,0.897,122,1.189,123,1.189,124,1.189,126,0.985,127,2.147,128,1.593,129,1.593,130,1.649,131,2.453,132,2.428,134,0.985,135,1.593,137,1.593,138,1.593,139,1.441,140,1.762,141,1.898,142,2.196,144,2.196,145,1.593,146,1.441,149,2.428,150,1.593,151,1.307,163,0.897,167,1.607,168,1.939,169,1.502,171,0.52,179,1.189,206,1.441,248,2.085,296,1.082,361,1.458,371,1.593,442,1.593,448,1.985,449,1.985,450,2.085,451,2.147,452,2.598,453,2.675]],["title/directives/UploadFileDirective.html",[426,1.381,488,1.527]],["body/directives/UploadFileDirective.html",[0,0.09,3,0.135,4,0.135,5,0.383,6,0.237,10,0.185,11,0.722,14,0.656,15,1.621,16,1.426,17,2.273,21,0.455,22,0.038,25,1.14,29,0.722,30,0.683,31,0.656,32,0.623,34,0.674,37,0.855,41,1.469,42,1.202,45,0.541,46,0.024,48,0.603,50,0.797,51,0.135,52,2.266,55,2.052,59,0.793,60,0.537,61,0.015,62,0.009,69,0.992,76,1.105,78,0.72,79,1.16,80,1.702,90,1.053,95,1.377,98,0.72,101,1.026,102,1.142,107,1.598,108,1.202,110,1.254,111,1.053,113,3.057,114,0.722,116,1.426,118,2.277,123,0.957,124,1.202,126,0.493,130,0.871,134,0.996,139,0.72,146,1.16,161,0.992,163,0.448,164,0.886,166,0.992,167,0.493,170,0.886,172,2.694,174,2.61,175,0.992,176,1.598,178,1.598,179,1.377,181,1.598,182,1.126,186,1.515,199,0.797,201,2.689,217,1.126,233,2.052,273,1.598,297,3.059,302,0.72,304,2.946,307,1.126,308,2.277,309,1.814,310,2.61,311,1.126,316,1.598,326,0.992,331,1.79,332,1.126,346,1.814,360,2.404,361,0.541,364,1.126,366,1.598,367,2.3,368,2.61,370,1.126,380,1.126,384,1.814,385,2.277,386,2.006,387,1.126,426,1.16,450,0.594,451,1.61,459,2.277,467,2.102,488,2.023,489,1.126,490,4.51,491,1.306,492,3.621,493,4.007,494,4.503,495,3.057,496,3.655,497,3.655,498,3.655,499,1.814,500,2.277,501,2.639,502,2.639,503,2.102,504,2.102,505,2.54,506,1.578,507,3.189,508,3.655,509,1.578,510,2.102,511,2.102,512,2.861,513,2.61,514,1.578,515,1.578,516,3.316,517,2.54,518,1.578,519,2.102,520,1.578,521,1.578,522,2.102,523,2.639,524,1.306,525,1.578,526,1.814,527,2.54,528,2.54,529,1.578,530,3.655,531,1.578,532,2.54,533,1.578,534,1.578,535,1.578,536,2.54,537,3.655,538,1.578,539,2.54,540,1.578,541,2.54,542,1.578,543,1.578,544,1.578,545,1.578,546,1.578,547,1.578,548,2.54,549,1.578,550,1.578,551,3.189,552,2.54,553,1.578,554,2.54,555,1.578,556,1.578,557,1.578,558,1.578,559,1.578,560,1.578,561,1.578,562,1.578,563,1.578,564,2.102,565,1.578,566,1.578,567,2.54,568,1.578,569,1.578,570,1.578,571,1.578,572,1.578,573,1.578,574,2.54,575,3.025,576,1.578,577,2.54,578,1.578,579,1.578,580,1.578,581,1.578,582,1.578,583,1.578,584,1.578,585,1.578,586,1.578,587,1.578,588,1.126,589,1.578,590,1.578,591,2.102,592,2.102,593,1.578,594,1.578,595,1.578,596,2.54,597,1.578,598,1.578,599,2.54,600,1.578,601,1.578,602,1.578,603,1.578,604,1.578,605,1.578,606,1.578,607,1.578,608,1.578,609,1.578,610,1.578,611,1.578,612,1.578,613,1.578,614,2.54,615,1.578,616,1.578,617,1.578,618,1.578,619,1.578,620,2.54,621,1.578,622,2.54,623,2.54,624,1.578,625,1.306,626,1.578,627,1.578,628,1.578,629,1.578,630,1.578,631,1.578,632,1.578,633,1.578,634,1.578,635,1.578]],["title/components/UploadItemComponent.html",[302,1.381,323,1.381]],["body/components/UploadItemComponent.html",[0,0.084,3,0.126,4,0.126,5,0.216,6,0.224,10,0.281,11,0.681,14,0.619,15,1.54,21,0.419,22,0.038,25,1.071,29,0.681,30,0.658,31,0.619,32,0.518,34,0.507,37,0.711,46,0.009,48,0.611,50,0.741,51,0.205,59,0.458,60,0.311,61,0.014,62,0.009,63,1.21,69,0.924,70,1.711,71,1.215,73,0.67,75,1.452,78,0.67,79,1.094,80,0.822,90,2.135,95,1.871,98,0.67,101,1.135,102,0.458,107,1.508,108,0.903,110,1.202,111,1.258,114,0.681,122,1.32,123,0.553,124,0.553,126,0.948,130,1.041,134,1.206,141,1.202,151,1.258,163,0.417,164,0.824,167,0.748,169,0.748,170,0.824,171,0.148,173,1.704,179,0.903,186,1.452,195,0.824,199,0.741,200,0.741,201,1.533,206,0.67,225,1.345,228,1.048,248,0.903,265,0.824,267,1.048,274,1.91,278,1.91,281,1.508,284,0.824,295,1.704,297,2.893,298,3.679,299,1.048,300,1.983,301,1.345,302,1.6,303,2.513,304,1.91,305,1.215,306,3.254,307,1.048,308,2.168,309,2.502,310,3.462,311,1.048,312,1.215,313,1.048,314,2.9,315,3.12,316,2.429,317,2.429,318,3.374,319,1.711,320,1.983,321,1.711,322,2.513,323,1.6,324,3.374,325,2.9,326,2.749,327,2.513,328,3.428,329,2.513,330,1.215,331,1.704,332,1.048,333,1.215,334,1.215,335,1.215,336,0.924,337,1.215,338,2.513,339,2.513,340,1.215,341,1.215,342,1.215,343,1.215,344,2.9,345,1.215,346,1.711,347,1.215,348,1.215,349,1.215,350,1.215,351,2.502,352,1.91,353,1.215,354,1.215,355,1.048,356,1.215,357,2.513,358,1.215,359,1.983,360,1.967,361,0.822,362,1.711,363,1.983,364,1.048,365,1.215,366,1.508,367,0.924,368,1.048,369,1.215,370,1.048,371,0.741,372,1.048,373,1.215,374,1.215,375,1.215,376,1.983,377,1.215,378,1.215,379,1.215,380,1.711,381,1.215,382,1.215,383,1.215,384,1.048,385,1.711,386,0.924,387,1.048,388,1.048,389,1.215,390,1.983,391,1.983,392,1.983,393,2.9,412,1.345,418,0.924,426,0.67,427,0.741,450,0.903,483,1.711,488,0.741,489,1.048,495,1.048,499,1.711,500,1.048,503,1.983,504,1.983,512,1.048,523,1.215,524,1.215,526,1.048,588,1.048,625,1.983,636,1.711,637,1.215,638,1.215,639,1.215,640,2.396,641,2.396,642,2.396,643,2.396,644,1.468,645,1.468,646,1.468,647,1.468,648,1.468,649,1.468,650,1.468,651,1.468,652,3.504,653,2.396,654,2.396,655,2.396,656,1.215,657,2.9,658,1.215,659,1.215,660,1.215,661,1.215,662,1.215,663,2.9,664,3.195,665,3.195,666,2.513,667,3.902,668,1.983,669,1.215,670,3.428,671,3.036,672,3.616,673,3.902,674,2.9,675,1.215,676,3.195,677,2.513,678,3.036,679,1.468,680,1.468,681,1.468,682,1.468,683,1.468,684,1.468,685,3.616,686,3.504,687,1.468,688,1.468,689,1.468,690,3.504,691,2.396,692,3.616,693,1.468,694,2.204,695,1.468,696,1.468,697,1.468,698,2.396,699,1.468,700,1.468,701,1.468,702,1.468,703,1.215,704,1.468,705,1.468,706,1.468,707,1.468,708,1.468,709,1.468,710,2.396,711,3.036,712,2.396,713,2.396,714,2.513,715,2.9,716,2.396,717,1.983,718,3.195,719,1.983,720,1.215,721,1.215,722,2.396,723,2.513,724,2.396,725,2.9,726,2.513,727,2.396,728,1.468,729,1.468,730,1.468,731,1.468,732,2.396,733,1.468,734,1.468,735,1.983,736,1.468,737,1.468,738,1.468,739,1.468,740,1.983,741,1.468,742,1.983,743,1.215,744,1.468,745,1.468,746,1.468,747,1.215,748,1.215,749,1.468,750,1.983,751,1.215,752,1.468,753,1.983,754,1.983,755,1.468,756,1.468,757,1.468,758,1.468,759,1.983,760,2.9,761,1.215,762,1.215,763,1.215]],["title/classes/UploadModel.html",[0,0.172,114,0.859]],["body/classes/UploadModel.html",[0,0.128,2,0.849,3,0.193,4,0.193,5,0.423,6,0.253,10,0.264,14,0.864,15,1.675,21,0.447,22,0.038,25,1.224,29,1.343,30,0.845,31,1.22,32,1.006,33,1.408,34,0.936,37,1.035,45,0.773,46,0.013,48,0.449,51,0.193,52,1.029,60,1.191,61,0.02,62,0.013,70,3.375,73,2.406,75,1.959,76,1.142,80,1.622,82,2.771,86,2.771,90,0.934,98,1.029,99,2.391,101,1.043,107,2.107,109,1.609,110,1.699,111,0.934,114,0.951,122,1.667,126,1.382,131,2.502,134,1.711,141,1.879,142,1.825,167,1.476,168,1.867,169,1.248,195,1.265,219,2.853,248,1.867,273,2.107,450,2.065,510,2.771,591,1.865,694,2.514,764,1.865,765,4.424,766,4.727,767,3.996,768,3.349,769,2.253,770,2.253,771,2.253,772,2.253,773,3.349,774,2.253,775,2.253,776,2.253,777,2.253,778,2.253,779,2.253,780,3.349,781,2.253,782,2.253,783,2.253,784,2.253,785,2.253,786,2.253,787,2.253,788,2.253,789,2.253,790,2.253,791,2.253,792,2.253,793,2.253,794,2.253,795,2.253,796,2.253,797,2.253,798,2.253,799,2.253,800,1.865,801,2.253,802,2.253,803,2.253,804,3.349,805,2.253,806,2.253,807,2.253,808,2.253,809,3.349,810,2.253,811,3.349,812,2.253,813,3.349,814,2.253,815,3.349,816,3.349,817,3.349,818,2.253,819,2.253,820,2.253,821,2.253,822,2.253,823,2.253,824,2.253]],["title/interfaces/UploadOptions.html",[116,1.698,171,0.306]],["body/interfaces/UploadOptions.html",[0,0.104,3,0.156,4,0.156,5,0.381,6,0.079,10,0.214,11,0.81,13,0.626,15,1.44,21,0.401,22,0.038,23,0.922,30,0.599,31,0.736,32,0.486,34,0.965,46,0.011,48,0.577,50,0.922,51,0.244,52,1.965,55,1.97,59,1.344,60,1.072,61,0.017,62,0.011,76,1.111,79,0.834,80,1.888,95,1.075,96,1.303,97,1.303,98,0.834,99,1.303,100,1.303,101,1.105,102,1.344,103,0.922,104,0.922,105,0.834,106,1.182,108,1.075,109,2.036,110,1.361,111,0.756,113,2.036,114,0.997,115,3.403,116,2.227,118,2.036,119,1.511,120,2.036,122,1.075,123,1.323,124,1.495,126,0.891,127,2.407,128,1.44,129,1.44,130,1.476,131,1.603,132,1.772,134,0.891,135,0.922,137,0.922,138,1.44,139,0.834,140,1.182,141,1.204,142,2.252,144,1.302,145,0.922,146,1.302,149,2.003,150,1.772,151,1.182,156,2.905,157,1.511,158,2.36,159,2.36,160,2.905,161,1.148,162,2.36,163,0.519,164,1.025,165,2.36,166,1.148,167,0.57,168,1.796,169,0.891,170,1.025,171,0.184,172,2.998,173,2.227,174,2.506,175,3.376,176,2.87,177,1.148,178,1.148,179,1.622,180,1.511,181,1.148,182,2.506,183,1.511,184,1.511,185,1.511,186,1.454,187,1.511,188,2.905,189,1.303,190,2.905,191,1.511,192,2.36,193,1.511,194,4.502,195,1.601,196,1.511,197,1.511,198,2.905,199,0.922,200,0.922,201,0.922,202,1.511,203,1.511,204,2.905,205,2.905,206,1.603,207,1.511,208,3.283,209,2.36,210,3.562,211,1.511,212,2.36,213,1.511,214,1.511,215,1.511,216,1.511,217,1.303,218,1.511,219,1.303,220,2.36,221,1.511,222,1.511,223,1.511,224,1.511,225,1.601,226,1.511,227,1.511,228,1.303,229,1.511,230,1.511,231,2.36,232,1.511,233,1.601,234,1.511,235,1.511,236,1.511,237,3.283,238,1.511,239,1.511,240,2.506,241,1.511,242,1.511,243,1.511,244,1.511,245,1.303,246,1.511,247,1.511,248,0.688,249,1.511,250,1.511,251,1.511,252,1.511,253,1.511,254,1.511,255,1.511,256,2.36,257,2.905,258,2.36,259,1.511,260,1.511,261,1.511,262,1.511,263,1.511,264,1.511,265,1.025,266,1.511,267,1.303,268,1.511,269,1.511,270,1.303,271,2.36,272,2.36,273,1.148,274,1.794,275,2.36,276,1.511,277,1.511,278,1.148,279,2.905,280,1.303,281,1.148,282,1.511,283,1.511,284,1.025,285,1.511,286,1.511,287,1.511,288,1.511,289,1.511,290,1.511,291,1.511,292,1.511,293,1.511,294,1.511,296,0.626,825,2.852]],["title/interfaces/UploadResponse.html",[168,1.14,171,0.306]],["body/interfaces/UploadResponse.html",[3,0.285,4,0.285,5,0.388,6,0.144,10,0.389,11,1.25,13,1.14,21,0.499,22,0.038,30,0.567,32,0.75,33,1.25,34,0.703,37,1.155,45,1.509,46,0.02,48,0.661,51,0.468,59,1.374,60,0.703,61,0.026,62,0.02,73,2.253,75,1.377,76,0.858,101,1.091,102,1.541,103,1.677,104,1.677,105,1.517,106,2.045,108,1.658,110,1.509,114,0.944,122,1.252,123,1.252,124,1.252,126,1.037,127,2.222,128,1.677,129,1.677,130,1.693,131,2.009,132,2.76,134,1.037,135,1.677,137,1.677,138,1.677,139,1.517,140,1.823,141,1.693,142,2.564,144,2.253,145,1.677,146,1.517,149,2.492,150,1.677,151,1.377,163,0.944,167,1.374,168,1.859,169,1.374,171,0.531,179,1.979,206,2.399,248,1.859,296,1.14,361,1.509,371,1.677,442,1.677,448,2.09,449,2.09,450,1.859,451,2.222,452,2.222,453,2.768]],["title/classes/UploadStore.html",[0,0.172,826,2.159]],["body/classes/UploadStore.html",[0,0.267,2,1.765,3,0.401,4,0.401,5,0.333,6,0.203,22,0.036,46,0.028,48,0.628,51,0.401,61,0.032,62,0.028,80,1.607,101,1.038,492,3.345,800,3.877,826,3.892,827,3.877]],["title/interfaces/UploadValidation.html",[171,0.306,452,1.527]],["body/interfaces/UploadValidation.html",[3,0.288,4,0.288,5,0.389,6,0.146,10,0.393,11,1.259,13,1.151,21,0.339,22,0.038,30,0.572,32,0.755,33,1.499,34,1.049,37,1.161,45,1.519,46,0.02,48,0.665,51,0.47,59,1.383,60,0.71,61,0.026,62,0.02,73,2.264,75,1.39,76,0.866,101,1.094,102,1.549,103,1.694,104,1.694,105,1.532,106,2.055,108,1.669,110,1.519,114,0.953,122,1.264,123,1.264,124,1.264,126,1.048,127,2.237,128,1.694,129,1.694,130,1.701,131,2.023,132,2.504,134,1.048,135,1.694,137,1.694,138,1.694,139,1.532,140,1.835,141,1.701,142,2.572,144,2.264,145,1.694,146,1.532,149,2.504,150,1.694,151,1.39,163,0.953,167,1.383,168,1.669,169,1.383,171,0.533,179,1.264,206,1.532,248,1.869,296,1.151,361,1.519,371,1.694,442,1.694,448,2.111,449,2.111,450,1.869,451,2.237,452,2.504,453,2.787]],["title/components/UploadViewComponent.html",[302,1.381,427,1.527]],["body/components/UploadViewComponent.html",[0,0.096,3,0.286,4,0.144,5,0.36,6,0.22,10,0.197,11,0.761,14,0.692,15,1.584,17,0.851,18,1.685,21,0.446,22,0.038,25,1.045,29,0.761,30,0.789,31,0.692,32,0.457,37,0.627,39,1.685,41,1.646,42,1.256,46,0.01,48,0.643,51,0.144,52,0.77,55,2.131,59,0.837,61,0.016,62,0.01,69,1.061,75,0.699,76,0.692,78,0.77,80,0.578,90,2.311,95,1.808,98,0.77,101,1.133,102,0.837,115,1.913,134,1.498,141,0.919,163,0.479,166,1.061,172,2.606,173,1.504,175,2.389,176,2.389,177,2.389,178,1.685,179,1.009,181,2.389,186,1.11,199,0.851,200,0.851,225,1.504,233,1.504,265,1.504,280,1.913,295,0.946,297,2.843,302,1.892,304,3.018,306,2.38,315,1.913,316,2.606,317,2.909,318,1.061,319,1.913,321,1.913,323,0.77,324,2.097,326,2.775,331,2.325,336,1.685,351,1.913,352,1.685,360,1.504,361,0.919,372,1.913,386,2.606,402,1.061,412,0.946,418,1.061,426,0.77,427,1.917,436,1.395,450,1.009,457,1.395,459,2.711,475,1.395,480,1.395,481,1.395,483,1.913,484,1.395,488,0.851,489,1.204,492,3.616,495,1.204,499,1.913,500,1.204,501,2.758,502,2.758,511,3.428,512,3.301,513,2.711,516,3.142,519,2.217,522,3.142,526,1.204,564,2.217,575,3.65,588,3.149,592,1.395,636,1.913,637,1.395,638,1.395,639,1.395,656,1.395,657,2.217,658,1.395,659,1.395,660,1.395,661,1.395,662,1.395,663,2.758,664,2.758,665,2.758,666,2.758,667,4.528,668,3.142,669,2.217,670,2.758,672,2.758,673,4.278,674,2.758,675,2.758,676,3.971,677,2.217,685,2.217,692,1.395,694,1.061,703,2.758,714,1.395,715,2.217,717,1.395,718,3.142,719,2.758,720,3.142,721,2.217,723,3.142,725,1.395,726,2.217,735,1.395,740,1.395,742,2.217,743,2.217,747,2.758,748,3.142,750,1.395,751,1.395,753,1.395,754,1.395,759,2.217,760,3.142,761,1.395,762,1.395,763,1.395,828,4.192,829,1.395,830,4.41,831,3.333,832,2.679,833,2.679,834,2.679,835,2.679,836,2.679,837,2.679,838,3.333,839,2.679,840,3.333,841,2.679,842,2.679,843,3.333,844,1.686,845,2.679,846,1.686,847,2.679,848,1.686,849,2.679,850,1.686,851,1.686,852,2.679,853,1.686,854,2.679,855,1.686,856,2.679,857,2.679,858,2.679,859,1.686,860,2.679,861,1.686,862,1.686,863,1.686,864,1.686,865,1.686,866,1.686,867,2.679,868,1.686,869,1.686,870,1.686,871,1.686,872,1.686,873,1.686,874,1.686,875,1.686,876,2.679,877,1.686,878,2.679,879,1.686,880,2.679,881,1.686,882,1.686,883,1.686,884,1.686,885,1.686,886,1.686,887,1.686,888,1.686,889,1.686,890,1.686,891,3.333,892,1.686,893,1.686,894,1.686,895,2.679,896,1.686,897,1.686]],["title/classes/ValidationBuilder.html",[0,0.172,898,2.159]],["body/classes/ValidationBuilder.html",[0,0.23,1,2.544,2,1.524,3,0.347,4,0.347,5,0.287,6,0.235,9,2.932,10,0.474,13,1.712,14,1.288,15,1.418,21,0.504,22,0.037,23,2.986,25,1.056,29,1.418,30,0.851,31,1.288,32,0.851,41,1.387,42,1.524,46,0.024,48,0.757,49,2.887,51,0.347,60,1.056,61,0.029,62,0.024,186,2.068,355,4.222,402,2.544,439,2.544,898,3.563,899,3.347,900,4.044,901,4.044,902,4.044,903,4.044,904,4.044,905,4.044,906,4.044,907,4.044,908,4.044,909,4.044]],["title/interfaces/ValidationErrors.html",[33,0.859,171,0.306]],["body/interfaces/ValidationErrors.html",[3,0.385,4,0.385,5,0.416,6,0.231,21,0.454,22,0.037,25,0.951,27,2.524,33,1.665,34,1.125,41,1.542,42,1.694,46,0.026,51,0.486,61,0.031,62,0.026,76,1.374,171,0.538,296,1.542,411,3.721,412,2.987,910,2.829,911,4.497]],["title/interfaces/Validator.html",[41,1.038,171,0.306]],["body/interfaces/Validator.html",[3,0.372,4,0.372,5,0.432,6,0.226,10,0.508,14,1.345,16,2.925,21,0.526,22,0.037,25,0.918,27,2.925,29,1.233,30,0.74,31,1.121,32,0.74,33,1.645,34,1.181,41,1.787,42,1.636,46,0.025,51,0.478,61,0.031,62,0.025,76,1.121,171,0.526,296,1.489,412,2.437,910,2.731,912,4.341]],["title/coverage.html",[913,3.419]],["body/coverage.html",[0,0.335,1,2.195,5,0.248,6,0.272,7,2.888,9,1.762,21,0.353,22,0.037,33,0.991,41,1.197,46,0.02,61,0.027,62,0.02,63,1.762,64,1.959,66,2.888,67,2.888,68,2.888,90,2.484,95,1.315,96,3.245,97,3.245,101,0.664,114,0.991,116,1.959,168,1.315,169,1.09,171,0.6,186,1.446,295,1.959,297,3.006,298,3.245,299,3.245,301,1.959,302,2.075,323,1.593,394,2.888,409,2.491,410,2.888,426,1.593,427,1.762,439,2.195,440,2.888,442,2.704,452,1.762,454,2.888,455,2.888,488,1.762,490,2.888,491,2.888,694,3.369,764,2.888,826,2.491,827,2.888,828,2.888,829,2.888,898,2.491,899,2.888,910,2.859,913,2.888,914,3.489,915,3.489,916,3.489,917,5.355,918,3.489,919,3.489,920,3.489,921,3.489,922,4.545,923,4.545,924,3.489,925,3.489,926,3.489,927,3.489,928,4.545,929,3.489,930,3.489,931,3.489,932,3.489,933,5.055,934,5.055,935,3.489,936,3.489]],["title/dependencies.html",[417,2.289,937,2.524]],["body/dependencies.html",[22,0.037,46,0.026,61,0.031,62,0.026,78,1.999,163,1.244,317,2.755,417,2.755,434,3.624,938,4.379,939,6.141,940,4.379,941,4.379,942,5.238,943,4.335,944,4.379,945,4.379,946,4.379,947,4.379,948,4.379,949,4.379,950,4.379,951,4.379,952,4.379,953,4.379,954,4.379,955,4.379,956,4.379,957,4.379,958,4.379,959,4.379,960,4.379]],["title/miscellaneous/enumerations.html",[961,1.588,962,3.011]],["body/miscellaneous/enumerations.html",[6,0.197,10,0.531,22,0.036,46,0.027,61,0.031,62,0.027,106,2.217,130,1.835,144,2.443,167,1.671,248,2.016,361,1.835,442,2.291,450,2.016,451,2.701,513,4.379,961,2.854,962,3.755,963,4.537]],["title/index.html",[10,0.354,964,2.503]],["body/index.html",[2,1.565,22,0.036,46,0.024,61,0.03,62,0.024,63,2.097,64,3.383,140,1.721,296,1.424,323,2.752,331,3.074,414,3.622,415,3.939,417,2.612,418,2.612,419,3.437,420,3.437,421,3.437,422,3.437,423,3.437,424,3.437,425,3.437,426,2.752,427,3.043,428,4.198,429,3.437,488,2.097,636,2.965,964,3.437,965,4.153,966,4.153,967,4.153]],["title/modules.html",[416,2.95]],["body/modules.html",[22,0.033,46,0.029,61,0.033,62,0.029,415,3.062,416,3.474,943,4.027,968,4.867,969,4.867,970,4.867]],["title/miscellaneous/typealiases.html",[961,1.588,971,3.639]],["body/miscellaneous/typealiases.html",[6,0.209,10,0.564,21,0.487,22,0.033,42,2.088,46,0.028,61,0.033,62,0.028,407,3.989,910,3.032,961,3.032,972,4.82,973,4.82]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":90,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["1.10.0",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":752,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["10/10",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":694,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["1024",{"_index":91,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["11/15",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["12.1.7",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":696,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1px",{"_index":676,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["1rem",{"_index":726,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["2",{"_index":965,"title":{},"body":{"index.html":{}}}],["2.5rem",{"_index":889,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["200",{"_index":255,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["25",{"_index":741,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25,safari5.1",{"_index":700,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25rem",{"_index":671,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25s",{"_index":738,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["2e2e2e",{"_index":892,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["2xx",{"_index":262,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["3.0.3",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":895,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["4/5",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":891,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["42",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":675,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["5",{"_index":731,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["50",{"_index":692,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["50%,#f7f7f7",{"_index":698,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["5rem",{"_index":672,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["6",{"_index":701,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["6.5.3",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["63",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["7/11",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["75rem",{"_index":744,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["8",{"_index":966,"title":{},"body":{"index.html":{}}}],["8.2.2",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["8.2.9",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":735,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["9",{"_index":967,"title":{},"body":{"index.html":{}}}],["9.15.10",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["abort",{"_index":145,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["absolute",{"_index":729,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":107,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["action",{"_index":592,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["actions",{"_index":722,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["actual_component",{"_index":763,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["add(...validators",{"_index":404,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":522,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["affect",{"_index":363,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["again",{"_index":139,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["aliases",{"_index":972,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":719,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["allowed",{"_index":749,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["and(...validators",{"_index":906,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":900,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":904,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":907,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":434,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":161,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["angular/compiler",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":78,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":608,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["anything",{"_index":281,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["api/upload",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadStore.html":{}}}],["api/validation",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{}}}],["arguments",{"_index":523,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":576,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":631,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.isarray(errors",{"_index":285,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["array.isarray(validators",{"_index":403,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["assets//scss/variables",{"_index":660,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/fonts",{"_index":659,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/scss/icons",{"_index":661,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assume",{"_index":268,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["auto",{"_index":877,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["back",{"_index":129,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["background",{"_index":685,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["basis",{"_index":885,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["before",{"_index":481,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["begin",{"_index":541,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["behaviorsubject",{"_index":162,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["behaviorsubject(this.upload",{"_index":191,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["bind",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["block",{"_index":662,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["body",{"_index":179,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["boolean",{"_index":132,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":420,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":673,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bottom",{"_index":703,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bound",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["box",{"_index":880,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["break",{"_index":240,"title":{},"body":{"classes/FileUpload.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{}}}],["broken",{"_index":467,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{}}}],["browse",{"_index":970,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":943,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browsers",{"_index":688,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["build",{"_index":218,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["button",{"_index":739,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["byte",{"_index":82,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":86,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes.tofixed(2",{"_index":93,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["cancel",{"_index":102,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["cancelall",{"_index":496,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["canceled",{"_index":361,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":617,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["care",{"_index":857,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["case",{"_index":237,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["center",{"_index":720,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chance",{"_index":270,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["change",{"_index":108,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changed",{"_index":151,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changes",{"_index":836,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["changesub",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["child",{"_index":748,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chrome10",{"_index":699,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["chrome26",{"_index":707,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["cleanall",{"_index":497,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["clear",{"_index":632,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["click",{"_index":360,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["click(event",{"_index":524,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":423,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":424,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":425,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["code",{"_index":258,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["color",{"_index":663,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["colors",{"_index":754,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["column",{"_index":669,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["commonmodule",{"_index":433,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":123,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completed",{"_index":126,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completeupload",{"_index":288,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["component",{"_index":302,"title":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":761,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["components",{"_index":636,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["components/ngxfileuploaditem.html",{"_index":476,"title":{},"body":{"classes/UploadControl.html":{}}}],["connection",{"_index":466,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["constructor(file",{"_index":768,"title":{},"body":{"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":461,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":112,"title":{},"body":{"classes/FileUpload.html":{}}}],["constructor(httpclient",{"_index":506,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["constructor(validators",{"_index":395,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contain",{"_index":280,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["content",{"_index":887,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["context",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["context.ctrl",{"_index":458,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["control.ts",{"_index":455,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["control.ts:19",{"_index":462,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:34",{"_index":464,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:42",{"_index":470,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:50",{"_index":472,"title":{},"body":{"classes/UploadControl.html":{}}}],["coverage",{"_index":913,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":118,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["createfieldinputfield",{"_index":619,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["creates",{"_index":510,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["createupload(file",{"_index":593,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["createuploadbody",{"_index":226,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["ctrl",{"_index":300,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":742,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["custom",{"_index":847,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["d2d2d2",{"_index":879,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dark",{"_index":666,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dashed",{"_index":890,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data",{"_index":110,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["data/api/upload",{"_index":862,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["declarations",{"_index":419,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":512,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["defaultuploaditem",{"_index":642,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":353,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":183,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["delay",{"_index":480,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["delete",{"_index":287,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["dependencies",{"_index":417,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["deprecated",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["description",{"_index":98,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["destroyed",{"_index":385,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["diffrent",{"_index":276,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["direction",{"_index":668,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directive",{"_index":488,"title":{"directives/UploadFileDirective.html":{}},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":489,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directives/ngxfileuploaddirective.html#add",{"_index":865,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["directly",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["disable",{"_index":390,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["disabled",{"_index":500,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["display",{"_index":326,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["document.createelement(\"input",{"_index":621,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["documentation",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":638,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dont",{"_index":362,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["download",{"_index":138,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["downloads",{"_index":536,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag",{"_index":493,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag/drop",{"_index":876,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dragevent",{"_index":530,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover",{"_index":505,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover(event",{"_index":529,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop",{"_index":494,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop(event",{"_index":533,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dummy",{"_index":613,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dynamic",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":627,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["e4e4e4",{"_index":678,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["edit",{"_index":680,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":684,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["element",{"_index":483,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ellipsis",{"_index":716,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["emits",{"_index":184,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["enabled",{"_index":182,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["ensure",{"_index":359,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["enum",{"_index":449,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":962,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":130,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["error.value",{"_index":654,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["errors",{"_index":142,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["event",{"_index":201,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["event.loaded",{"_index":252,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event.preventdefault",{"_index":368,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":369,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":367,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.type",{"_index":236,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["eventemitter",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["events",{"_index":225,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["example",{"_index":459,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exportas",{"_index":544,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["exports",{"_index":422,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":693,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["failed",{"_index":465,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":274,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["false",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["fdfdfd",{"_index":686,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff16",{"_index":706,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff3.6",{"_index":695,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["field",{"_index":516,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["file.ts",{"_index":491,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["file.ts:101",{"_index":540,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:108",{"_index":535,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:118",{"_index":538,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:131",{"_index":531,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:140",{"_index":534,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:155",{"_index":525,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:32",{"_index":521,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:34",{"_index":542,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:37",{"_index":517,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:46",{"_index":518,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:53",{"_index":515,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:56",{"_index":514,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:59",{"_index":520,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:74",{"_index":509,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file/upload",{"_index":490,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["filemodel",{"_index":596,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filename",{"_index":766,"title":{},"body":{"classes/UploadModel.html":{}}}],["files",{"_index":575,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["files.map((file",{"_index":584,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileselect",{"_index":553,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filesize",{"_index":70,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["filesizepipe",{"_index":64,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["filetype",{"_index":767,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload",{"_index":95,"title":{"classes/FileUpload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload(this.httpclient",{"_index":598,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileupload/data/api/index.ts",{"_index":410,"title":{},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["fileupload/data/api/index.ts:1",{"_index":413,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/data/api/upload.ts",{"_index":442,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/data/api/upload.ts:52",{"_index":447,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:58",{"_index":446,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:63",{"_index":443,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:69",{"_index":444,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:74",{"_index":445,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/validation.ts",{"_index":910,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/data/api/validation.ts:1",{"_index":911,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/data/api/validation.ts:8",{"_index":912,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileupload/data/upload.model.ts",{"_index":764,"title":{},"body":{"classes/UploadModel.html":{},"coverage.html":{}}}],["fileupload/data/upload.model.ts:100",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:104",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:113",{"_index":770,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:17",{"_index":769,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:29",{"_index":772,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:36",{"_index":775,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:43",{"_index":777,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:50",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:57",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:64",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:71",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:78",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:85",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:92",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:96",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.store.ts",{"_index":827,"title":{},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["fileupload/ngx",{"_index":430,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/ui/upload",{"_index":297,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload/utils/http/file",{"_index":96,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload/utils/ui/file",{"_index":66,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["fileupload/utils/upload",{"_index":454,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts",{"_index":394,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:13",{"_index":401,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:18",{"_index":398,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:25",{"_index":399,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:32",{"_index":400,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:5",{"_index":396,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/or.validator.ts",{"_index":440,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/or.validator.ts:6",{"_index":441,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/utils/validation/validation.builder.ts",{"_index":899,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/utils/validation/validation.builder.ts:12",{"_index":903,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/utils/validation/validation.builder.ts:8",{"_index":901,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileuploaditemcontext",{"_index":295,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fill",{"_index":607,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filter",{"_index":165,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["find",{"_index":845,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["finished",{"_index":858,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["first",{"_index":894,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flag",{"_index":860,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flex",{"_index":667,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["font",{"_index":657,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["footer",{"_index":750,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["form",{"_index":174,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata",{"_index":175,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["formdata.append(label",{"_index":230,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["formdataname",{"_index":501,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["function",{"_index":407,"title":{},"body":{"classes/GroupedValidator.html":{},"miscellaneous/typealiases.html":{}}}],["gb",{"_index":85,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["get($colors",{"_index":665,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["get($map",{"_index":753,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["getchange",{"_index":147,"title":{},"body":{"classes/FileUpload.html":{}}}],["getdata",{"_index":154,"title":{},"body":{"classes/FileUpload.html":{}}}],["getfile",{"_index":771,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":776,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":774,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":778,"title":{},"body":{"classes/UploadModel.html":{}}}],["getmodel",{"_index":152,"title":{},"body":{"classes/FileUpload.html":{}}}],["getprogress",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["getresponse",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":384,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["getstate",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["getuploaded",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":468,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":682,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(to",{"_index":702,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(top",{"_index":691,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["green",{"_index":756,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":884,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["handle",{"_index":233,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["handled",{"_index":264,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleerror(response",{"_index":283,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleevent(event",{"_index":487,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":583,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["handlehttpevent(event",{"_index":234,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleprogress(event",{"_index":249,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleresponse(res",{"_index":259,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlesent",{"_index":246,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["happen",{"_index":482,"title":{},"body":{"classes/UploadControl.html":{}}}],["haserror",{"_index":103,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["haserrors",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":710,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["height",{"_index":725,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["here",{"_index":265,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["hidden",{"_index":717,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["highlight.js",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":526,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hostlistener",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":364,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":570,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlistener(\"drop",{"_index":572,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlisteners",{"_index":504,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["html",{"_index":759,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["htmlinputelement",{"_index":554,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["http",{"_index":120,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["http/file",{"_index":473,"title":{},"body":{"classes/UploadControl.html":{}}}],["httpclient",{"_index":113,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["httpclientmodule",{"_index":435,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":160,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpevent",{"_index":156,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype",{"_index":157,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.response",{"_index":243,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.sent",{"_index":238,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.uploadprogress",{"_index":241,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpprogressevent",{"_index":158,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpresponse",{"_index":159,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["https://colorzilla.com/gradient",{"_index":683,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["icon",{"_index":888,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["icons",{"_index":656,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["idatanode",{"_index":409,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["identifier",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":873,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ie10",{"_index":705,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["igniteui",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["implements",{"_index":79,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":438,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":411,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":371,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["inheritdoc",{"_index":374,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["inner",{"_index":736,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["input",{"_index":304,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["input(\"ngxfileupload",{"_index":546,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["input[type=\"file",{"_index":629,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputfield",{"_index":620,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputs",{"_index":499,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["instance",{"_index":273,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["instanceof",{"_index":284,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["interface",{"_index":171,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":296,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":451,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["iscancelable",{"_index":208,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["isinvalid",{"_index":104,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["isnan(size",{"_index":87,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["item",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item'},{'name",{"_index":762,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item.component.html",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.scss",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.ts",{"_index":299,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:137",{"_index":647,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:27",{"_index":649,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:32",{"_index":648,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:50",{"_index":643,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:59",{"_index":644,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:62",{"_index":645,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:66",{"_index":640,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:80",{"_index":641,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:91",{"_index":646,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item/upload",{"_index":298,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["items",{"_index":351,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["itemtemplate",{"_index":843,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["itemtpl",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["justify",{"_index":886,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["kb",{"_index":83,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["key",{"_index":412,"title":{},"body":{"interfaces/IDataNode.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":392,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["label",{"_index":228,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["last",{"_index":747,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["left",{"_index":732,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["legend",{"_index":418,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["lib/.../upload.ts",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":973,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/data/api",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["lib/data/api/validation",{"_index":402,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["lib/data/upload.model",{"_index":170,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/ui",{"_index":436,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadViewComponent.html":{}}}],["lib/utils/http/file",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["lib/utils/ui",{"_index":437,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["lib/utils/upload",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["light",{"_index":893,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#2e2e2e",{"_index":896,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#3e3e3e",{"_index":897,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(map",{"_index":740,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["line",{"_index":751,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["linear",{"_index":690,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["list",{"_index":588,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["listen",{"_index":587,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["listener",{"_index":527,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["literal",{"_index":825,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["manager",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["mandatory",{"_index":849,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["map",{"_index":664,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["margin",{"_index":718,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["matching",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(progress",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["mb",{"_index":84,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["message",{"_index":267,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["messages",{"_index":271,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["metadata",{"_index":69,"title":{},"body":{"pipes/FileSizePipe.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":961,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":109,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["module",{"_index":414,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":416,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":366,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["move",{"_index":819,"title":{},"body":{"classes/UploadModel.html":{}}}],["moz",{"_index":689,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["much",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["multiple",{"_index":623,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["need",{"_index":856,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["new",{"_index":186,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":200,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["ngmodule",{"_index":432,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":387,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["ngoninit",{"_index":375,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["ngx",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["ngxfileupload",{"_index":495,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileupload(url",{"_index":547,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ngxfileuploadcomponent",{"_index":830,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective",{"_index":511,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective]{@link",{"_index":864,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem",{"_index":457,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem]{@link",{"_index":475,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":863,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadmodule",{"_index":415,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["ngxfileuploadref",{"_index":545,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["none",{"_index":625,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["notification",{"_index":292,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notified",{"_index":528,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["notify",{"_index":150,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["notifyobservers",{"_index":293,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["now",{"_index":347,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["nowrap",{"_index":713,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":73,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":181,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["object.assign(validationresult",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":149,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["observe",{"_index":224,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observers",{"_index":188,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["of(upload).pipe(delay(1000",{"_index":872,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["old",{"_index":687,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["once",{"_index":537,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onclick(event",{"_index":578,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ondestroy",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["onfiledragover(event",{"_index":571,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfiledrop(event",{"_index":573,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfileselect(event",{"_index":630,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["oninit",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onitemclick(event",{"_index":365,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onuploadcompleted",{"_index":841,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadcompleted(upload",{"_index":852,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd",{"_index":842,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd(uploads",{"_index":854,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["opera12",{"_index":708,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":115,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["or(...validators",{"_index":908,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":902,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":905,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":439,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":909,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":633,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["out",{"_index":429,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":745,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["output",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["outputs",{"_index":503,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["over",{"_index":532,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["overflow",{"_index":715,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["overview",{"_index":964,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":937,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":670,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["parsefloat(size.tostring",{"_index":88,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pass",{"_index":372,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passed",{"_index":352,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passes",{"_index":485,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":658,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["permalink",{"_index":679,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["pipe",{"_index":63,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{},"index.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":602,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["pipes",{"_index":65,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pipetransform",{"_index":77,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["plain",{"_index":519,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["pointer",{"_index":743,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["position",{"_index":727,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["post",{"_index":178,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["pre",{"_index":606,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["prevalidateupload(upload",{"_index":609,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["private",{"_index":80,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["progress",{"_index":248,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":724,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["progressevent",{"_index":272,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providers",{"_index":421,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["queue",{"_index":550,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["queued",{"_index":144,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["quickly",{"_index":834,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["radius",{"_index":674,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["range",{"_index":256,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["raw",{"_index":773,"title":{},"body":{"classes/UploadModel.html":{}}}],["readonly",{"_index":453,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":616,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["red",{"_index":755,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["register",{"_index":370,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["relative",{"_index":728,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["remote",{"_index":456,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":386,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["removed",{"_index":484,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["removeupload(upload",{"_index":871,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["render",{"_index":373,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["rendered",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["renderer",{"_index":507,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["renderer2",{"_index":508,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["reportprogress",{"_index":223,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["repository",{"_index":590,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["represents",{"_index":99,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["request",{"_index":146,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["res.body",{"_index":261,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.ok",{"_index":260,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status(400).send(what",{"_index":277,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["reset",{"_index":140,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"index.html":{}}}],["responds",{"_index":253,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response",{"_index":131,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["response.error",{"_index":279,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response.message",{"_index":275,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["restart",{"_index":137,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["retry",{"_index":105,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["retry(event",{"_index":463,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":393,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["reverse",{"_index":878,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["right",{"_index":746,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["row",{"_index":721,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["running",{"_index":269,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["rxjs",{"_index":163,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":166,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["safari7",{"_index":709,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["sanitize",{"_index":266,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["save",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["search",{"_index":539,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["sec",{"_index":870,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["security",{"_index":615,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["see",{"_index":282,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["select",{"_index":614,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selected",{"_index":580,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selector",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["send",{"_index":176,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["sends",{"_index":128,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["server",{"_index":127,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["service",{"_index":119,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["set",{"_index":134,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["setngxfileupload(url",{"_index":543,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["setresponse(response",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["setstate(state",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["settemplate(tpl",{"_index":651,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setup",{"_index":832,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["setupload(fileupload",{"_index":650,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":681,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["showlist",{"_index":840,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["shrink",{"_index":883,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["simply",{"_index":835,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["single",{"_index":100,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["size",{"_index":75,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["size.pipe.ts",{"_index":68,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["size.pipe.ts:10",{"_index":74,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["size/file",{"_index":67,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["sizing",{"_index":881,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["solid",{"_index":677,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["something",{"_index":189,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["sort",{"_index":391,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":712,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["start",{"_index":106,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":469,"title":{},"body":{"classes/UploadControl.html":{}}}],["started",{"_index":245,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["state",{"_index":141,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["state(state",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["statechange",{"_index":344,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["statements",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":355,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["status",{"_index":257,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stop",{"_index":460,"title":{},"body":{"classes/UploadControl.html":{}}}],["stop(event",{"_index":471,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopped",{"_index":185,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["store",{"_index":214,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stream",{"_index":187,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["streams",{"_index":286,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["string",{"_index":76,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["style",{"_index":758,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["styles",{"_index":637,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["styleurls",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["sub",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["sub.unsubscribe",{"_index":604,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subject",{"_index":124,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["subscribe",{"_index":199,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["subscribtions",{"_index":549,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subscription",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["success",{"_index":206,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":968,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":969,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":235,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["table",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":164,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["takeuntil(this.cancel",{"_index":197,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["template",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["template(tpl",{"_index":356,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["templateref",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["templateurl",{"_index":319,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["text",{"_index":714,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["think",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.add",{"_index":555,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.add.emit(uploads",{"_index":586,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.cancel",{"_index":291,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.complete",{"_index":290,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.next(true",{"_index":211,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancelall",{"_index":560,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.changed",{"_index":350,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changed.emit(upload",{"_index":382,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changesub",{"_index":376,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changesub.unsubscribe",{"_index":389,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completed",{"_index":348,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completed.emit(this.fileupload",{"_index":383,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completeupload",{"_index":212,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.context",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.context.data",{"_index":378,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.createfieldinputfield",{"_index":557,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createupload(file",{"_index":585,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createuploadbody",{"_index":221,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.destroyed$.complete",{"_index":559,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.destroyed$.next(true",{"_index":558,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.disabled",{"_index":574,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.execvalidator(validator",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.size",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.type",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.filename",{"_index":820,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":556,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.click",{"_index":579,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.files",{"_index":635,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.value",{"_index":634,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.filesize",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":388,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.change",{"_index":377,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.retry",{"_index":478,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":479,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.formdataname",{"_index":595,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handleerror(error",{"_index":203,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleevent(event",{"_index":477,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":577,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handlehttpevent(event",{"_index":202,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleprogress(event",{"_index":242,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleresponse(event",{"_index":244,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlesent",{"_index":239,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.http.post(this.options.url",{"_index":222,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.itemtpl",{"_index":358,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.notifyobservers",{"_index":210,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.onfileselect(e",{"_index":628,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.options",{"_index":192,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.enabled",{"_index":227,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.name",{"_index":229,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.prevalidateupload(filemodel",{"_index":600,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.progress",{"_index":821,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.removeupload(upload",{"_index":868,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.renderer.listen(inputfield",{"_index":626,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":622,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":624,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.response",{"_index":822,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.showlist",{"_index":867,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.start",{"_index":207,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.state",{"_index":823,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.statechange",{"_index":349,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.statechange.emit(this.fileupload",{"_index":381,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.units.length",{"_index":92,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.units[unit",{"_index":94,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.upload",{"_index":190,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.asobservable",{"_index":215,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.complete",{"_index":289,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.next(this.upload",{"_index":294,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.file",{"_index":231,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.filename",{"_index":232,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.response",{"_index":205,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.state",{"_index":194,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.tojson",{"_index":216,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.uploaded",{"_index":251,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploaded",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile().pipe",{"_index":196,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploadresponse",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploads",{"_index":561,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.foreach((upload",{"_index":562,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.indexof(upload",{"_index":874,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.length",{"_index":564,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["this.uploads.push(...uploads",{"_index":866,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.push(upload",{"_index":605,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.splice(idx",{"_index":875,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.splice(this.uploads.indexof(upload",{"_index":603,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i",{"_index":566,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i].cancel",{"_index":565,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploadvalidationerrors",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.url",{"_index":548,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.useformdata",{"_index":594,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validationerrors",{"_index":824,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.validator",{"_index":599,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator(upload.file",{"_index":611,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator.validate(upload.file",{"_index":610,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validators",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":405,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":177,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["throw",{"_index":263,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["timer",{"_index":474,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":486,"title":{},"body":{"classes/UploadControl.html":{}}}],["todo",{"_index":591,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["tojson",{"_index":765,"title":{},"body":{"classes/UploadModel.html":{}}}],["top",{"_index":733,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tpl",{"_index":357,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["transform",{"_index":71,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{}}}],["transform(size",{"_index":72,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["transition",{"_index":737,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["translate",{"_index":734,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tree",{"_index":639,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["trigger",{"_index":551,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["tslib",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["type=\"file",{"_index":582,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["typealiases",{"_index":971,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ul",{"_index":757,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["unit",{"_index":89,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["units",{"_index":81,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["unsubscribe",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["uplaod",{"_index":589,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload",{"_index":101,"title":{"interfaces/Upload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["upload(fileupload",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.cancel",{"_index":569,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.change",{"_index":601,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.haserror",{"_index":568,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.isinvalid",{"_index":567,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.model",{"_index":448,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["upload.module.ts",{"_index":431,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":652,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.response.body.message",{"_index":655,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.size",{"_index":653,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.start",{"_index":563,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.state",{"_index":380,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["upload.tojson",{"_index":379,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.ts",{"_index":97,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["upload.ts:100",{"_index":121,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:116",{"_index":148,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:121",{"_index":153,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:125",{"_index":155,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:133",{"_index":125,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:140",{"_index":133,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:53",{"_index":117,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:71",{"_index":143,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:89",{"_index":136,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.validationerrors",{"_index":612,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadall",{"_index":498,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadbody",{"_index":220,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadcontrol",{"_index":301,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploaddata",{"_index":169,"title":{"interfaces/UploadData.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddata.name",{"_index":837,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploaded",{"_index":450,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["uploaded(bytes",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadfile",{"_index":219,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadfiledirective",{"_index":426,"title":{"directives/UploadFileDirective.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploaditemcomponent",{"_index":323,"title":{"components/UploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploadmodel",{"_index":114,"title":{"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":597,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadoptions",{"_index":116,"title":{"interfaces/UploadOptions.html":{}},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadresponse",{"_index":168,"title":{"interfaces/UploadResponse.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":492,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["uploadstate",{"_index":167,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":198,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.error",{"_index":204,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.invalid",{"_index":217,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.progress",{"_index":250,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.queued",{"_index":195,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.start",{"_index":247,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.uploaded",{"_index":209,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstore",{"_index":826,"title":{"classes/UploadStore.html":{}},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["uploadvalidation",{"_index":452,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadviewcomponent",{"_index":427,"title":{"components/UploadViewComponent.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":172,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["use",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["used",{"_index":173,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["useformdata",{"_index":502,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["valid",{"_index":193,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validated",{"_index":135,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":898,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":408,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(file",{"_index":406,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":513,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":760,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["very",{"_index":833,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["via",{"_index":581,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["view",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["view.html",{"_index":839,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.scss",{"_index":838,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts",{"_index":829,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["view.ts:43",{"_index":846,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:50",{"_index":848,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:57",{"_index":850,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:63",{"_index":844,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:69",{"_index":851,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:74",{"_index":861,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:79",{"_index":859,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:85",{"_index":855,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:93",{"_index":853,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view/upload",{"_index":828,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["viewchild",{"_index":305,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":354,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["w3c",{"_index":704,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["wait",{"_index":869,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["want",{"_index":278,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["webdriver",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":697,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["white",{"_index":711,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["width",{"_index":723,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["window",{"_index":552,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["within",{"_index":254,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["without",{"_index":618,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["wrapped",{"_index":180,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["wrapper",{"_index":831,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["written",{"_index":213,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["x",{"_index":882,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["yes",{"_index":397,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":730,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["zone.js",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":428,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"@lib/data/api\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FileSizePipe.html":{"url":"pipes/FileSizePipe.html","title":"pipe - FileSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FileSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        fileSize\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"fileSize\"\n})\nexport class FileSizePipe implements PipeTransform {\n\n    private units = [\"Byte\", \"Kb\", \"Mb\", \"Gb\"];\n\n    transform(size: number): string {\n        let bytes = isNaN(size) ? parseFloat(size.toString()) : size;\n        let unit  = 0;\n\n        while (bytes > 1024 && this.units.length > unit) {\n            bytes = bytes / 1024;\n            unit++;\n        }\n        return `${bytes.toFixed(2)} ${this.units[unit]}`;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUpload.html":{"url":"classes/FileUpload.html","title":"class - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n            \n                Implements\n            \n            \n                            Upload\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                                \n                                    model\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/http/file-upload.ts:53\n                            \n                        \n\n                \n                    \n                            create FileUpload service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:100\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:133\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:140\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:89\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:71\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:116\n                                \n                            \n                    \n                        \n                                returns observable which notify if file upload state\nhas been changed\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                \n\n                \n                    \n                        getmodel()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:121\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:125\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get model(): UploadModel {\n        return this.upload;\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\nimport { UploadControl } from \"@lib/utils/upload-control\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { UploadData, UploadState, Upload } from \"@lib/data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    /** @deprecated use stateChange now */\n    @Output()\n    public changed: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.changed     = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n\n        let state: UploadState = UploadState.QUEUED;\n\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n\n                    if (state !== upload.state) {\n                        this.stateChange.emit(this.fileUpload);\n                        this.changed.emit(upload);\n                        state = upload.state;\n                    }\n                },\n                complete: () => {\n                    this.completed.emit(this.fileUpload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        // cancel file upload if item view is destroyed\n        this.fileUpload.cancel();\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"@lib/data/api/validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/index.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/index.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface IDataNode {\n    [key: string]: any;\n}\n\nexport * from \"./validation\";\nexport * from \"./upload\";\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { UploadViewComponent, UploadFileDirective, UploadItemComponent } from \"@lib/ui\";\nimport { FileSizePipe } from \"@lib/utils/ui\";\n\n@NgModule({\n    declarations: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n    ],\n    exports: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationErrors } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Upload.html":{"url":"interfaces/Upload.html","title":"interface - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        change\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                                \n                                    hasError\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    retry\n                                \n                                \n                                    start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:63\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:69\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \nisInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:74\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \nretry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:58\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:52\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change\n                                    \n                                \n                                \n                                    \n                                        change:         Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Observable\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns observable which notify if file upload state\nhas been changed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    get upload data informations\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/upload-control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: FileUpload)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/upload-control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        FileUpload\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:34\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:42\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:50\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileUpload } from \"./http/file-upload\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     *\n     */\n    public constructor(\n        private fileUpload: FileUpload\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/UploadFileDirective.html":{"url":"directives/UploadFileDirective.html","title":"directive - UploadFileDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  UploadFileDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-file/upload-file.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancelAll\n                            \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ngxFileUpload\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:74\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:53\n                            \n                        \n                \n                    \n                        form data field name with which form >data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:46\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:59\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:32\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:155\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:131\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:140\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancelAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:108\n                \n            \n\n\n            \n                \n                    cancel all downloads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:118\n                \n            \n\n\n            \n                \n                    search for broken uploads (error / invalid) and cancel\nthem\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:101\n                \n            \n\n\n            \n                \n                    begin all uploads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:34\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n\n\n                \n                    \n                        setngxFileUpload(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\n\nimport { Validator, ValidationFn, UploadState } from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\",\n  exportAs: \"ngxFileUploadRef\"\n})\nexport class UploadFileDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    public url: string;\n\n    @Input(\"ngxFileUpload\")\n    public set ngxFileUpload(url: string) {\n        this.url = url;\n    }\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form >data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public disabled = false;\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * upload file queue\n     */\n    private uploads: FileUpload[] = [];\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private httpClient: HttpClient,\n        private renderer: Renderer2\n    ) {\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n\n        this.cancelAll();\n        this.uploads = [];\n    }\n\n    /**\n     * begin all uploads at once\n     */\n    public uploadAll() {\n        this.uploads.forEach((upload: FileUpload) => upload.start());\n    }\n\n    /**\n     * cancel all downloads at once\n     */\n    public cancelAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            this.uploads[i].cancel();\n        }\n    }\n\n    /**\n     * search for broken uploads (error / invalid) and cancel\n     * them\n     */\n    public cleanAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            const upload = this.uploads[i];\n            if (upload.isInvalid() || upload.hasError()) {\n                upload.cancel();\n            }\n        }\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            const files = Array.from(event.dataTransfer.files);\n            this.handleFileSelect(files);\n        }\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        const uploads = files.map((file) => this.createUpload(file));\n        this.add.emit(uploads);\n    }\n\n    /**\n     * create upload from file, listen to complete\n     * to remove upload from uploads list\n     *\n     * remove uplaod from uploads repository if upload completed\n     * or canceled\n     *\n     * @todo should be an action\n     */\n    private createUpload(file: File): FileUpload {\n        const uploadOptions = {\n            url: this.url,\n            formData: {\n                enabled: this.useFormData,\n                name   : this.formDataName\n            }\n        };\n\n        const fileModel = new UploadModel(file);\n        const upload    = new FileUpload(this.httpClient, fileModel, uploadOptions);\n\n        if (this.validator) {\n            this.preValidateUpload(fileModel);\n        }\n        if (!upload.isInvalid()) {\n            const sub = upload.change\n                .pipe(takeUntil(this.destroyed$))\n                .subscribe({\n                    complete: () => {\n                        this.uploads.splice(this.uploads.indexOf(upload), 1);\n                        sub.unsubscribe();\n                    }\n                });\n        }\n\n        this.uploads.push(upload);\n        return upload;\n    }\n\n    /**\n     * pre validate upload, if validation result is invalid\n     * fill could not uploaded anymore\n     *\n     * @todo should be an action ?\n     */\n    private preValidateUpload(upload: UploadModel) {\n        const result = \"validate\" in this.validator ? this.validator.validate(upload.file) : this.validator(upload.file);\n        if (result !== null) {\n            upload.state = UploadState.INVALID;\n        }\n        upload.validationErrors = result;\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadItemComponent.html":{"url":"components/UploadItemComponent.html","title":"component - UploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./upload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                upload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changed\n                            \n                            \n                                completed\n                            \n                            \n                                stateChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:66\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:80\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        stateChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:62\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:91\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:137\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:32\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:27\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:80\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\nimport { UploadControl } from \"@lib/utils/upload-control\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { UploadData, UploadState, Upload } from \"@lib/data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    /** @deprecated use stateChange now */\n    @Output()\n    public changed: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.changed     = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n\n        let state: UploadState = UploadState.QUEUED;\n\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n\n                    if (state !== upload.state) {\n                        this.stateChange.emit(this.fileUpload);\n                        this.changed.emit(upload);\n                        state = upload.state;\n                    }\n                },\n                complete: () => {\n                    this.completed.emit(this.fileUpload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        // cancel file upload if item view is destroyed\n        this.fileUpload.cancel();\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{upload.name}}\n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | fileSize}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n                \n                    {{error}}\n                \n            \n\n            \n                \n                    {{upload.response.body.message}}\n                \n                \n                    {{upload.name}} uploaded\n                \n            \n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./upload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: 1rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n            transition: width .25s linear;\n        }\n    }\n\n    .upload-item--actions {\n\n        padding: .25rem;\n        display: flex;\n\n        button {\n            padding: 0;\n            background: lighten(map-get($colors, 'dark'), 25%);\n            color: map-get($colors, 'white');\n            border-radius: 50%;\n            border: 0;\n            height: 1rem; \n            width: 1rem; \n            cursor: pointer;\n            font-size: .75rem;\n            outline: none;\n\n            margin-right: .25rem;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                background: lighten(map-get($colors, 'dark'), 50%);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n            text-align: left;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{upload.name}}                                                                                                                        {{upload.size | fileSize}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                            {{error}}                                                                            {{upload.response.body.message}}                                                    {{upload.name}} uploaded                                        '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.model.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/upload.model.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/upload.model.ts:113\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:29\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:36\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:43\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:50\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:64\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:57\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:78\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:71\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:92\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:85\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:100\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:96\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:104\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"./api/validation\";\nimport { UploadState, UploadResponse, UploadData } from \"./api/upload\";\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get model(): UploadModel {\n        return this.upload;\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadStore.html":{"url":"classes/UploadStore.html","title":"class - UploadStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.store.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Upload } from \"./api/upload\";\n\nexport class UploadStore {\n\n    private uploads: Upload[] = [];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadViewComponent.html":{"url":"components/UploadViewComponent.html","title":"component - UploadViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-view/upload-view.ts\n\n\n    \n        Description\n    \n    \n        NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\nto setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\nor NgxFileUploadComponent. This component simply handle all events / changes from upload.\n\n    \n\n\n\n    \n        Example\n    \n    \n                \n                    \n\n                \n                \n                    \n\n{{uploadData.name}}\n\n\n\n                \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./upload-view.scss\n            \n\n\n\n            \n                templateUrl\n                upload-view.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showList\n                            \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUploadCompleted\n                            \n                            \n                                    Public\n                                onUploadsAdd\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:63\n                            \n                        \n                \n                    \n                        set field name for FormData Object where to find the file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :         TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:43\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:50\n                            \n                        \n                \n                    \n                        input which url should be used to upload files,\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:57\n                            \n                        \n                \n                    \n                        by default files will send through FormData Object, if set to false file will send plain into\npost body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:69\n                            \n                        \n                \n                    \n                        set validator\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadCompleted(upload: Upload)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:93\n                \n            \n\n\n            \n                \n                    if state is canceled or uploaded remove it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                Upload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadsAdd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadsAdd(uploads: Upload[])\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:85\n                \n            \n\n\n            \n                \n                    new uploads has been added we need to care about this to remove\nfinished uploads from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploads\n                                    \n                                                Upload[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:79\n                            \n                        \n\n                \n                    \n                        flag list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Upload[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:74\n                            \n                        \n\n                \n                    \n                        all uploads which has been added in NgxFileUploadDirective\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, TemplateRef, Input } from \"@angular/core\";\nimport { delay } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\n\nimport { Upload } from \"../../data/api/upload\";\nimport { FileUploadItemContext } from \"@lib/ui\";\nimport { Validator, ValidationFn } from \"@lib/data/api/validation\";\n\n/**\n * NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\n * to setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\n * or NgxFileUploadComponent. This component simply handle all events / changes from upload.\n *\n * @example\n * \n * \n *\n *\n * @example\n * \n * \n *    {{uploadData.name}}\n * \n *\n * \n *\n *\n * @example\n * \n * \n */\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./upload-view.scss\"],\n    templateUrl: \"upload-view.html\"\n})\nexport class UploadViewComponent {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    /**\n     * input which url should be used to upload files,\n     * this field is mandatory\n     */\n    @Input()\n    public url: string;\n\n    /**\n     * by default files will send through FormData Object, if set to false file will send plain into\n     * post body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * set field name for FormData Object where to find the file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * set validator\n     */\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * all uploads which has been added in [NgxFileUploadDirective]{@link ../directives/NgxFileUploadDirective.html#add}\n     */\n    public uploads: Upload[] = [];\n\n    /**\n     * flag list\n     */\n    public showList = false;\n\n    /**\n     * new uploads has been added we need to care about this to remove\n     * finished uploads from list\n     */\n    public onUploadsAdd(uploads: Upload[]) {\n        this.uploads.push(...uploads);\n        this.showList = this.uploads.length > 0;\n    }\n\n    /**\n     * if state is canceled or uploaded remove it\n     */\n    public onUploadCompleted(upload: Upload) {\n        this.removeUpload(upload);\n    }\n\n    /**\n     * remove upload from list but wait for 1 sec before it will be removed\n     */\n    private removeUpload(upload: Upload) {\n        of(upload).pipe(delay(1000))\n            .subscribe({\n                next: () => {\n                    const idx = this.uploads.indexOf(upload);\n                    this.uploads.splice(idx, 1);\n                    this.showList = this.uploads.length > 0;\n                }\n            });\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n        \n    \n\n\n    Cancel\n    Clean Up\n    Upload\n\n\n    \n\n    \n                \n                    ./upload-view.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n        padding: 1rem 0;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    Drag/Drop files here or click                                        Cancel    Clean Up    Upload'\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/data/api/index.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            Upload\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.model.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.store.ts\n            \n            class\n            UploadStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-file/upload-file.ts\n            \n            directive\n            UploadFileDirective\n            \n                73 %\n                (11/15)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            component\n            UploadItemComponent\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-view/upload-view.ts\n            \n            component\n            UploadViewComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            class\n            FileUpload\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n            \n            pipe\n            FileSizePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/upload-control.ts\n            \n            class\n            UploadControl\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.9\n        \n            @angular/common : 8.2.9\n        \n            @angular/compiler : 8.2.9\n        \n            @angular/core : 8.2.9\n        \n            @angular/forms : 8.2.9\n        \n            @angular/platform-browser : 8.2.9\n        \n            @angular/platform-browser-dynamic : 8.2.9\n        \n            @angular/router : 8.2.9\n        \n            highlight.js : ^9.15.10\n        \n            igniteui-angular : ^8.2.2\n        \n            ngx-highlightjs : ^3.0.3\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            webdriver-manager : ^12.1.7\n        \n            zone.js : 0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 QUEUED\n                            \n                        \n                        \n                            \n                                Value : queued\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : progress\n                            \n                        \n                        \n                            \n                                 UPLOADED\n                            \n                        \n                        \n                            \n                                Value : uploaded\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
