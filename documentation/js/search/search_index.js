var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.172,1,1.903]],["body/classes/AndValidator.html",[0,0.188,1,2.76,2,1.246,3,0.283,4,0.283,5,0.431,6,0.191,7,2.737,8,3.631,9,2.934,10,0.387,11,1.247,12,3.744,13,1.872,14,1.133,15,1.671,16,2.944,17,2.486,18,3.299,19,3.132,20,3.132,21,0.551,22,0.037,23,2.486,24,4.516,25,1.186,26,2.737,27,2.764,28,3.307,29,1.49,30,0.894,31,1.354,32,0.957,33,1.594,34,1.186,35,2.361,36,2.737,37,1.027,38,2.737,39,2.08,40,2.361,41,1.872,42,1.653,43,2.737,44,2.361,45,1.134,46,0.032,47,2.737,48,0.588,49,2.361,50,3.307,51,0.283,52,2.248,53,3.631,54,4.923,55,1.856,56,2.361,57,2.737,58,2.737,59,1.033,60,0.699,61,0.026,62,0.019]],["title/pipes/FileSizePipe.html",[63,1.527,64,1.698]],["body/pipes/FileSizePipe.html",[0,0.231,3,0.348,4,0.348,5,0.288,6,0.217,14,1.048,21,0.41,22,0.037,25,0.859,29,1.154,30,0.925,31,1.048,32,0.693,46,0.024,48,0.544,51,0.348,60,0.859,61,0.029,62,0.024,63,2.527,64,2.809,65,4.061,66,4.141,67,4.141,68,3.361,69,2.555,70,3.572,71,3.361,72,5.004,73,2.476,74,4.061,75,2.073,76,1.292,77,5.004,78,1.854,79,1.854,80,1.393,81,4.061,82,3.361,83,4.061,84,4.061,85,4.061,86,4.684,87,4.061,88,4.061,89,5.423,90,1.683,91,5.004,92,4.061,93,4.061,94,4.061]],["title/classes/FileUpload.html",[0,0.172,95,1.14]],["body/classes/FileUpload.html",[0,0.092,2,0.611,3,0.139,4,0.139,5,0.389,6,0.217,10,0.19,13,0.891,14,0.671,15,1.609,21,0.164,22,0.038,23,0.819,25,1.032,29,0.461,30,0.633,31,0.419,32,0.854,34,0.917,37,0.76,46,0.01,48,0.545,51,0.223,52,1.856,55,1.824,59,1.422,60,1.059,61,0.015,62,0.01,76,0.839,79,1.186,80,1.839,95,1.4,96,3.574,97,1.158,98,0.741,99,1.854,100,1.854,101,1.12,102,1.563,103,1.875,104,1.875,105,1.696,106,1.684,107,1.634,108,1.531,109,2.652,110,1.394,111,1.076,112,1.622,113,2.652,114,1.155,115,3.251,116,2.281,117,1.622,118,2.319,119,2.149,120,2.319,121,1.622,122,1.224,123,1.4,124,1.531,125,1.622,126,1.015,127,2.464,128,1.64,129,1.64,130,1.487,131,1.696,132,2.052,133,1.622,134,1.015,135,1.312,136,1.622,137,1.312,138,1.64,139,1.186,140,1.539,141,1.394,142,2.228,143,1.622,144,1.483,145,1.312,146,1.483,147,1.622,148,1.622,149,2.189,150,1.875,151,1.346,152,1.622,153,1.622,154,1.622,155,1.622,156,2.688,157,1.342,158,2.149,159,2.149,160,2.688,161,1.02,162,2.149,163,0.461,164,0.91,165,2.149,166,1.02,167,0.507,168,1.716,169,0.811,170,0.91,171,0.91,172,0.164,173,2.044,174,1.824,175,1.854,176,3.07,177,2.727,178,1.02,179,1.02,180,1.531,181,1.342,182,1.02,183,2.319,184,1.342,185,1.342,186,1.342,187,1.346,188,1.342,189,2.688,190,1.158,191,2.688,192,1.342,193,2.149,194,1.342,195,4.376,196,1.458,197,1.342,198,1.342,199,2.688,200,0.819,201,0.819,202,0.819,203,1.342,204,1.342,205,2.688,206,2.688,207,1.483,208,1.342,209,3.074,210,2.149,211,3.363,212,1.342,213,2.149,214,1.342,215,1.342,216,1.342,217,1.342,218,1.158,219,1.342,220,1.158,221,2.149,222,1.342,223,1.342,224,1.342,225,1.342,226,1.458,227,1.342,228,1.342,229,1.158,230,1.342,231,1.342,232,2.149,233,1.342,234,1.458,235,1.342,236,1.342,237,1.342,238,3.074,239,1.342,240,1.342,241,2.319,242,1.342,243,1.342,244,1.342,245,1.342,246,1.158,247,1.342,248,1.342,249,0.611,250,1.342,251,1.342,252,1.342,253,1.342,254,1.342,255,1.342,256,1.342,257,2.149,258,2.688,259,2.149,260,1.342,261,1.342,262,1.342,263,1.342,264,1.342,265,1.342,266,0.91,267,1.342,268,1.158,269,1.342,270,1.342,271,1.158,272,2.149,273,2.149,274,1.02,275,1.634,276,2.149,277,1.342,278,1.342,279,1.02,280,2.688,281,1.158,282,1.02,283,1.342,284,1.342,285,0.91,286,1.342,287,1.342,288,1.342,289,1.342,290,1.342,291,1.342,292,1.342,293,1.342,294,1.342,295,1.342,296,1.342,297,1.342]],["title/interfaces/FileUploadItemContext.html",[172,0.306,298,1.698]],["body/interfaces/FileUploadItemContext.html",[0,0.149,3,0.224,4,0.224,5,0.309,6,0.114,10,0.306,11,1.06,15,1.611,21,0.377,22,0.038,34,0.789,37,0.612,46,0.015,48,0.699,51,0.32,59,0.817,60,0.553,61,0.022,62,0.015,63,1.32,78,1.194,79,1.194,80,1.28,90,1.084,95,1.966,101,1.113,102,0.817,108,1.406,110,1.79,111,1.084,114,1.06,122,1.406,123,0.985,124,0.985,126,0.817,134,1.359,141,1.493,151,1.084,163,0.743,164,1.468,167,1.166,169,1.482,170,1.468,171,1.468,172,0.264,174,1.468,187,1.966,196,1.468,200,1.32,201,1.32,202,1.884,226,1.468,266,1.468,275,1.645,279,1.645,282,1.645,285,1.468,298,2.443,299,0.897,300,1.468,301,1.867,302,1.867,303,4.153,304,2.664,305,1.987,306,3.088,307,2.738,308,2.164,309,3.583,310,1.867,311,2.664,312,3.388,313,3.835,314,1.867,315,2.164,316,1.867,317,3.927,318,3.388,319,1.645,320,1.645,321,2.738,322,1.867,323,2.164,324,1.867,325,2.164,326,1.194,327,3.283,328,3.088,329,1.645,330,2.164,331,3.601,332,3.088,333,2.164,334,1.468,335,1.867,336,2.164,337,2.164,338,2.164,339,1.645,340,2.164,341,2.164,342,2.164,343,2.164,344,2.164,345,2.164,346,2.164,347,3.088,348,2.164,349,1.867,350,2.164,351,2.164,352,2.164,353,2.164,354,1.867,355,1.645,356,2.164,357,2.164,358,1.867,359,2.164,360,3.088,361,2.164,362,2.164,363,1.468,364,0.897,365,1.867,366,2.164,367,1.867,368,2.164,369,1.645,370,1.645,371,1.867,372,2.164,373,1.867,374,1.32,375,1.867,376,2.164,377,2.164,378,2.164,379,3.088,380,2.164,381,2.164,382,2.164,383,2.664,384,2.164,385,2.164,386,2.164,387,1.867,388,2.664,389,1.645,390,1.867,391,1.867,392,2.164,393,2.164,394,2.164,395,2.164,396,2.164]],["title/classes/GroupedValidator.html",[0,0.172,9,1.527]],["body/classes/GroupedValidator.html",[0,0.241,2,1.178,3,0.268,4,0.268,5,0.421,6,0.245,9,2.134,10,0.366,11,1.201,12,3.94,13,2.035,14,1.091,15,1.685,16,2.687,17,2.589,18,3.472,19,3.017,20,3.66,21,0.541,22,0.037,23,2.898,25,1.167,27,2.372,29,1.457,30,0.874,31,1.324,32,0.941,33,1.522,34,1.084,35,2.232,37,1.12,39,2.658,40,3.017,41,2.035,42,1.932,44,3.017,45,1.642,46,0.028,48,0.419,51,0.268,56,3.417,60,0.894,61,0.025,62,0.018,79,1.93,111,1.751,234,2.372,339,1.967,397,2.588,398,3.127,399,4.226,400,2.588,401,3.127,402,3.127,403,3.127,404,3.127,405,2.232,406,3.127,407,3.127,408,3.127,409,3.127,410,2.588,411,3.127]],["title/interfaces/IDataNode.html",[172,0.306,412,2.159]],["body/interfaces/IDataNode.html",[3,0.398,4,0.398,5,0.33,6,0.235,22,0.036,25,0.982,45,1.592,46,0.027,51,0.492,61,0.032,62,0.027,76,1.4,101,0.884,172,0.469,299,1.592,412,3.871,413,3.842,414,3.842,415,3.043,416,4.642]],["title/modules/NgxFileUploadModule.html",[417,2.159,418,1.903]],["body/modules/NgxFileUploadModule.html",[0,0.211,3,0.318,4,0.318,5,0.336,6,0.161,22,0.037,46,0.022,48,0.758,51,0.318,61,0.028,62,0.022,64,3.441,78,1.694,140,1.537,161,2.333,326,2.799,417,2.648,418,3.914,419,2.648,420,2.333,421,2.333,422,4.306,423,3.07,424,3.07,425,4.306,426,3.07,427,3.07,428,3.07,429,2.799,430,3.095,431,3.912,432,3.07,433,3.709,434,3.709,435,4.727,436,4.727,437,3.07,438,4.727,439,3.07,440,3.709,441,3.709]],["title/classes/OrValidator.html",[0,0.172,442,1.903]],["body/classes/OrValidator.html",[0,0.19,2,1.256,3,0.286,4,0.286,5,0.431,6,0.192,8,3.651,9,2.939,10,0.39,11,1.253,12,3.756,13,1.877,14,1.139,15,1.674,16,2.953,17,2.496,18,3.31,19,3.149,20,3.149,21,0.553,22,0.037,23,2.496,24,4.528,25,1.189,26,2.759,27,2.775,29,1.495,30,0.897,31,1.358,32,0.959,33,1.597,34,1.213,35,2.38,36,2.759,37,1.032,38,2.759,39,2.098,40,2.38,41,1.877,42,1.662,43,2.759,44,2.38,45,1.144,46,0.032,47,2.759,48,0.591,49,2.38,51,0.286,52,2.014,53,4.091,56,2.38,57,2.759,58,2.759,60,0.705,61,0.026,62,0.02,241,2.38,405,2.38,442,2.775,443,2.759,444,3.334]],["title/interfaces/Upload.html",[101,0.576,172,0.306]],["body/interfaces/Upload.html",[3,0.248,4,0.248,5,0.406,6,0.234,10,0.338,11,1.137,13,1.373,14,1.033,21,0.404,22,0.037,25,1.102,30,0.493,32,0.975,33,1.137,34,0.611,37,1.261,45,1.373,46,0.017,48,0.616,51,0.446,59,1.549,60,0.847,61,0.024,62,0.017,73,2.098,75,1.197,76,0.746,101,1.139,102,1.759,103,2.504,104,2.504,105,2.265,106,2.233,108,2.03,110,1.848,114,0.821,122,1.508,123,1.508,124,1.508,126,1.25,127,2.504,128,2.021,129,2.021,130,1.701,131,2.098,132,2.63,134,1.25,135,2.021,137,2.021,138,2.021,139,1.828,140,2.055,141,1.786,142,2.265,144,2.265,145,2.021,146,1.828,149,2.721,150,2.021,151,1.659,163,0.821,167,1.25,168,1.508,169,1.549,172,0.501,180,1.089,207,1.319,249,1.731,299,0.991,364,1.373,374,2.021,445,1.459,446,2.889,447,2.889,448,2.889,449,2.889,450,2.889,451,1.817,452,1.817,453,1.731,454,2.021,455,2.021,456,2.518]],["title/classes/UploadControl.html",[0,0.172,304,1.698]],["body/classes/UploadControl.html",[0,0.169,2,1.116,3,0.254,4,0.254,5,0.21,6,0.228,10,0.347,14,1.051,15,1.669,17,1.495,21,0.506,22,0.038,25,1.06,29,1.424,30,0.855,31,1.294,32,0.794,37,1.089,46,0.017,48,0.546,51,0.254,61,0.024,62,0.017,80,1.397,90,1.227,95,2.096,98,1.352,100,3.876,101,1.095,102,1.641,105,2.479,106,2.25,111,1.687,120,2.907,126,1.272,130,1.397,163,0.841,178,1.863,190,2.907,201,1.495,202,2.808,246,2.907,271,2.907,285,1.662,304,2.286,316,2.907,321,2.562,327,2.562,355,2.562,363,1.662,364,1.016,365,3.323,369,3.696,370,1.863,391,2.114,400,3.851,457,4.348,458,2.451,459,4.072,460,2.451,461,4.072,462,2.907,463,5.012,464,2.961,465,2.961,466,4.072,467,2.961,468,4.072,469,4.072,470,3.37,471,4.072,472,4.072,473,2.961,474,4.072,475,2.961,476,2.961,477,2.961,478,2.451,479,2.961,480,4.072,481,2.961,482,2.961,483,2.451,484,2.451,485,2.961,486,2.114,487,2.451,488,2.961,489,2.961,490,2.961]],["title/interfaces/UploadData.html",[169,0.945,172,0.306]],["body/interfaces/UploadData.html",[3,0.27,4,0.27,5,0.381,6,0.137,10,0.37,11,1.208,13,1.083,21,0.571,22,0.038,30,0.878,32,0.725,33,1.208,34,0.668,37,1.126,45,1.843,46,0.019,48,0.644,51,0.46,59,1.328,60,0.668,61,0.025,62,0.019,73,2.661,75,2.132,76,1.242,101,1.077,102,1.502,103,1.594,104,1.594,105,1.441,106,1.993,108,1.602,110,1.459,114,0.897,122,1.189,123,1.189,124,1.189,126,0.986,127,2.147,128,1.594,129,1.594,130,1.65,131,2.453,132,2.429,134,0.986,135,1.594,137,1.594,138,1.594,139,1.441,140,1.762,141,1.898,142,2.196,144,2.196,145,1.594,146,1.441,149,2.429,150,1.594,151,1.308,163,0.897,167,1.607,168,1.939,169,1.502,172,0.52,180,1.189,207,1.441,249,2.085,299,1.083,364,1.459,374,1.594,445,1.594,451,1.986,452,1.986,453,2.085,454,2.147,455,2.599,456,2.675]],["title/directives/UploadFileDirective.html",[429,1.381,491,1.527]],["body/directives/UploadFileDirective.html",[0,0.09,3,0.135,4,0.135,5,0.383,6,0.237,10,0.185,11,0.722,14,0.656,15,1.621,16,1.427,17,2.274,21,0.455,22,0.038,25,1.14,29,0.722,30,0.684,31,0.656,32,0.624,34,0.675,37,0.856,41,1.469,42,1.202,45,0.542,46,0.024,48,0.604,51,0.135,52,2.266,55,2.053,59,0.794,60,0.538,61,0.015,62,0.009,69,0.993,76,1.106,78,0.721,79,1.161,80,1.703,90,1.053,95,1.378,98,0.721,101,1.027,102,1.142,107,1.599,108,1.202,110,1.254,111,1.053,113,3.058,114,0.722,116,1.427,118,2.278,123,0.958,124,1.202,126,0.493,130,0.872,134,0.996,139,0.721,146,1.161,161,0.993,163,0.449,164,0.886,166,0.993,167,0.493,170,0.886,171,0.886,173,2.695,175,2.611,176,0.993,177,1.599,179,1.599,180,1.378,182,1.599,183,1.127,187,1.515,200,0.797,202,2.689,218,1.127,234,2.053,274,1.599,300,3.06,305,0.721,307,2.947,310,1.127,311,2.278,312,1.815,313,2.611,314,1.127,319,1.599,329,0.993,334,1.791,335,1.127,349,1.815,363,2.404,364,0.542,367,1.127,369,1.599,370,2.3,371,2.611,373,1.127,383,1.127,387,1.815,388,2.278,389,2.007,390,1.127,429,1.161,453,0.595,454,1.611,462,2.278,470,2.103,491,2.024,492,1.127,493,4.511,494,1.306,495,3.622,496,4.009,497,4.504,498,3.058,499,3.657,500,3.657,501,3.657,502,1.815,503,2.278,504,2.64,505,2.64,506,2.103,507,2.103,508,2.542,509,1.579,510,3.19,511,3.657,512,1.579,513,2.103,514,2.103,515,2.862,516,2.611,517,1.579,518,1.579,519,3.317,520,2.542,521,1.579,522,2.103,523,1.579,524,1.579,525,2.103,526,2.64,527,1.306,528,1.579,529,1.815,530,2.542,531,2.542,532,1.579,533,3.657,534,1.579,535,2.542,536,1.579,537,1.579,538,1.579,539,2.542,540,3.657,541,1.579,542,2.542,543,1.579,544,2.542,545,1.579,546,1.579,547,1.579,548,1.579,549,1.579,550,1.579,551,2.542,552,1.579,553,1.579,554,3.19,555,2.542,556,1.579,557,2.542,558,1.579,559,1.579,560,1.579,561,1.579,562,1.579,563,1.579,564,1.579,565,1.579,566,1.579,567,2.103,568,1.579,569,1.579,570,2.542,571,1.579,572,1.579,573,1.579,574,1.579,575,1.579,576,1.579,577,2.542,578,3.026,579,1.579,580,2.542,581,1.579,582,1.579,583,1.579,584,1.579,585,1.579,586,1.579,587,1.579,588,1.579,589,1.579,590,1.579,591,1.127,592,1.579,593,1.579,594,2.103,595,2.103,596,1.579,597,1.579,598,1.579,599,2.542,600,1.579,601,1.579,602,2.542,603,1.579,604,1.579,605,1.579,606,1.579,607,1.579,608,1.579,609,1.579,610,1.579,611,1.579,612,1.579,613,1.579,614,1.579,615,1.579,616,1.579,617,2.542,618,1.579,619,1.579,620,1.579,621,1.579,622,1.579,623,2.542,624,1.579,625,2.542,626,2.542,627,1.579,628,1.306,629,1.579,630,1.579,631,1.579,632,1.579,633,1.579,634,1.579,635,1.579,636,1.579,637,1.579,638,1.579]],["title/components/UploadItemComponent.html",[305,1.381,326,1.381]],["body/components/UploadItemComponent.html",[0,0.084,3,0.126,4,0.126,5,0.216,6,0.224,10,0.281,11,0.681,14,0.619,15,1.54,21,0.419,22,0.038,25,1.071,29,0.681,30,0.659,31,0.619,32,0.518,34,0.507,37,0.711,46,0.009,48,0.611,51,0.205,59,0.459,60,0.311,61,0.014,62,0.009,63,1.211,69,0.924,70,1.712,71,1.216,73,0.671,75,1.453,78,0.671,79,1.095,80,0.822,90,2.136,95,1.871,98,0.671,101,1.135,102,0.459,107,1.508,108,0.903,110,1.202,111,1.259,114,0.681,122,1.321,123,0.554,124,0.554,126,0.949,130,1.042,134,1.206,141,1.202,151,1.259,163,0.417,164,0.825,167,0.749,169,0.749,170,0.825,171,0.825,172,0.148,174,1.705,180,0.903,187,1.453,196,0.825,200,0.742,201,0.742,202,1.534,207,0.671,226,1.346,229,1.049,249,0.903,266,0.825,268,1.049,275,1.911,279,1.911,282,1.508,285,0.825,298,1.705,300,2.893,301,3.68,302,1.049,303,1.984,304,1.346,305,1.601,306,2.514,307,1.911,308,1.216,309,3.255,310,1.049,311,2.169,312,2.503,313,3.463,314,1.049,315,1.216,316,1.049,317,2.901,318,3.121,319,2.43,320,2.43,321,3.375,322,1.712,323,1.984,324,1.712,325,2.514,326,1.601,327,3.375,328,2.901,329,2.75,330,2.514,331,3.429,332,2.514,333,1.216,334,1.705,335,1.049,336,1.216,337,1.216,338,1.216,339,0.924,340,1.216,341,2.514,342,2.514,343,1.216,344,1.216,345,1.216,346,1.216,347,2.901,348,1.216,349,1.712,350,1.216,351,1.216,352,1.216,353,1.216,354,2.503,355,1.911,356,1.216,357,1.216,358,1.049,359,1.216,360,2.514,361,1.216,362,1.984,363,1.968,364,0.822,365,1.712,366,1.984,367,1.049,368,1.216,369,1.508,370,0.924,371,1.049,372,1.216,373,1.049,374,0.742,375,1.049,376,1.216,377,1.216,378,1.216,379,1.984,380,1.216,381,1.216,382,1.216,383,1.712,384,1.216,385,1.216,386,1.216,387,1.049,388,1.712,389,0.924,390,1.049,391,1.049,392,1.216,393,1.984,394,1.984,395,1.984,396,2.901,415,1.346,421,0.924,429,0.671,430,0.742,453,0.903,486,1.712,491,0.742,492,1.049,498,1.049,502,1.712,503,1.049,506,1.984,507,1.984,515,1.049,526,1.216,527,1.216,529,1.049,591,1.049,628,1.984,639,1.712,640,1.216,641,1.216,642,1.216,643,2.398,644,2.398,645,2.398,646,2.398,647,1.469,648,1.469,649,1.469,650,1.469,651,1.469,652,1.469,653,1.469,654,1.469,655,3.506,656,2.398,657,2.398,658,2.398,659,1.216,660,2.901,661,1.216,662,1.216,663,1.216,664,1.216,665,1.216,666,2.901,667,3.196,668,3.196,669,2.514,670,3.903,671,1.984,672,1.216,673,3.429,674,3.038,675,3.617,676,3.903,677,2.901,678,1.216,679,3.196,680,2.514,681,3.038,682,1.469,683,1.469,684,1.469,685,1.469,686,1.469,687,1.469,688,3.617,689,3.506,690,1.469,691,1.469,692,1.469,693,3.506,694,2.398,695,3.617,696,1.469,697,2.205,698,1.469,699,1.469,700,1.469,701,2.398,702,1.469,703,1.469,704,1.469,705,1.469,706,1.216,707,1.469,708,1.469,709,1.469,710,1.469,711,1.469,712,1.469,713,2.398,714,3.038,715,2.398,716,2.398,717,2.514,718,2.901,719,2.398,720,1.984,721,3.196,722,1.984,723,1.216,724,1.216,725,2.398,726,2.514,727,2.398,728,2.901,729,2.514,730,2.398,731,1.469,732,1.469,733,1.469,734,1.469,735,2.398,736,1.469,737,1.469,738,1.984,739,1.469,740,1.469,741,1.469,742,1.469,743,1.984,744,1.469,745,1.984,746,1.216,747,1.469,748,1.469,749,1.469,750,1.216,751,1.216,752,1.469,753,1.984,754,1.216,755,1.469,756,1.984,757,1.984,758,1.469,759,1.469,760,1.469,761,1.469,762,1.984,763,2.901,764,1.216,765,1.216,766,1.216]],["title/classes/UploadModel.html",[0,0.172,114,0.859]],["body/classes/UploadModel.html",[0,0.128,2,0.849,3,0.193,4,0.193,5,0.423,6,0.253,10,0.264,14,0.865,15,1.676,21,0.447,22,0.038,25,1.224,29,1.344,30,0.845,31,1.221,32,1.006,33,1.408,34,0.936,37,1.036,45,0.773,46,0.013,48,0.449,51,0.193,52,1.029,60,1.191,61,0.02,62,0.013,70,3.376,73,2.407,75,1.959,76,1.142,80,1.622,82,2.772,86,2.772,90,0.934,98,1.029,99,2.392,101,1.043,107,2.107,109,1.61,110,1.7,111,0.934,114,0.952,122,1.667,126,1.382,131,2.502,134,1.711,141,1.88,142,1.825,167,1.477,168,1.867,169,1.248,196,1.266,220,2.854,249,1.867,274,2.107,453,2.065,513,2.772,594,1.866,697,2.515,767,1.866,768,4.425,769,4.728,770,3.997,771,3.35,772,2.255,773,2.255,774,2.255,775,2.255,776,3.35,777,2.255,778,2.255,779,2.255,780,2.255,781,2.255,782,2.255,783,3.35,784,2.255,785,2.255,786,2.255,787,2.255,788,2.255,789,2.255,790,2.255,791,2.255,792,2.255,793,2.255,794,2.255,795,2.255,796,2.255,797,2.255,798,2.255,799,2.255,800,2.255,801,2.255,802,2.255,803,1.866,804,2.255,805,2.255,806,2.255,807,3.35,808,2.255,809,2.255,810,2.255,811,2.255,812,3.35,813,2.255,814,3.35,815,2.255,816,3.35,817,2.255,818,3.35,819,3.35,820,3.35,821,2.255,822,2.255,823,2.255,824,2.255,825,2.255,826,2.255,827,2.255]],["title/interfaces/UploadOptions.html",[116,1.698,172,0.306]],["body/interfaces/UploadOptions.html",[0,0.104,3,0.156,4,0.156,5,0.381,6,0.079,10,0.213,11,0.808,13,0.624,15,1.439,21,0.4,22,0.038,23,0.919,30,0.597,31,0.735,32,0.485,34,0.964,46,0.011,48,0.576,51,0.244,52,1.963,55,1.966,59,1.342,60,1.071,61,0.017,62,0.011,76,1.11,79,0.831,80,1.887,95,1.072,96,1.299,97,1.299,98,0.831,99,1.299,100,1.299,101,1.105,102,1.342,103,0.919,104,0.919,105,0.831,106,1.179,108,1.072,109,2.031,110,1.359,111,0.754,113,2.031,114,0.995,115,3.399,116,2.223,118,2.031,119,1.506,120,2.031,122,1.072,123,1.32,124,1.493,126,0.889,127,2.404,128,1.437,129,1.437,130,1.474,131,1.6,132,1.769,134,0.889,135,0.919,137,0.919,138,1.437,139,0.831,140,1.179,141,1.202,142,2.25,144,1.299,145,0.919,146,1.299,149,2,150,1.769,151,1.179,156,2.899,157,1.506,158,2.355,159,2.355,160,2.899,161,1.145,162,2.355,163,0.517,164,1.022,165,2.355,166,1.145,167,0.568,168,1.794,169,0.889,170,1.022,171,1.022,172,0.184,173,2.995,174,2.223,175,2.501,176,3.374,177,2.866,178,1.145,179,1.145,180,1.62,181,1.506,182,1.145,183,2.501,184,1.506,185,1.506,186,1.506,187,1.452,188,1.506,189,2.899,190,1.299,191,2.899,192,1.506,193,2.355,194,1.506,195,4.499,196,1.597,197,1.506,198,1.506,199,2.899,200,0.919,201,0.919,202,0.919,203,1.506,204,1.506,205,2.899,206,2.899,207,1.6,208,1.506,209,3.278,210,2.355,211,3.557,212,1.506,213,2.355,214,1.506,215,1.506,216,1.506,217,1.506,218,1.299,219,1.506,220,1.299,221,2.355,222,1.506,223,1.506,224,1.506,225,1.506,226,1.597,227,1.506,228,1.506,229,1.299,230,1.506,231,1.506,232,2.355,233,1.506,234,1.597,235,1.506,236,1.506,237,1.506,238,3.278,239,1.506,240,1.506,241,2.501,242,1.506,243,1.506,244,1.506,245,1.506,246,1.299,247,1.506,248,1.506,249,0.686,250,1.506,251,1.506,252,1.506,253,1.506,254,1.506,255,1.506,256,1.506,257,2.355,258,2.899,259,2.355,260,1.506,261,1.506,262,1.506,263,1.506,264,1.506,265,1.506,266,1.022,267,1.506,268,1.299,269,1.506,270,1.506,271,1.299,272,2.355,273,2.355,274,1.145,275,1.79,276,2.355,277,1.506,278,1.506,279,1.145,280,2.899,281,1.299,282,1.145,283,1.506,284,1.506,285,1.022,286,1.506,287,1.506,288,1.506,289,1.506,290,1.506,291,1.506,292,1.506,293,1.506,294,1.506,295,1.506,296,1.506,297,1.506,299,0.624,828,2.845]],["title/interfaces/UploadResponse.html",[168,1.14,172,0.306]],["body/interfaces/UploadResponse.html",[3,0.285,4,0.285,5,0.388,6,0.144,10,0.389,11,1.251,13,1.14,21,0.499,22,0.038,30,0.567,32,0.751,33,1.251,34,0.703,37,1.155,45,1.51,46,0.02,48,0.661,51,0.468,59,1.375,60,0.703,61,0.026,62,0.02,73,2.254,75,1.377,76,0.858,101,1.091,102,1.541,103,1.678,104,1.678,105,1.517,106,2.045,108,1.659,110,1.51,114,0.944,122,1.252,123,1.252,124,1.252,126,1.038,127,2.223,128,1.678,129,1.678,130,1.693,131,2.01,132,2.76,134,1.038,135,1.678,137,1.678,138,1.678,139,1.517,140,1.824,141,1.693,142,2.565,144,2.254,145,1.678,146,1.517,149,2.492,150,1.678,151,1.377,163,0.944,167,1.375,168,1.86,169,1.375,172,0.531,180,1.98,207,2.399,249,1.86,299,1.14,364,1.51,374,1.678,445,1.678,451,2.091,452,2.091,453,1.86,454,2.223,455,2.223,456,2.769]],["title/classes/UploadStore.html",[0,0.172,829,2.159]],["body/classes/UploadStore.html",[0,0.267,2,1.765,3,0.401,4,0.401,5,0.333,6,0.203,22,0.036,46,0.028,48,0.628,51,0.401,61,0.032,62,0.028,80,1.607,101,1.038,495,3.345,803,3.877,829,3.892,830,3.877]],["title/interfaces/UploadValidation.html",[172,0.306,455,1.527]],["body/interfaces/UploadValidation.html",[3,0.288,4,0.288,5,0.389,6,0.146,10,0.393,11,1.259,13,1.151,21,0.339,22,0.038,30,0.572,32,0.756,33,1.499,34,1.049,37,1.161,45,1.52,46,0.02,48,0.665,51,0.47,59,1.384,60,0.71,61,0.026,62,0.02,73,2.265,75,1.391,76,0.867,101,1.094,102,1.549,103,1.695,104,1.695,105,1.533,106,2.055,108,1.669,110,1.52,114,0.954,122,1.265,123,1.265,124,1.265,126,1.048,127,2.237,128,1.695,129,1.695,130,1.701,131,2.023,132,2.504,134,1.048,135,1.695,137,1.695,138,1.695,139,1.533,140,1.836,141,1.701,142,2.572,144,2.265,145,1.695,146,1.533,149,2.504,150,1.695,151,1.391,163,0.954,167,1.384,168,1.669,169,1.384,172,0.533,180,1.265,207,1.533,249,1.869,299,1.151,364,1.52,374,1.695,445,1.695,451,2.112,452,2.112,453,1.869,454,2.237,455,2.504,456,2.787]],["title/components/UploadViewComponent.html",[305,1.381,430,1.527]],["body/components/UploadViewComponent.html",[0,0.096,3,0.286,4,0.145,5,0.36,6,0.22,10,0.198,11,0.762,14,0.692,15,1.585,17,0.852,18,1.686,21,0.446,22,0.038,25,1.046,29,0.762,30,0.789,31,0.692,32,0.457,37,0.627,39,1.686,41,1.646,42,1.257,46,0.01,48,0.643,51,0.145,52,0.77,55,2.132,59,0.837,61,0.016,62,0.01,69,1.061,75,0.699,76,0.692,78,0.77,80,0.579,90,2.311,95,1.808,98,0.77,101,1.133,102,0.837,115,1.914,134,1.499,141,0.919,163,0.479,166,1.061,173,2.607,174,1.505,176,2.39,177,2.39,178,2.39,179,1.686,180,1.01,182,2.39,187,1.111,200,0.852,201,0.852,226,1.505,234,1.505,266,1.505,281,1.914,298,0.947,300,2.844,305,1.892,307,3.019,309,2.381,318,1.914,319,2.607,320,2.91,321,1.061,322,1.914,324,1.914,326,0.77,327,2.098,329,2.775,334,2.326,339,1.686,354,1.914,355,1.686,363,1.505,364,0.919,375,1.914,389,2.607,415,0.947,421,1.061,429,0.77,430,1.918,439,1.396,453,1.01,460,1.396,462,2.712,478,1.396,483,1.396,484,1.396,486,1.914,487,1.396,491,0.852,492,1.205,495,3.617,498,1.205,502,1.914,503,1.205,504,2.76,505,2.76,514,3.429,515,3.302,516,2.712,519,3.143,522,2.218,525,3.143,529,1.205,567,2.218,578,3.651,591,3.15,595,1.396,639,1.914,640,1.396,641,1.396,642,1.396,659,1.396,660,2.218,661,1.396,662,1.396,663,1.396,664,1.396,665,1.396,666,2.76,667,2.76,668,2.76,669,2.76,670,4.528,671,3.143,672,2.218,673,2.76,675,2.76,676,4.279,677,2.76,678,2.76,679,3.972,680,2.218,688,2.218,695,1.396,697,1.061,706,2.76,717,1.396,718,2.218,720,1.396,721,3.143,722,2.76,723,3.143,724,2.218,726,3.143,728,1.396,729,2.218,738,1.396,743,1.396,745,2.218,746,2.218,750,2.76,751,3.143,753,1.396,754,1.396,756,1.396,757,1.396,762,2.218,763,3.143,764,1.396,765,1.396,766,1.396,831,4.192,832,1.396,833,4.412,834,3.335,835,2.681,836,2.681,837,2.681,838,2.681,839,2.681,840,2.681,841,3.335,842,2.681,843,3.335,844,2.681,845,2.681,846,3.335,847,1.687,848,2.681,849,1.687,850,2.681,851,1.687,852,2.681,853,1.687,854,1.687,855,2.681,856,1.687,857,2.681,858,1.687,859,2.681,860,2.681,861,2.681,862,1.687,863,2.681,864,1.687,865,1.687,866,1.687,867,1.687,868,1.687,869,1.687,870,1.687,871,2.681,872,1.687,873,1.687,874,1.687,875,1.687,876,1.687,877,1.687,878,1.687,879,1.687,880,2.681,881,1.687,882,2.681,883,1.687,884,2.681,885,1.687,886,1.687,887,1.687,888,1.687,889,1.687,890,1.687,891,1.687,892,1.687,893,1.687,894,1.687,895,3.335,896,1.687,897,1.687,898,1.687,899,2.681,900,1.687,901,1.687]],["title/classes/ValidationBuilder.html",[0,0.172,902,2.159]],["body/classes/ValidationBuilder.html",[0,0.23,1,2.545,2,1.524,3,0.347,4,0.347,5,0.287,6,0.235,9,2.932,10,0.474,13,1.712,14,1.289,15,1.418,21,0.504,22,0.037,23,2.986,25,1.056,29,1.418,30,0.851,31,1.289,32,0.851,41,1.387,42,1.524,46,0.024,48,0.757,49,2.888,51,0.347,60,1.056,61,0.029,62,0.024,187,2.068,358,4.222,405,2.888,442,2.545,902,3.563,903,3.347,904,4.045,905,4.045,906,4.045,907,4.045,908,4.045,909,4.045,910,4.045,911,4.045,912,4.045,913,4.045]],["title/interfaces/ValidationErrors.html",[33,0.859,172,0.306]],["body/interfaces/ValidationErrors.html",[3,0.385,4,0.385,5,0.416,6,0.231,21,0.454,22,0.037,25,0.951,27,2.524,33,1.665,34,1.126,41,1.542,42,1.694,46,0.026,51,0.486,61,0.031,62,0.026,76,1.374,172,0.538,299,1.542,414,3.721,415,2.987,914,2.829,915,4.497]],["title/interfaces/Validator.html",[41,1.038,172,0.306]],["body/interfaces/Validator.html",[3,0.372,4,0.372,5,0.432,6,0.226,10,0.508,14,1.345,16,2.925,21,0.526,22,0.037,25,0.918,27,2.925,29,1.234,30,0.74,31,1.121,32,0.74,33,1.645,34,1.181,41,1.787,42,1.636,46,0.025,51,0.478,61,0.031,62,0.025,76,1.121,172,0.526,299,1.489,415,2.437,914,2.731,916,4.342]],["title/coverage.html",[917,3.419]],["body/coverage.html",[0,0.335,1,2.196,5,0.248,6,0.272,7,2.889,9,1.762,21,0.353,22,0.037,33,0.992,41,1.197,46,0.02,61,0.027,62,0.02,63,1.762,64,1.959,66,2.889,67,2.889,68,2.889,90,2.485,95,1.315,96,3.245,97,3.245,101,0.665,114,0.992,116,1.959,168,1.315,169,1.09,172,0.601,187,1.446,298,1.959,300,3.006,301,3.245,302,3.245,304,1.959,305,2.076,326,1.594,397,2.889,412,2.492,413,2.889,429,1.594,430,1.762,442,2.196,443,2.889,445,2.704,455,1.762,457,2.889,458,2.889,491,1.762,493,2.889,494,2.889,697,3.369,767,2.889,829,2.492,830,2.889,831,2.889,832,2.889,902,2.492,903,2.889,914,2.86,917,2.889,918,3.491,919,3.491,920,3.491,921,5.356,922,3.491,923,3.491,924,3.491,925,3.491,926,4.546,927,4.546,928,3.491,929,3.491,930,3.491,931,3.491,932,4.546,933,3.491,934,3.491,935,3.491,936,3.491,937,5.055,938,5.055,939,3.491,940,3.491]],["title/dependencies.html",[420,2.289,941,2.524]],["body/dependencies.html",[22,0.037,46,0.026,61,0.031,62,0.026,78,2,163,1.244,320,2.755,420,2.755,437,3.624,942,4.38,943,6.142,944,4.38,945,4.38,946,5.238,947,4.335,948,4.38,949,4.38,950,4.38,951,4.38,952,4.38,953,4.38,954,4.38,955,4.38,956,4.38,957,4.38,958,4.38,959,4.38,960,4.38,961,4.38,962,4.38,963,4.38,964,4.38]],["title/miscellaneous/enumerations.html",[965,1.588,966,3.011]],["body/miscellaneous/enumerations.html",[6,0.197,10,0.531,22,0.036,46,0.027,61,0.031,62,0.027,106,2.217,130,1.835,144,2.443,167,1.671,249,2.016,364,1.835,445,2.291,453,2.016,454,2.701,516,4.379,965,2.854,966,3.755,967,4.538]],["title/index.html",[10,0.354,968,2.503]],["body/index.html",[2,1.565,22,0.036,46,0.024,61,0.03,62,0.024,63,2.097,64,3.383,140,1.721,299,1.425,326,2.752,334,3.075,417,3.622,418,3.939,420,2.613,421,2.613,422,3.437,423,3.437,424,3.437,425,3.437,426,3.437,427,3.437,428,3.437,429,2.752,430,3.043,431,4.198,432,3.437,491,2.097,639,2.965,968,3.437,969,4.153,970,4.153,971,4.153]],["title/modules.html",[419,2.95]],["body/modules.html",[22,0.033,46,0.029,61,0.033,62,0.029,418,3.062,419,3.475,947,4.027,972,4.867,973,4.867,974,4.867]],["title/miscellaneous/typealiases.html",[965,1.588,975,3.639]],["body/miscellaneous/typealiases.html",[6,0.209,10,0.565,21,0.487,22,0.033,42,2.088,46,0.028,61,0.033,62,0.028,410,3.989,914,3.032,965,3.032,976,4.82,977,4.82]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":90,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["1.10.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":755,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["10/10",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":697,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["1024",{"_index":91,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["11/15",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["12.1.7",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":699,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1px",{"_index":679,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["1rem",{"_index":729,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["2",{"_index":969,"title":{},"body":{"index.html":{}}}],["2.5rem",{"_index":893,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["200",{"_index":256,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["25",{"_index":744,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25,safari5.1",{"_index":703,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25rem",{"_index":674,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25s",{"_index":741,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["2e2e2e",{"_index":896,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["2xx",{"_index":263,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["3.0.3",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":899,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["4/5",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":895,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["404",{"_index":287,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["42",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":678,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["5",{"_index":734,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["50",{"_index":695,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["50%,#f7f7f7",{"_index":701,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["5rem",{"_index":675,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["6",{"_index":704,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["6.5.3",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["63",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["7/11",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["75rem",{"_index":747,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["8",{"_index":970,"title":{},"body":{"index.html":{}}}],["8.2.2",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["8.2.9",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":738,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["9",{"_index":971,"title":{},"body":{"index.html":{}}}],["9.15.10",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["abort",{"_index":145,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["absolute",{"_index":732,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":107,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["action",{"_index":595,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["actions",{"_index":725,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["actual_component",{"_index":766,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["add(...validators",{"_index":407,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":525,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["affect",{"_index":366,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["again",{"_index":139,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["aliases",{"_index":976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":722,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["allowed",{"_index":752,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["and(...validators",{"_index":910,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":904,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":908,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":911,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":437,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":161,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["angular/compiler",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":78,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":611,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["anything",{"_index":282,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["api/upload",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadStore.html":{}}}],["api/validation",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["arguments",{"_index":526,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":579,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":634,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.isarray(errors",{"_index":288,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["array.isarray(validators",{"_index":406,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["assets//scss/variables",{"_index":663,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/fonts",{"_index":662,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/scss/icons",{"_index":664,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assume",{"_index":269,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["auto",{"_index":881,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["back",{"_index":129,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["background",{"_index":688,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["basis",{"_index":889,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["before",{"_index":484,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["begin",{"_index":544,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["behaviorsubject",{"_index":162,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["behaviorsubject(this.upload",{"_index":192,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["bind",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["block",{"_index":665,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["body",{"_index":180,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["boolean",{"_index":132,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":423,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":676,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bottom",{"_index":706,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bound",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["box",{"_index":884,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["break",{"_index":241,"title":{},"body":{"classes/FileUpload.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{}}}],["broken",{"_index":470,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{}}}],["browse",{"_index":974,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":947,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browsers",{"_index":691,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["build",{"_index":219,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["button",{"_index":742,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["byte",{"_index":82,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":86,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes.tofixed(2",{"_index":93,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["cancel",{"_index":102,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["cancelall",{"_index":499,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["canceled",{"_index":364,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":620,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["care",{"_index":860,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["case",{"_index":238,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["center",{"_index":723,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chance",{"_index":271,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["change",{"_index":108,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changed",{"_index":151,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changes",{"_index":839,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["changesub",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["child",{"_index":751,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chrome10",{"_index":702,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["chrome26",{"_index":710,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["cleanall",{"_index":500,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["clear",{"_index":635,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["click",{"_index":363,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["click(event",{"_index":527,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":426,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":427,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":428,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["code",{"_index":259,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["color",{"_index":666,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["colors",{"_index":757,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["column",{"_index":672,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["commonmodule",{"_index":436,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":123,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completed",{"_index":126,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completeupload",{"_index":291,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["component",{"_index":305,"title":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":764,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["components",{"_index":639,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["components/ngxfileuploaditem.html",{"_index":479,"title":{},"body":{"classes/UploadControl.html":{}}}],["connection",{"_index":469,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["constructor(file",{"_index":771,"title":{},"body":{"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":464,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":112,"title":{},"body":{"classes/FileUpload.html":{}}}],["constructor(httpclient",{"_index":509,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["constructor(validators",{"_index":398,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contain",{"_index":281,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["content",{"_index":891,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["context",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["context.ctrl",{"_index":461,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["control.ts",{"_index":458,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["control.ts:19",{"_index":465,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:34",{"_index":467,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:42",{"_index":473,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:50",{"_index":475,"title":{},"body":{"classes/UploadControl.html":{}}}],["coverage",{"_index":917,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":118,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["createfieldinputfield",{"_index":622,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["creates",{"_index":513,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["createupload(file",{"_index":596,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["createuploadbody",{"_index":227,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["ctrl",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":745,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["custom",{"_index":850,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["d2d2d2",{"_index":883,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dark",{"_index":669,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dashed",{"_index":894,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data",{"_index":110,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["data/api",{"_index":170,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["data/api/upload",{"_index":865,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data/api/validation",{"_index":866,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data/upload.model",{"_index":171,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["declarations",{"_index":422,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":515,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["defaultuploaditem",{"_index":645,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":356,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":184,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["delay",{"_index":483,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["delete",{"_index":290,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["dependencies",{"_index":420,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["deprecated",{"_index":348,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["description",{"_index":98,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["destroyed",{"_index":388,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["diffrent",{"_index":277,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["direction",{"_index":671,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directive",{"_index":491,"title":{"directives/UploadFileDirective.html":{}},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":492,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directives/ngxfileuploaddirective.html#add",{"_index":869,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["directly",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["disable",{"_index":393,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["disabled",{"_index":503,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["display",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["document.createelement(\"input",{"_index":624,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["documentation",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":641,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dont",{"_index":365,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["download",{"_index":138,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["downloads",{"_index":539,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag",{"_index":496,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag/drop",{"_index":880,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dragevent",{"_index":533,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover",{"_index":508,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover(event",{"_index":532,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop",{"_index":497,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop(event",{"_index":536,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dummy",{"_index":616,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dynamic",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":630,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["e4e4e4",{"_index":681,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["edit",{"_index":683,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":687,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["element",{"_index":486,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ellipsis",{"_index":719,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["emits",{"_index":185,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["enabled",{"_index":183,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["ensure",{"_index":362,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["enum",{"_index":452,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":966,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":130,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["error.value",{"_index":657,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["errors",{"_index":142,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["event",{"_index":202,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["event.loaded",{"_index":253,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event.preventdefault",{"_index":371,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":372,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":370,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.type",{"_index":237,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["eventemitter",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["events",{"_index":226,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["example",{"_index":462,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exportas",{"_index":547,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["exports",{"_index":425,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":696,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["failed",{"_index":468,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":275,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["false",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["fdfdfd",{"_index":689,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff16",{"_index":709,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff3.6",{"_index":698,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["field",{"_index":519,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["file.ts",{"_index":494,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["file.ts:101",{"_index":543,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:108",{"_index":538,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:118",{"_index":541,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:131",{"_index":534,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:140",{"_index":537,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:155",{"_index":528,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:32",{"_index":524,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:34",{"_index":545,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:37",{"_index":520,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:46",{"_index":521,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:53",{"_index":518,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:56",{"_index":517,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:59",{"_index":523,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:74",{"_index":512,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file/upload",{"_index":493,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["filemodel",{"_index":599,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filename",{"_index":769,"title":{},"body":{"classes/UploadModel.html":{}}}],["files",{"_index":578,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["files.map((file",{"_index":587,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileselect",{"_index":556,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filesize",{"_index":70,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["filesizepipe",{"_index":64,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["filetype",{"_index":770,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload",{"_index":95,"title":{"classes/FileUpload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload(this.httpclient",{"_index":601,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileupload/data/api/index.ts",{"_index":413,"title":{},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["fileupload/data/api/index.ts:1",{"_index":416,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/data/api/upload.ts",{"_index":445,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/data/api/upload.ts:52",{"_index":450,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:58",{"_index":449,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:63",{"_index":446,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:69",{"_index":447,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:74",{"_index":448,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/validation.ts",{"_index":914,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/data/api/validation.ts:1",{"_index":915,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/data/api/validation.ts:8",{"_index":916,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileupload/data/upload.model.ts",{"_index":767,"title":{},"body":{"classes/UploadModel.html":{},"coverage.html":{}}}],["fileupload/data/upload.model.ts:100",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:104",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:113",{"_index":773,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:17",{"_index":772,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:29",{"_index":775,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:36",{"_index":778,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:43",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:50",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:57",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:64",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:71",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:78",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:85",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:92",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:96",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.store.ts",{"_index":830,"title":{},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["fileupload/ngx",{"_index":433,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/ui/upload",{"_index":300,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload/utils/http/file",{"_index":96,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload/utils/ui/file",{"_index":66,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["fileupload/utils/upload",{"_index":457,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts",{"_index":397,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:13",{"_index":404,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:18",{"_index":401,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:25",{"_index":402,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:32",{"_index":403,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:5",{"_index":399,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/or.validator.ts",{"_index":443,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/or.validator.ts:6",{"_index":444,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/utils/validation/validation.builder.ts",{"_index":903,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/utils/validation/validation.builder.ts:12",{"_index":907,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/utils/validation/validation.builder.ts:8",{"_index":905,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileuploaditemcontext",{"_index":298,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fill",{"_index":610,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filter",{"_index":165,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["find",{"_index":848,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["finished",{"_index":861,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["first",{"_index":898,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flag",{"_index":863,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flex",{"_index":670,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["font",{"_index":660,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["footer",{"_index":753,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["form",{"_index":175,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata",{"_index":176,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["formdata.append(label",{"_index":231,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["formdataname",{"_index":504,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["function",{"_index":410,"title":{},"body":{"classes/GroupedValidator.html":{},"miscellaneous/typealiases.html":{}}}],["gb",{"_index":85,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["get($colors",{"_index":668,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["get($map",{"_index":756,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["getchange",{"_index":147,"title":{},"body":{"classes/FileUpload.html":{}}}],["getdata",{"_index":154,"title":{},"body":{"classes/FileUpload.html":{}}}],["getfile",{"_index":774,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":777,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["getmodel",{"_index":152,"title":{},"body":{"classes/FileUpload.html":{}}}],["getprogress",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{}}}],["getresponse",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":387,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["getstate",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["getuploaded",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":471,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":685,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(to",{"_index":705,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(top",{"_index":694,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["green",{"_index":759,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":888,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["handle",{"_index":234,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["handled",{"_index":265,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleerror(response",{"_index":284,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleevent(event",{"_index":490,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":586,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["handlehttpevent(event",{"_index":235,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleprogress(event",{"_index":250,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleresponse(res",{"_index":260,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlesent",{"_index":247,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["happen",{"_index":485,"title":{},"body":{"classes/UploadControl.html":{}}}],["haserror",{"_index":103,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["haserrors",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":713,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["height",{"_index":728,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["here",{"_index":266,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["hidden",{"_index":720,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["highlight.js",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":529,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hostlistener",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":367,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":573,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlistener(\"drop",{"_index":575,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlisteners",{"_index":507,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["html",{"_index":762,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["htmlinputelement",{"_index":557,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["http",{"_index":120,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["http/file",{"_index":476,"title":{},"body":{"classes/UploadControl.html":{}}}],["httpclient",{"_index":113,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["httpclientmodule",{"_index":438,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":160,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpevent",{"_index":156,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype",{"_index":157,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.response",{"_index":244,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.sent",{"_index":239,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.uploadprogress",{"_index":242,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpprogressevent",{"_index":158,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpresponse",{"_index":159,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["https://colorzilla.com/gradient",{"_index":686,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["icon",{"_index":892,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["icons",{"_index":659,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["idatanode",{"_index":412,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["identifier",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":877,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ie10",{"_index":708,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["igniteui",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["implements",{"_index":79,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":441,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":414,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":374,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["inheritdoc",{"_index":377,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["inner",{"_index":739,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["input",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["input(\"ngxfileupload",{"_index":549,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["input[type=\"file",{"_index":632,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputfield",{"_index":623,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputs",{"_index":502,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["instance",{"_index":274,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["instanceof",{"_index":285,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["interface",{"_index":172,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":299,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":454,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["iscancelable",{"_index":209,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["isinvalid",{"_index":104,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["isnan(size",{"_index":87,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["item",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item'},{'name",{"_index":765,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item.component.html",{"_index":323,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.scss",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.ts",{"_index":302,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:137",{"_index":650,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:27",{"_index":652,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:32",{"_index":651,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:50",{"_index":646,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:59",{"_index":647,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:62",{"_index":648,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:66",{"_index":643,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:80",{"_index":644,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:91",{"_index":649,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item/upload",{"_index":301,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["items",{"_index":354,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["itemtemplate",{"_index":846,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["itemtpl",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["justify",{"_index":890,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["kb",{"_index":83,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["key",{"_index":415,"title":{},"body":{"interfaces/IDataNode.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":395,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["label",{"_index":229,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["last",{"_index":750,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["left",{"_index":735,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["legend",{"_index":421,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["lib/.../upload.ts",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/data/api",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{}}}],["lib/data/api/validation",{"_index":405,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["light",{"_index":897,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#2e2e2e",{"_index":900,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#3e3e3e",{"_index":901,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(map",{"_index":743,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["line",{"_index":754,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["linear",{"_index":693,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["list",{"_index":591,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["listen",{"_index":590,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["listener",{"_index":530,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["literal",{"_index":828,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["manager",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["mandatory",{"_index":852,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["map",{"_index":667,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["margin",{"_index":721,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["matching",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(progress",{"_index":821,"title":{},"body":{"classes/UploadModel.html":{}}}],["mb",{"_index":84,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["message",{"_index":268,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["messages",{"_index":272,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["metadata",{"_index":69,"title":{},"body":{"pipes/FileSizePipe.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":965,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":109,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["module",{"_index":417,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":419,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":369,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["move",{"_index":822,"title":{},"body":{"classes/UploadModel.html":{}}}],["moz",{"_index":692,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["much",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["multiple",{"_index":626,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["need",{"_index":859,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["new",{"_index":187,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":201,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["ngmodule",{"_index":435,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":390,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["ngoninit",{"_index":378,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["ngx",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["ngxfileupload",{"_index":498,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileupload(url",{"_index":550,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ngxfileuploadcomponent",{"_index":833,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective",{"_index":514,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective]{@link",{"_index":868,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem",{"_index":460,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem]{@link",{"_index":478,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":867,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadmodule",{"_index":418,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["ngxfileuploadref",{"_index":548,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["none",{"_index":628,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["notification",{"_index":295,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notified",{"_index":531,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["notify",{"_index":150,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["notifyobservers",{"_index":296,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["now",{"_index":350,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["nowrap",{"_index":716,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":73,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":182,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["object.assign(validationresult",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":149,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["observe",{"_index":225,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observers",{"_index":189,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["of(upload).pipe(delay(1000",{"_index":876,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["old",{"_index":690,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["once",{"_index":540,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onclick(event",{"_index":581,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ondestroy",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["onfiledragover(event",{"_index":574,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfiledrop(event",{"_index":576,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfileselect(event",{"_index":633,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["oninit",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onitemclick(event",{"_index":368,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onuploadcompleted",{"_index":844,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadcompleted(upload",{"_index":855,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd",{"_index":845,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd(uploads",{"_index":857,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["opera12",{"_index":711,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":115,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["or(...validators",{"_index":912,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":906,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":909,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":442,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":913,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":636,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["out",{"_index":432,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":748,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["output",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["outputs",{"_index":506,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["over",{"_index":535,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["overflow",{"_index":718,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["overview",{"_index":968,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":941,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":673,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["parsefloat(size.tostring",{"_index":88,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pass",{"_index":375,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passed",{"_index":355,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passes",{"_index":488,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":661,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["permalink",{"_index":682,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["pipe",{"_index":63,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{},"index.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":605,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["pipes",{"_index":65,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pipetransform",{"_index":77,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["plain",{"_index":522,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["pointer",{"_index":746,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["position",{"_index":730,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["post",{"_index":179,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["pre",{"_index":609,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["prevalidateupload(upload",{"_index":612,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["private",{"_index":80,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["progress",{"_index":249,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":727,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["progressevent",{"_index":273,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providers",{"_index":424,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["queue",{"_index":553,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["queued",{"_index":144,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["quickly",{"_index":837,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["radius",{"_index":677,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["range",{"_index":257,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["raw",{"_index":776,"title":{},"body":{"classes/UploadModel.html":{}}}],["readonly",{"_index":456,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":619,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["red",{"_index":758,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["register",{"_index":373,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["relative",{"_index":731,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["remote",{"_index":459,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":389,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["removed",{"_index":487,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["removeupload(upload",{"_index":875,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["render",{"_index":376,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["rendered",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["renderer",{"_index":510,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["renderer2",{"_index":511,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["reportprogress",{"_index":224,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["repository",{"_index":593,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["represents",{"_index":99,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["request",{"_index":146,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["res.body",{"_index":262,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.ok",{"_index":261,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status(400).send(what",{"_index":278,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["reset",{"_index":140,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"index.html":{}}}],["responds",{"_index":254,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response",{"_index":131,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["response.error",{"_index":280,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response.message",{"_index":276,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response.status",{"_index":286,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["restart",{"_index":137,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["retry",{"_index":105,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["retry(event",{"_index":466,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":396,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["reverse",{"_index":882,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["right",{"_index":749,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["row",{"_index":724,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["running",{"_index":270,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["rxjs",{"_index":163,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":166,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["safari7",{"_index":712,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["sanitize",{"_index":267,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["save",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["search",{"_index":542,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["sec",{"_index":874,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["security",{"_index":618,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["see",{"_index":283,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["select",{"_index":617,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selected",{"_index":583,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selector",{"_index":319,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["send",{"_index":177,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["sends",{"_index":128,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["server",{"_index":127,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["service",{"_index":119,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["set",{"_index":134,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["setngxfileupload(url",{"_index":546,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["setresponse(response",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["setstate(state",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["settemplate(tpl",{"_index":654,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setup",{"_index":835,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["setupload(fileupload",{"_index":653,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":684,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["showlist",{"_index":843,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["shrink",{"_index":887,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["simply",{"_index":838,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["single",{"_index":100,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["size",{"_index":75,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["size.pipe.ts",{"_index":68,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["size.pipe.ts:10",{"_index":74,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["size/file",{"_index":67,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["sizing",{"_index":885,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["solid",{"_index":680,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["something",{"_index":190,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["sort",{"_index":394,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":715,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["start",{"_index":106,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":472,"title":{},"body":{"classes/UploadControl.html":{}}}],["started",{"_index":246,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["state",{"_index":141,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["state(state",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["statechange",{"_index":347,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["statements",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":358,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["status",{"_index":258,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stop",{"_index":463,"title":{},"body":{"classes/UploadControl.html":{}}}],["stop(event",{"_index":474,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopped",{"_index":186,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["store",{"_index":215,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stream",{"_index":188,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["streams",{"_index":289,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["string",{"_index":76,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["style",{"_index":761,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["styles",{"_index":640,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["styleurls",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["sub",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["sub.unsubscribe",{"_index":607,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subject",{"_index":124,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["subscribe",{"_index":200,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["subscribtions",{"_index":552,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subscription",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["success",{"_index":207,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":972,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":973,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":236,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["table",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":164,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["takeuntil(this.cancel",{"_index":198,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["template",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["template(tpl",{"_index":359,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["templateref",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["templateurl",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["text",{"_index":717,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["think",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.add",{"_index":558,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.add.emit(uploads",{"_index":589,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.cancel",{"_index":294,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.complete",{"_index":293,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.next(true",{"_index":212,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancelall",{"_index":563,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.changed",{"_index":353,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changed.emit(upload",{"_index":385,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changesub",{"_index":379,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changesub.unsubscribe",{"_index":392,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completed",{"_index":351,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completed.emit(this.fileupload",{"_index":386,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completeupload",{"_index":213,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.context",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.context.data",{"_index":381,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.createfieldinputfield",{"_index":560,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createupload(file",{"_index":588,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createuploadbody",{"_index":222,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.destroyed$.complete",{"_index":562,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.destroyed$.next(true",{"_index":561,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.disabled",{"_index":577,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.execvalidator(validator",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.size",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.type",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.filename",{"_index":823,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":559,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.click",{"_index":582,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.files",{"_index":638,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.value",{"_index":637,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.filesize",{"_index":820,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":344,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":391,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.change",{"_index":380,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.retry",{"_index":481,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":482,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.formdataname",{"_index":598,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handleerror(error",{"_index":204,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleevent(event",{"_index":480,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":580,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handlehttpevent(event",{"_index":203,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleprogress(event",{"_index":243,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleresponse(event",{"_index":245,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlesent",{"_index":240,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.http.post(this.options.url",{"_index":223,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.itemtpl",{"_index":361,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.notifyobservers",{"_index":211,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.onfileselect(e",{"_index":631,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.options",{"_index":193,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.enabled",{"_index":228,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.name",{"_index":230,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.prevalidateupload(filemodel",{"_index":603,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.progress",{"_index":824,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.removeupload(upload",{"_index":872,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.renderer.listen(inputfield",{"_index":629,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":625,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":627,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.response",{"_index":825,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.showlist",{"_index":871,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.start",{"_index":208,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.state",{"_index":826,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.statechange",{"_index":352,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.statechange.emit(this.fileupload",{"_index":384,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.units.length",{"_index":92,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.units[unit",{"_index":94,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.upload",{"_index":191,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.asobservable",{"_index":216,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.complete",{"_index":292,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.next(this.upload",{"_index":297,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.file",{"_index":232,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.filename",{"_index":233,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.response",{"_index":206,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.state",{"_index":195,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.tojson",{"_index":217,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.uploaded",{"_index":252,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploaded",{"_index":819,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile().pipe",{"_index":197,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploadresponse",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploads",{"_index":564,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.foreach((upload",{"_index":565,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.indexof(upload",{"_index":878,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.length",{"_index":567,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["this.uploads.push(...uploads",{"_index":870,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.push(upload",{"_index":608,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.splice(idx",{"_index":879,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.splice(this.uploads.indexof(upload",{"_index":606,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i",{"_index":569,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i].cancel",{"_index":568,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploadvalidationerrors",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.url",{"_index":551,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.useformdata",{"_index":597,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validationerrors",{"_index":827,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.validator",{"_index":602,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator(upload.file",{"_index":614,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator.validate(upload.file",{"_index":613,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validators",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":408,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":178,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["throw",{"_index":264,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["timer",{"_index":477,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":489,"title":{},"body":{"classes/UploadControl.html":{}}}],["todo",{"_index":594,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["tojson",{"_index":768,"title":{},"body":{"classes/UploadModel.html":{}}}],["top",{"_index":736,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tpl",{"_index":360,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["transform",{"_index":71,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{}}}],["transform(size",{"_index":72,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["transition",{"_index":740,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["translate",{"_index":737,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tree",{"_index":642,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["trigger",{"_index":554,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["tslib",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["type=\"file",{"_index":585,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["typealiases",{"_index":975,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ui",{"_index":439,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadViewComponent.html":{}}}],["ul",{"_index":760,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["unit",{"_index":89,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["units",{"_index":81,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["unsubscribe",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["uplaod",{"_index":592,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload",{"_index":101,"title":{"interfaces/Upload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["upload(fileupload",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.cancel",{"_index":572,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.change",{"_index":604,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.haserror",{"_index":571,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.isinvalid",{"_index":570,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.model",{"_index":451,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["upload.module.ts",{"_index":434,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":655,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.response.body.message",{"_index":658,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.size",{"_index":656,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.start",{"_index":566,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.state",{"_index":383,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["upload.tojson",{"_index":382,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.ts",{"_index":97,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["upload.ts:100",{"_index":121,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:116",{"_index":148,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:121",{"_index":153,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:125",{"_index":155,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:133",{"_index":125,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:140",{"_index":133,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:53",{"_index":117,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:71",{"_index":143,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:89",{"_index":136,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.validationerrors",{"_index":615,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadall",{"_index":501,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadbody",{"_index":221,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadcontrol",{"_index":304,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploaddata",{"_index":169,"title":{"interfaces/UploadData.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddata.name",{"_index":840,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploaded",{"_index":453,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["uploaded(bytes",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadfile",{"_index":220,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadfiledirective",{"_index":429,"title":{"directives/UploadFileDirective.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploaditemcomponent",{"_index":326,"title":{"components/UploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploadmodel",{"_index":114,"title":{"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":600,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadoptions",{"_index":116,"title":{"interfaces/UploadOptions.html":{}},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadresponse",{"_index":168,"title":{"interfaces/UploadResponse.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":495,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["uploadstate",{"_index":167,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":199,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.error",{"_index":205,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.invalid",{"_index":218,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.progress",{"_index":251,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.queued",{"_index":196,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.start",{"_index":248,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.uploaded",{"_index":210,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstore",{"_index":829,"title":{"classes/UploadStore.html":{}},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["uploadvalidation",{"_index":455,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadviewcomponent",{"_index":430,"title":{"components/UploadViewComponent.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":173,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["use",{"_index":349,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["used",{"_index":174,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["useformdata",{"_index":505,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["utils/http/file",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["utils/ui",{"_index":440,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["utils/upload",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["valid",{"_index":194,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validated",{"_index":135,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":902,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":411,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(file",{"_index":409,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":516,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":763,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["very",{"_index":836,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["via",{"_index":584,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["view",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["view.html",{"_index":842,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.scss",{"_index":841,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts",{"_index":832,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["view.ts:43",{"_index":849,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:50",{"_index":851,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:57",{"_index":853,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:63",{"_index":847,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:69",{"_index":854,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:74",{"_index":864,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:79",{"_index":862,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:85",{"_index":858,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:93",{"_index":856,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view/upload",{"_index":831,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["viewchild",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":357,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["w3c",{"_index":707,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["wait",{"_index":873,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["want",{"_index":279,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["webdriver",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":700,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["white",{"_index":714,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["width",{"_index":726,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["window",{"_index":555,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["within",{"_index":255,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["without",{"_index":621,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["wrapped",{"_index":181,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["wrapper",{"_index":834,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["written",{"_index":214,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["x",{"_index":886,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["yes",{"_index":400,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":733,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["zone.js",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":431,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"@lib/data/api\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FileSizePipe.html":{"url":"pipes/FileSizePipe.html","title":"pipe - FileSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FileSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        fileSize\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"fileSize\"\n})\nexport class FileSizePipe implements PipeTransform {\n\n    private units = [\"Byte\", \"Kb\", \"Mb\", \"Gb\"];\n\n    transform(size: number): string {\n        let bytes = isNaN(size) ? parseFloat(size.toString()) : size;\n        let unit  = 0;\n\n        while (bytes > 1024 && this.units.length > unit) {\n            bytes = bytes / 1024;\n            unit++;\n        }\n        return `${bytes.toFixed(2)} ${this.units[unit]}`;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUpload.html":{"url":"classes/FileUpload.html","title":"class - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n            \n                Implements\n            \n            \n                            Upload\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                                \n                                    model\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/http/file-upload.ts:53\n                            \n                        \n\n                \n                    \n                            create FileUpload service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:100\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:133\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:140\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:89\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:71\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:116\n                                \n                            \n                    \n                        \n                                returns observable which notify if file upload state\nhas been changed\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                \n\n                \n                    \n                        getmodel()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:121\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:125\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"../../data/api\";\nimport { UploadModel } from \"../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get model(): UploadModel {\n        return this.upload;\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { FileUpload } from \"../../utils/http/file-upload\";\nimport { UploadControl } from \"../../utils/upload-control\";\nimport { UploadModel } from \"../../data/upload.model\";\nimport { UploadData, UploadState, Upload } from \"../../data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    /** @deprecated use stateChange now */\n    @Output()\n    public changed: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.changed     = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n\n        let state: UploadState = UploadState.QUEUED;\n\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n\n                    if (state !== upload.state) {\n                        this.stateChange.emit(this.fileUpload);\n                        this.changed.emit(upload);\n                        state = upload.state;\n                    }\n                },\n                complete: () => {\n                    this.completed.emit(this.fileUpload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        // cancel file upload if item view is destroyed\n        this.fileUpload.cancel();\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"@lib/data/api/validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/index.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/index.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface IDataNode {\n    [key: string]: any;\n}\n\nexport * from \"./validation\";\nexport * from \"./upload\";\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { UploadViewComponent, UploadFileDirective, UploadItemComponent } from \"./ui\";\nimport { FileSizePipe } from \"./utils/ui\";\n\n@NgModule({\n    declarations: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n    ],\n    exports: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationErrors } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Upload.html":{"url":"interfaces/Upload.html","title":"interface - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        change\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                                \n                                    hasError\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    retry\n                                \n                                \n                                    start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:63\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:69\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \nisInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:74\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \nretry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:58\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:52\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change\n                                    \n                                \n                                \n                                    \n                                        change:         Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Observable\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns observable which notify if file upload state\nhas been changed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    get upload data informations\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/upload-control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: FileUpload)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/upload-control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        FileUpload\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:34\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:42\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:50\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileUpload } from \"./http/file-upload\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     *\n     */\n    public constructor(\n        private fileUpload: FileUpload\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/UploadFileDirective.html":{"url":"directives/UploadFileDirective.html","title":"directive - UploadFileDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  UploadFileDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-file/upload-file.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancelAll\n                            \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ngxFileUpload\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:74\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:53\n                            \n                        \n                \n                    \n                        form data field name with which form >data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:46\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:59\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:32\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:155\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:131\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:140\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancelAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:108\n                \n            \n\n\n            \n                \n                    cancel all downloads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:118\n                \n            \n\n\n            \n                \n                    search for broken uploads (error / invalid) and cancel\nthem\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:101\n                \n            \n\n\n            \n                \n                    begin all uploads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:34\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n\n\n                \n                    \n                        setngxFileUpload(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\n\nimport { Validator, ValidationFn, UploadState } from \"../../data/api\";\nimport { UploadModel } from \"../../data/upload.model\";\nimport { FileUpload } from \"../../utils/http/file-upload\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\",\n  exportAs: \"ngxFileUploadRef\"\n})\nexport class UploadFileDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    public url: string;\n\n    @Input(\"ngxFileUpload\")\n    public set ngxFileUpload(url: string) {\n        this.url = url;\n    }\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form >data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public disabled = false;\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * upload file queue\n     */\n    private uploads: FileUpload[] = [];\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private httpClient: HttpClient,\n        private renderer: Renderer2\n    ) {\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n\n        this.cancelAll();\n        this.uploads = [];\n    }\n\n    /**\n     * begin all uploads at once\n     */\n    public uploadAll() {\n        this.uploads.forEach((upload: FileUpload) => upload.start());\n    }\n\n    /**\n     * cancel all downloads at once\n     */\n    public cancelAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            this.uploads[i].cancel();\n        }\n    }\n\n    /**\n     * search for broken uploads (error / invalid) and cancel\n     * them\n     */\n    public cleanAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            const upload = this.uploads[i];\n            if (upload.isInvalid() || upload.hasError()) {\n                upload.cancel();\n            }\n        }\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            const files = Array.from(event.dataTransfer.files);\n            this.handleFileSelect(files);\n        }\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        const uploads = files.map((file) => this.createUpload(file));\n        this.add.emit(uploads);\n    }\n\n    /**\n     * create upload from file, listen to complete\n     * to remove upload from uploads list\n     *\n     * remove uplaod from uploads repository if upload completed\n     * or canceled\n     *\n     * @todo should be an action\n     */\n    private createUpload(file: File): FileUpload {\n        const uploadOptions = {\n            url: this.url,\n            formData: {\n                enabled: this.useFormData,\n                name   : this.formDataName\n            }\n        };\n\n        const fileModel = new UploadModel(file);\n        const upload    = new FileUpload(this.httpClient, fileModel, uploadOptions);\n\n        if (this.validator) {\n            this.preValidateUpload(fileModel);\n        }\n        if (!upload.isInvalid()) {\n            const sub = upload.change\n                .pipe(takeUntil(this.destroyed$))\n                .subscribe({\n                    complete: () => {\n                        this.uploads.splice(this.uploads.indexOf(upload), 1);\n                        sub.unsubscribe();\n                    }\n                });\n        }\n\n        this.uploads.push(upload);\n        return upload;\n    }\n\n    /**\n     * pre validate upload, if validation result is invalid\n     * fill could not uploaded anymore\n     *\n     * @todo should be an action ?\n     */\n    private preValidateUpload(upload: UploadModel) {\n        const result = \"validate\" in this.validator ? this.validator.validate(upload.file) : this.validator(upload.file);\n        if (result !== null) {\n            upload.state = UploadState.INVALID;\n        }\n        upload.validationErrors = result;\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadItemComponent.html":{"url":"components/UploadItemComponent.html","title":"component - UploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./upload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                upload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changed\n                            \n                            \n                                completed\n                            \n                            \n                                stateChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:66\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:80\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        stateChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:62\n                            \n                        \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:91\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:137\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:32\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:27\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:80\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { FileUpload } from \"../../utils/http/file-upload\";\nimport { UploadControl } from \"../../utils/upload-control\";\nimport { UploadModel } from \"../../data/upload.model\";\nimport { UploadData, UploadState, Upload } from \"../../data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    @Output()\n    public completed: EventEmitter;\n\n    @Output()\n    public stateChange: EventEmitter;\n\n    /** @deprecated use stateChange now */\n    @Output()\n    public changed: EventEmitter;\n\n    public constructor() {\n        this.completed   = new EventEmitter();\n        this.stateChange = new EventEmitter();\n        this.changed     = new EventEmitter();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n\n        let state: UploadState = UploadState.QUEUED;\n\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n\n                    if (state !== upload.state) {\n                        this.stateChange.emit(this.fileUpload);\n                        this.changed.emit(upload);\n                        state = upload.state;\n                    }\n                },\n                complete: () => {\n                    this.completed.emit(this.fileUpload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        // cancel file upload if item view is destroyed\n        this.fileUpload.cancel();\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{upload.name}}\n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | fileSize}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n                \n                    {{error}}\n                \n            \n\n            \n                \n                    {{upload.response.body.message}}\n                \n                \n                    {{upload.name}} uploaded\n                \n            \n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./upload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: 1rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n            transition: width .25s linear;\n        }\n    }\n\n    .upload-item--actions {\n\n        padding: .25rem;\n        display: flex;\n\n        button {\n            padding: 0;\n            background: lighten(map-get($colors, 'dark'), 25%);\n            color: map-get($colors, 'white');\n            border-radius: 50%;\n            border: 0;\n            height: 1rem; \n            width: 1rem; \n            cursor: pointer;\n            font-size: .75rem;\n            outline: none;\n\n            margin-right: .25rem;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                background: lighten(map-get($colors, 'dark'), 50%);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n            text-align: left;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{upload.name}}                                                                                                                        {{upload.size | fileSize}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                            {{error}}                                                                            {{upload.response.body.message}}                                                    {{upload.name}} uploaded                                        '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.model.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/upload.model.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/upload.model.ts:113\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:29\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:36\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:43\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:50\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:64\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:57\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:78\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:71\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:92\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:85\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:100\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:96\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:104\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"./api/validation\";\nimport { UploadState, UploadResponse, UploadData } from \"./api/upload\";\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"../../data/api\";\nimport { UploadModel } from \"../../data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get model(): UploadModel {\n        return this.upload;\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent || response.status === 404 ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadStore.html":{"url":"classes/UploadStore.html","title":"class - UploadStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.store.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Upload } from \"./api/upload\";\n\nexport class UploadStore {\n\n    private uploads: Upload[] = [];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadViewComponent.html":{"url":"components/UploadViewComponent.html","title":"component - UploadViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-view/upload-view.ts\n\n\n    \n        Description\n    \n    \n        NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\nto setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\nor NgxFileUploadComponent. This component simply handle all events / changes from upload.\n\n    \n\n\n\n    \n        Example\n    \n    \n                \n                    \n\n                \n                \n                    \n\n{{uploadData.name}}\n\n\n\n                \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./upload-view.scss\n            \n\n\n\n            \n                templateUrl\n                upload-view.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showList\n                            \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUploadCompleted\n                            \n                            \n                                    Public\n                                onUploadsAdd\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:63\n                            \n                        \n                \n                    \n                        set field name for FormData Object where to find the file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :         TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:43\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:50\n                            \n                        \n                \n                    \n                        input which url should be used to upload files,\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:57\n                            \n                        \n                \n                    \n                        by default files will send through FormData Object, if set to false file will send plain into\npost body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:69\n                            \n                        \n                \n                    \n                        set validator\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadCompleted(upload: Upload)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:93\n                \n            \n\n\n            \n                \n                    if state is canceled or uploaded remove it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                Upload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadsAdd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadsAdd(uploads: Upload[])\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:85\n                \n            \n\n\n            \n                \n                    new uploads has been added we need to care about this to remove\nfinished uploads from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploads\n                                    \n                                                Upload[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:79\n                            \n                        \n\n                \n                    \n                        flag list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Upload[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:74\n                            \n                        \n\n                \n                    \n                        all uploads which has been added in NgxFileUploadDirective\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, TemplateRef, Input } from \"@angular/core\";\nimport { delay } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\n\nimport { Upload } from \"../../data/api/upload\";\nimport { FileUploadItemContext } from \"../../ui\";\nimport { Validator, ValidationFn } from \"../../data/api/validation\";\n\n/**\n * NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\n * to setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\n * or NgxFileUploadComponent. This component simply handle all events / changes from upload.\n *\n * @example\n * \n * \n *\n *\n * @example\n * \n * \n *    {{uploadData.name}}\n * \n *\n * \n *\n *\n * @example\n * \n * \n */\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./upload-view.scss\"],\n    templateUrl: \"upload-view.html\"\n})\nexport class UploadViewComponent {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    /**\n     * input which url should be used to upload files,\n     * this field is mandatory\n     */\n    @Input()\n    public url: string;\n\n    /**\n     * by default files will send through FormData Object, if set to false file will send plain into\n     * post body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * set field name for FormData Object where to find the file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * set validator\n     */\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * all uploads which has been added in [NgxFileUploadDirective]{@link ../directives/NgxFileUploadDirective.html#add}\n     */\n    public uploads: Upload[] = [];\n\n    /**\n     * flag list\n     */\n    public showList = false;\n\n    /**\n     * new uploads has been added we need to care about this to remove\n     * finished uploads from list\n     */\n    public onUploadsAdd(uploads: Upload[]) {\n        this.uploads.push(...uploads);\n        this.showList = this.uploads.length > 0;\n    }\n\n    /**\n     * if state is canceled or uploaded remove it\n     */\n    public onUploadCompleted(upload: Upload) {\n        this.removeUpload(upload);\n    }\n\n    /**\n     * remove upload from list but wait for 1 sec before it will be removed\n     */\n    private removeUpload(upload: Upload) {\n        of(upload).pipe(delay(1000))\n            .subscribe({\n                next: () => {\n                    const idx = this.uploads.indexOf(upload);\n                    this.uploads.splice(idx, 1);\n                    this.showList = this.uploads.length > 0;\n                }\n            });\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n        \n    \n\n\n    Cancel\n    Clean Up\n    Upload\n\n\n    \n\n    \n                \n                    ./upload-view.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n        padding: 1rem 0;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    Drag/Drop files here or click                                        Cancel    Clean Up    Upload'\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/data/api/index.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            Upload\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.model.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.store.ts\n            \n            class\n            UploadStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-file/upload-file.ts\n            \n            directive\n            UploadFileDirective\n            \n                73 %\n                (11/15)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            component\n            UploadItemComponent\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-view/upload-view.ts\n            \n            component\n            UploadViewComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            class\n            FileUpload\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n            \n            pipe\n            FileSizePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/upload-control.ts\n            \n            class\n            UploadControl\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.9\n        \n            @angular/common : 8.2.9\n        \n            @angular/compiler : 8.2.9\n        \n            @angular/core : 8.2.9\n        \n            @angular/forms : 8.2.9\n        \n            @angular/platform-browser : 8.2.9\n        \n            @angular/platform-browser-dynamic : 8.2.9\n        \n            @angular/router : 8.2.9\n        \n            highlight.js : ^9.15.10\n        \n            igniteui-angular : ^8.2.2\n        \n            ngx-highlightjs : ^3.0.3\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            webdriver-manager : ^12.1.7\n        \n            zone.js : 0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 QUEUED\n                            \n                        \n                        \n                            \n                                Value : queued\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : progress\n                            \n                        \n                        \n                            \n                                 UPLOADED\n                            \n                        \n                        \n                            \n                                Value : uploaded\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
