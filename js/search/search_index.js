var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.019,1,1.833]],["body/classes/AndValidator.html",[0,0.022,1,2.726,2,1.344,3,0.32,4,0.32,5,0.469,6,0.211,7,2.767,8,3.621,9,2.819,10,0.378,11,1.437,12,3.675,13,2.659,14,1.172,15,0.986,16,2.862,17,2.415,18,3.223,19,3.109,20,3.109,21,0.425,22,0.04,23,2.172,24,4.443,25,1.191,26,2.767,27,2.698,28,3.362,29,1.385,30,0.78,31,1.247,32,0.831,33,1.475,34,1.063,35,2.376,36,2.767,37,1.437,38,2.767,39,2.084,40,2.376,41,1.763,42,1.589,43,2.767,44,2.376,45,1.299,46,0.035,47,2.767,48,0.575,49,2.376,50,0.32,51,1.447,52,3.621,53,4.902,54,1.85,55,2.376,56,2.767,57,2.767,58,1.49,59,0.645,60,0.028,61,0.022]],["title/classes/FileUpload.html",[0,0.019,62,0.966]],["body/classes/FileUpload.html",[0,0.012,2,0.719,3,0.171,4,0.171,5,0.433,6,0.232,10,0.203,13,1.382,14,0.747,15,0.95,21,0.142,22,0.041,23,0.797,25,1.004,29,0.479,30,0.584,31,0.431,32,0.761,34,0.858,37,1.126,46,0.012,48,0.509,50,0.267,51,1.246,54,1.897,58,2.069,59,0.927,60,0.018,61,0.012,62,1.272,63,3.413,64,1.271,65,0.719,66,1.243,67,1.738,68,1.385,69,2.792,70,3.204,71,3.204,72,2.751,73,1.525,74,1.982,75,2.323,76,1.382,77,1.799,78,2.751,79,0.933,80,3.3,81,2.323,82,1.799,83,2.436,84,2.309,85,2.436,86,1.799,87,1.246,88,2.751,89,2.323,90,1.799,91,1.246,92,3.507,93,2.837,94,2.837,95,1.191,96,1.725,97,1.87,98,1.799,99,1.018,100,2.309,101,1.799,102,2.309,103,2.837,104,1.982,105,2.413,106,1.379,107,1.687,108,1.799,109,1.378,110,2.309,111,2.436,112,1.799,113,1.799,114,3.68,115,3.204,116,2.136,117,2.837,118,1.481,119,2.309,120,2.309,121,2.837,122,1.115,123,2.309,124,0.719,125,0.99,126,2.309,127,1.115,128,0.588,129,1.687,130,0.886,131,0.171,132,2.136,133,1.698,134,0.918,135,1.982,136,0.916,137,3.076,138,2.771,139,1.115,140,1.115,141,1.379,142,1.481,143,1.115,144,2.436,145,1.481,146,1.481,147,1.481,148,1.434,149,1.378,150,1.481,151,2.837,152,1.271,153,2.309,154,1.481,155,2.309,156,1.481,157,4.381,158,1.243,159,1.481,160,1.481,161,2.436,162,0.886,163,0.886,164,0.797,165,1.481,166,1.481,167,2.837,168,2.837,169,1.378,170,1.481,171,3.204,172,1.982,173,3.474,174,1.481,175,2.309,176,1.481,177,1.271,178,1.481,179,0.797,180,2.309,181,1.481,182,1.481,183,1.481,184,1.481,185,1.544,186,1.481,187,1.481,188,1.271,189,1.481,190,1.481,191,2.309,192,1.481,193,1.544,194,1.481,195,1.481,196,1.481,197,3.204,198,1.481,199,1.481,200,2.436,201,1.481,202,1.481,203,1.481,204,1.481,205,1.271,206,1.481,207,1.481,208,0.65,209,1.481,210,1.481,211,1.481,212,1.481,213,1.271,214,1.481,215,1.481,216,2.309,217,2.837,218,2.309,219,1.481,220,1.481,221,1.481,222,1.481,223,1.481,224,1.481,225,0.99,226,1.271,227,1.271,228,1.481,229,1.481,230,1.271,231,1.982,232,2.309,233,0.719,234,1.738,235,2.309,236,1.481,237,1.481,238,1.115,239,2.837,240,1.271,241,1.115,242,1.481,243,1.481,244,0.99,245,1.481,246,1.481,247,1.481,248,1.481,249,1.481,250,1.481,251,1.481,252,1.481,253,1.481]],["title/interfaces/FileUploadItemContext.html",[131,0.282,254,1.627]],["body/interfaces/FileUploadItemContext.html",[0,0.019,3,0.274,4,0.274,5,0.312,6,0.138,10,0.324,11,1.295,15,0.924,21,0.312,22,0.041,34,0.761,37,0.941,46,0.019,48,0.67,50,0.378,58,1.276,59,0.553,60,0.026,61,0.019,62,1.832,68,1.36,75,2.182,79,0.95,87,1.432,89,1.585,99,1.338,106,0.941,116,2.457,124,1.151,125,1.585,130,1.418,131,0.274,133,1.418,136,1.729,148,1.056,149,1.585,162,1.418,163,1.418,164,2.009,185,1.585,225,1.585,234,1.785,238,1.785,241,1.785,244,1.585,254,2.495,255,1.04,256,1.785,257,2.035,258,4.216,259,2.688,260,1.765,261,2.009,262,3.263,263,2.81,264,2.37,265,3.62,266,3.204,267,2.801,268,2.035,269,2.801,270,1.276,271,1.785,272,2.37,273,2.035,274,4.02,275,3.204,276,1.785,277,3.204,278,2.457,279,2.035,280,2.37,281,2.035,282,2.37,283,1.276,284,1.585,285,3.281,286,3.263,287,1.785,288,2.37,289,2.37,290,3.731,291,3.263,292,2.37,293,1.585,294,2.035,295,2.37,296,2.37,297,2.37,298,1.785,299,2.37,300,2.37,301,2.37,302,2.37,303,2.37,304,2.37,305,2.37,306,2.37,307,1.585,308,0.85,309,2.035,310,2.37,311,2.035,312,2.37,313,1.785,314,1.785,315,2.035,316,2.37,317,2.035,318,1.785,319,2.37,320,2.37,321,2.035,322,2.37,323,3.263,324,2.37,325,2.035,326,2.37,327,2.035,328,2.37,329,2.37,330,2.37,331,3.263,332,2.37,333,2.37,334,2.37,335,2.37,336,2.035,337,2.035,338,1.785,339,2.035,340,2.37,341,2.37,342,2.37,343,2.37,344,1.418,345,2.37,346,0.85]],["title/classes/GroupedValidator.html",[0,0.019,9,1.457]],["body/classes/GroupedValidator.html",[0,0.027,2,1.277,3,0.304,4,0.304,5,0.46,6,0.268,9,2.094,10,0.359,11,1.389,12,3.857,13,2.874,14,1.133,15,0.994,16,2.631,17,2.51,18,3.383,19,3.005,20,3.602,21,0.418,22,0.04,23,2.507,25,1.174,27,2.34,29,1.358,30,0.764,31,1.222,32,0.819,33,1.414,34,0.978,35,2.257,37,1.562,39,2.635,40,3.005,41,1.906,42,1.841,44,3.005,45,1.505,46,0.031,48,0.418,50,0.304,55,3.378,59,0.816,60,0.027,61,0.021,76,2.094,193,2.34,284,2.34,298,1.979,347,2.628,348,3.193,349,4.251,350,2.628,351,3.193,352,3.193,353,3.193,354,3.193,355,3.193,356,3.193,357,3.193,358,3.193,359,2.628,360,3.193]],["title/interfaces/IDataNode.html",[131,0.282,361,1.31]],["body/interfaces/IDataNode.html",[0,0.018,3,0.26,4,0.26,5,0.442,6,0.183,15,0.995,21,0.215,22,0.041,25,0.587,30,0.573,32,0.661,33,1.338,34,0.964,45,1.127,46,0.018,48,0.357,50,0.496,51,0.805,59,1.089,60,0.025,61,0.018,66,1.209,68,1.204,73,1.379,79,0.654,87,1.379,91,1.379,95,1.017,96,2.306,97,1.209,99,1.578,106,1.7,107,1.908,109,1.526,128,1.641,129,1.881,131,0.455,134,1.338,136,1.439,141,0.891,148,1.338,158,1.209,169,1.09,179,1.692,208,1.931,233,1.09,255,0.986,260,1.379,308,1.127,346,0.805,361,1.692,362,1.209,363,2.245,364,1.379,365,2.727,366,1.209,367,1.501,368,1.97,369,1.692,370,1.692,371,2.632,372,2.114,373,1.501,374,1.501,375,1.501,376,1.344,377,1.501,378,2.101,379,1.501,380,2.101,381,1.501,382,1.501,383,2.101,384,1.501,385,1.501,386,1.501,387,1.501,388,1.501,389,2.101,390,1.501,391,2.101,392,1.501,393,2.101,394,1.344,395,1.501,396,2.101,397,2.101,398,1.761,399,2.101,400,1.501,401,1.501,402,1.501,403,1.501,404,1.501,405,1.501,406,1.501,407,1.501,408,1.501,409,1.501]],["title/components/NgxFileUploadComponent.html",[261,1.31,410,1.457]],["body/components/NgxFileUploadComponent.html",[0,0.011,3,0.315,4,0.161,5,0.393,6,0.244,10,0.19,11,0.872,14,0.711,15,0.952,17,0.832,18,1.655,21,0.343,22,0.04,25,1.072,29,0.882,30,0.709,31,0.794,32,0.497,37,1.229,39,1.655,41,1.544,42,1.196,46,0.011,48,0.652,50,0.161,51,0.499,54,2.254,58,1.467,60,0.017,61,0.011,62,1.836,65,0.676,68,1.3,69,1.47,79,0.902,80,1.887,99,1.396,106,1.081,124,0.676,127,1.047,128,0.552,130,0.832,132,2.539,133,1.315,134,0.711,137,2.331,138,2.331,139,2.331,140,1.655,141,0.872,143,2.331,148,0.711,149,1.068,161,1.194,162,0.832,163,0.832,164,0.749,172,1.194,185,1.47,193,1.47,225,1.47,240,1.887,254,0.93,256,3.15,261,1.815,263,2.93,265,2.339,270,0.749,271,1.047,275,1.887,276,2.539,277,3.707,278,1.655,279,1.887,281,1.887,283,0.749,285,2.052,287,2.699,293,2.51,298,1.655,307,1.47,308,0.788,317,1.887,318,1.655,327,1.887,338,2.539,346,1.615,364,0.611,366,0.749,368,0.965,372,0.749,398,0.676,410,2.455,411,1.887,412,1.391,413,1.391,414,1.391,415,1.391,416,3.31,417,1.929,418,2.67,419,2.198,420,2.67,421,2.67,422,2.67,423,2.658,424,2.67,425,1.047,426,3.31,427,2.67,428,3.31,429,4.101,430,2.67,431,2.67,432,2.67,433,1.887,434,2.725,435,3.31,436,2.725,437,2.826,438,2.331,439,1.689,440,3.096,441,2.67,442,1.689,443,2.67,444,1.391,445,1.689,446,3.584,447,2.198,448,1.689,449,2.198,450,1.689,451,2.67,452,1.689,453,2.67,454,1.689,455,2.67,456,1.689,457,3.096,458,2.67,459,2.67,460,2.67,461,3.077,462,1.689,463,2.67,464,1.689,465,2.198,466,2.198,467,1.689,468,1.689,469,1.391,470,1.391,471,1.391,472,1.689,473,1.689,474,1.689,475,1.689,476,1.689,477,1.689,478,1.391,479,1.689,480,1.689,481,1.689,482,1.689,483,1.689,484,2.67,485,2.198,486,1.689,487,2.67,488,1.689,489,1.689,490,1.689,491,1.391,492,1.391,493,1.689,494,1.689,495,1.689,496,1.689,497,1.689,498,2.67,499,1.391,500,2.198,501,1.391,502,1.391,503,1.391,504,1.391,505,1.194,506,4.421,507,3.096,508,2.198,509,2.198,510,1.689,511,2.198,512,2.67,513,4.184,514,3.891,515,2.198,516,1.689,517,2.67,518,1.689,519,1.689,520,1.391,521,1.689,522,1.689,523,1.689,524,2.198,525,2.725,526,1.391,527,3.096,528,2.725,529,2.725,530,3.096,531,2.198,532,2.198,533,2.725,534,3.096,535,1.689,536,1.689,537,2.725,538,2.725,539,2.725,540,2.725,541,1.689,542,1.689,543,1.689,544,1.391,545,3.31,546,3.096,547,2.725,548,1.391,549,1.391,550,1.391,551,2.725,552,1.391,553,1.391,554,1.689,555,1.391,556,2.198,557,1.391,558,1.689,559,1.391,560,1.391,561,1.689,562,1.689,563,2.67,564,1.391,565,1.689,566,1.689,567,1.047,568,2.198,569,1.887,570,0.832,571,3.096,572,1.391,573,1.391,574,1.194,575,1.194,576,1.391]],["title/directives/NgxFileUploadDirective.html",[417,1.31,570,1.457]],["body/directives/NgxFileUploadDirective.html",[0,0.011,3,0.168,4,0.168,5,0.435,6,0.254,10,0.199,14,0.736,15,0.947,16,1.521,17,2.284,21,0.33,22,0.041,25,1.124,29,0.47,30,0.578,31,0.423,32,0.511,34,0.654,37,1.112,41,1.449,42,1.23,45,0.521,46,0.027,48,0.606,50,0.168,51,1.49,54,1.521,58,1.224,59,0.53,60,0.018,61,0.011,62,1.259,65,0.706,68,1.322,69,2.12,75,1.874,76,1.361,78,3.135,79,0.662,81,1.521,83,2.406,88,1.953,89,1.874,91,0.638,95,0.736,99,0.816,104,1.247,111,1.953,122,1.094,124,0.706,125,0.971,127,1.094,128,0.577,130,0.869,132,2.388,133,1.361,134,0.736,135,2.723,136,1.259,137,1.094,138,1.712,140,1.712,141,1.259,143,1.712,144,1.247,148,1.344,149,1.54,162,0.869,164,2.376,177,1.247,193,2.12,233,1.105,261,0.782,263,2.873,266,2.723,267,1.953,268,1.247,269,2.406,270,0.782,271,1.094,276,1.712,284,1.521,287,1.094,293,1.874,294,1.247,307,2.441,308,0.521,311,1.247,313,1.712,314,2.388,315,2.723,325,1.247,336,1.953,337,2.406,338,2.11,339,1.247,346,0.816,366,0.782,368,0.638,369,1.509,376,1.361,417,1.707,423,2.723,425,1.094,429,4.233,433,1.953,434,2.803,436,2.803,437,2.388,438,2.11,440,3.816,446,3.171,447,2.274,449,2.274,457,2.274,461,1.247,465,2.803,485,1.453,505,1.953,570,2.06,574,1.247,575,2.723,577,4.361,578,1.453,579,4.181,580,4.635,581,3.852,582,3.852,583,3.852,584,2.274,585,2.274,586,2.762,587,1.765,588,3.404,589,3.852,590,1.765,591,1.765,592,1.765,593,2.762,594,1.765,595,2.274,596,1.765,597,1.765,598,2.803,599,1.453,600,1.765,601,2.762,602,2.762,603,1.765,604,3.852,605,1.765,606,2.762,607,1.765,608,1.765,609,1.765,610,2.762,611,3.852,612,1.765,613,2.762,614,2.274,615,1.765,616,2.762,617,1.765,618,1.765,619,1.765,620,1.765,621,1.765,622,2.762,623,1.765,624,2.762,625,1.765,626,1.765,627,1.765,628,1.765,629,1.765,630,1.765,631,1.765,632,1.765,633,3.404,634,1.765,635,1.765,636,1.765,637,1.765,638,1.765,639,1.765,640,1.765,641,1.765,642,1.765,643,1.765,644,2.762,645,1.765,646,1.765,647,1.765,648,1.765,649,1.765,650,1.765,651,1.765,652,1.765,653,1.765,654,1.765,655,1.765,656,1.765,657,1.765,658,1.765,659,1.765,660,1.765,661,2.762,662,1.765,663,1.765,664,2.762,665,1.765,666,1.765,667,1.765,668,1.765,669,1.765,670,1.765,671,1.765,672,1.765,673,1.765,674,1.765,675,1.765,676,1.765,677,1.765,678,1.765,679,2.762,680,1.765,681,1.765,682,1.765,683,1.765,684,1.765,685,2.762,686,1.765,687,2.762,688,2.274,689,1.765,690,1.453,691,1.765,692,1.765,693,1.765,694,1.765,695,1.765,696,1.765,697,1.765,698,1.765,699,1.765,700,1.765]],["title/components/NgxFileUploadItemComponent.html",[261,1.31,283,1.31]],["body/components/NgxFileUploadItemComponent.html",[0,0.011,3,0.157,4,0.157,5,0.207,6,0.238,10,0.295,11,0.857,14,0.699,15,0.889,21,0.293,22,0.04,25,1.039,29,0.699,30,0.608,31,0.629,32,0.489,34,0.504,37,1.066,46,0.011,48,0.591,50,0.25,58,0.732,59,0.317,60,0.017,61,0.011,62,1.865,65,0.661,68,1.4,74,1.854,75,1.444,79,0.629,87,1.342,89,0.909,95,0.869,99,1.196,106,1.066,116,2.511,124,0.661,125,0.909,130,0.814,131,0.157,133,1.607,136,1.213,141,0.857,148,0.699,149,1.049,162,0.814,163,0.814,164,1.795,169,0.661,185,1.444,188,1.168,208,0.948,225,0.909,227,1.168,234,2.022,238,2.022,241,1.626,244,0.909,254,1.795,256,3.068,257,1.168,258,2.159,259,1.444,260,0.948,261,1.646,262,2.685,263,2.022,264,1.36,265,3.314,266,2.625,267,1.854,268,1.168,269,2.305,270,0.732,271,1.024,272,1.36,273,1.168,274,3.057,275,3.047,276,2.511,277,3.498,278,3.346,279,1.854,280,2.159,281,1.854,282,2.685,283,1.646,284,1.444,285,3.346,286,3.057,287,2.801,288,2.685,289,2.159,290,3.549,291,2.685,292,1.36,293,1.795,294,1.168,295,1.36,296,1.36,297,1.36,298,1.024,299,1.36,300,2.685,301,2.685,302,1.36,303,1.36,304,1.36,305,1.36,306,2.159,307,2.044,308,0.774,309,1.854,310,2.159,311,1.168,312,1.36,313,1.626,314,1.024,315,1.168,316,1.36,317,2.625,318,2.022,319,1.36,320,1.36,321,1.168,322,1.36,323,2.685,324,1.36,325,1.168,326,1.36,327,1.168,328,1.36,329,1.36,330,1.36,331,2.159,332,1.36,333,1.36,334,1.36,335,1.36,336,1.168,337,1.168,338,1.024,339,1.168,340,1.36,341,2.159,342,2.159,343,2.159,344,1.292,345,3.057,346,1.54,364,0.948,368,0.948,371,0.814,372,1.646,394,1.292,398,1.485,410,0.814,411,1.854,412,1.36,413,1.36,414,1.36,417,0.732,425,1.024,433,1.854,437,1.024,461,1.168,466,1.36,499,1.36,500,3.057,501,1.36,502,1.36,503,1.36,504,1.36,505,1.168,506,3.976,507,2.159,508,1.36,509,3.057,511,1.36,513,3.976,514,3.335,515,2.685,520,2.159,524,3.549,525,3.72,526,2.159,527,3.335,528,1.36,529,1.36,530,1.36,531,2.159,532,1.36,533,1.36,534,1.36,537,3.057,538,3.335,539,3.335,540,2.685,544,2.159,546,2.159,547,1.36,548,1.36,549,3.057,550,2.159,551,3.057,552,3.335,553,2.159,555,1.36,556,3.72,557,2.159,559,2.159,560,2.159,564,1.36,567,1.024,568,2.159,569,1.854,570,0.814,571,3.057,572,1.36,573,1.36,574,1.168,575,1.168,576,1.36,584,2.159,585,2.159,595,1.36,598,1.36,599,1.36,690,2.159,701,2.622,702,2.622,703,2.622,704,1.652,705,1.652,706,1.652,707,1.652,708,1.652,709,1.652,710,1.652,711,3.713,712,2.622,713,2.159,714,2.622,715,2.622,716,3.261,717,3.261,718,1.652,719,1.652,720,1.652,721,1.652,722,1.652,723,1.652,724,3.713,725,1.652,726,1.652,727,1.652,728,3.261,729,2.622,730,1.652,731,1.652,732,1.652,733,1.652,734,2.622,735,1.652,736,1.652,737,1.652,738,1.652,739,1.652,740,1.652,741,1.652,742,1.652,743,1.652,744,1.652,745,2.622,746,3.261,747,2.622,748,2.622,749,2.622,750,2.622,751,2.622,752,2.622,753,2.622,754,1.652,755,1.652,756,1.652,757,1.652,758,1.652,759,1.36,760,1.652,761,1.652,762,1.652,763,1.652,764,1.652,765,1.652,766,1.652,767,1.652,768,1.652,769,1.652,770,1.652]],["title/modules/NgxFileUploadModule.html",[771,2.09,772,1.833]],["body/modules/NgxFileUploadModule.html",[0,0.023,3,0.345,4,0.345,5,0.363,6,0.174,22,0.04,46,0.023,48,0.767,50,0.345,60,0.03,61,0.023,62,1.182,105,2.243,122,2.243,270,1.604,283,2.651,410,2.947,417,2.651,471,2.979,567,2.243,771,2.558,772,3.752,773,2.558,774,2.243,775,4.18,776,2.979,777,2.979,778,4.18,779,2.979,780,2.979,781,2.979,782,3.108,783,3.797,784,2.979,785,3.618,786,3.618,787,4.612,788,4.612,789,2.979,790,4.612,791,4.612,792,2.979,793,3.618,794,4.612,795,2.979,796,2.558,797,4.612,798,3.618,799,3.618,800,3.618,801,3.618,802,3.618,803,3.618]],["title/classes/OrValidator.html",[0,0.019,804,1.833]],["body/classes/OrValidator.html",[0,0.022,2,1.354,3,0.323,4,0.323,5,0.469,6,0.212,8,3.639,9,2.823,10,0.381,11,1.444,12,3.686,13,2.665,14,1.178,15,0.987,16,2.871,17,2.424,18,3.233,19,3.124,20,3.124,21,0.426,22,0.04,23,2.18,24,4.454,25,1.193,26,2.788,27,2.708,29,1.389,30,0.782,31,1.251,32,0.832,33,1.478,34,1.085,35,2.394,36,2.788,37,1.444,38,2.788,39,2.1,40,2.394,41,1.768,42,1.597,43,2.788,44,2.394,45,1.305,46,0.035,47,2.788,48,0.578,49,2.394,50,0.323,51,1.305,52,4.05,55,2.394,56,2.788,57,2.788,59,0.65,60,0.029,61,0.022,200,2.394,804,2.74,805,2.788,806,3.387]],["title/pipes/ToArrayPipe.html",[344,1.457,782,1.627]],["body/pipes/ToArrayPipe.html",[0,0.024,3,0.351,4,0.351,5,0.403,6,0.224,14,0.982,21,0.368,22,0.04,23,2.514,25,0.792,29,1.243,30,0.7,31,0.884,32,0.553,45,1.378,46,0.024,48,0.482,50,0.351,59,0.896,60,0.03,61,0.024,65,1.473,67,2.892,68,1.36,92,3.298,95,1.243,107,2.268,134,1.434,213,3.298,226,3.298,231,3.298,270,1.633,284,2.028,344,2.523,419,3.841,425,2.284,437,2.892,438,3.174,688,3.841,759,3.033,782,2.568,796,2.604,807,3.841,808,3.033,809,4.666,810,4.666,811,4.666,812,4.666,813,4.666,814,4.666,815,4.666,816,4.666,817,4.666,818,4.666,819,4.666,820,4.666,821,4.666,822,4.666,823,5.761,824,3.684,825,4.666,826,3.684,827,3.684]],["title/classes/UploadControl.html",[0,0.019,259,1.627]],["body/classes/UploadControl.html",[0,0.02,2,1.214,3,0.289,4,0.289,5,0.324,6,0.251,10,0.342,14,1.095,15,0.985,17,1.496,21,0.393,22,0.04,25,1.074,29,1.33,30,0.749,31,1.197,32,0.699,37,1.522,46,0.02,48,0.538,50,0.289,60,0.027,61,0.02,62,1.797,65,1.214,67,3.334,68,1.36,69,2.872,72,3.801,73,1.943,76,2.025,85,2.905,91,1.485,95,1.095,124,1.214,139,1.882,148,1.095,152,2.905,163,1.496,164,2.437,205,2.905,230,2.905,244,1.671,259,2.262,273,2.905,278,2.548,285,2.548,307,1.671,308,0.896,309,3.293,313,3.585,314,1.882,318,2.548,346,0.896,350,3.836,423,2.905,444,2.499,470,2.499,478,2.499,491,2.499,492,2.499,569,2.146,614,3.383,828,4.295,829,2.499,830,4.11,831,4.11,832,4.993,833,3.036,834,3.036,835,4.11,836,3.036,837,4.11,838,4.11,839,4.11,840,4.11,841,3.036,842,4.11,843,3.036,844,3.036,845,3.036,846,4.11,847,3.036,848,3.036,849,3.036,850,3.036,851,3.036,852,3.036,853,3.036]],["title/interfaces/UploadData.html",[131,0.282,260,1.068]],["body/interfaces/UploadData.html",[0,0.017,3,0.246,4,0.246,5,0.437,6,0.124,10,0.291,11,1.2,15,0.987,21,0.424,22,0.041,30,0.738,32,0.641,33,1.311,34,0.945,45,1.453,46,0.017,48,0.338,50,0.487,51,0.762,59,1.078,60,0.024,61,0.017,66,1.144,68,1.18,73,1.327,79,0.619,87,1.327,91,1.327,95,0.978,96,2.424,97,1.144,99,1.553,106,1.787,107,1.862,109,1.468,128,1.719,129,1.943,131,0.444,134,1.362,136,1.397,141,0.844,148,1.311,158,1.144,169,1.032,179,1.627,208,2.005,233,1.032,255,0.933,260,1.545,308,1.084,346,0.762,361,1.144,362,1.144,364,0.933,366,1.144,367,1.421,368,2.028,369,1.627,370,2.063,371,2.816,372,2.331,373,1.421,374,1.421,375,1.421,376,1.272,377,1.421,378,2.021,379,1.421,380,2.021,381,1.421,382,1.421,383,2.021,384,1.421,385,1.421,386,1.421,387,1.421,388,1.421,389,2.021,390,1.421,391,2.021,392,1.421,393,2.021,394,1.272,395,1.421,396,2.021,397,2.021,398,1.709,399,2.021,400,1.421,401,1.421,402,1.421,403,1.421,404,1.421,405,1.421,406,1.421,407,1.421,408,1.421,409,1.421]],["title/classes/UploadModel.html",[0,0.019,79,0.709]],["body/classes/UploadModel.html",[0,0.014,2,0.882,3,0.21,4,0.21,5,0.458,6,0.273,10,0.248,14,0.873,15,0.981,21,0.341,22,0.041,25,1.215,29,1.231,30,0.752,31,1.108,32,0.864,33,1.335,34,0.887,37,1.413,45,0.967,46,0.014,48,0.288,50,0.461,51,0.651,59,1.055,60,0.021,61,0.014,65,0.882,66,1.451,68,1.283,73,1.183,74,2.315,76,1.087,79,0.785,87,1.562,91,1.562,95,0.873,96,2.406,97,0.977,99,1.58,106,1.774,107,1.847,109,1.31,128,1.581,129,1.811,131,0.412,134,1.289,136,1.581,141,0.721,148,1.231,158,0.977,169,0.882,179,1.731,208,1.9,233,1.31,260,1.412,308,0.967,346,0.651,361,0.977,362,0.977,364,0.797,366,0.977,367,1.214,368,2.007,369,1.451,370,1.451,371,2.675,372,2.145,373,1.214,374,1.214,375,1.214,376,1.613,377,1.803,378,1.803,379,1.803,380,2.543,381,1.803,382,1.214,383,2.543,384,1.214,385,1.803,386,2.15,387,1.214,388,1.214,389,1.803,390,1.214,391,1.803,392,1.214,393,1.803,394,1.613,395,1.214,396,1.803,397,1.803,398,1.562,399,1.803,400,1.214,401,1.214,402,1.214,403,1.214,404,2.38,405,1.214,406,1.214,407,1.214,408,1.214,409,1.214,854,2.205,855,2.205,856,2.205,857,2.205,858,2.205,859,2.205,860,2.205,861,2.205,862,2.205,863,2.205,864,2.205,865,2.205,866,2.205,867,2.205,868,2.205,869,2.205,870,2.205,871,2.205,872,2.205,873,2.205,874,2.205,875,2.205,876,2.205,877,2.205,878,2.205,879,2.205,880,2.205,881,2.205]],["title/interfaces/UploadOptions.html",[81,1.627,131,0.282]],["body/interfaces/UploadOptions.html",[0,0.013,3,0.19,4,0.19,5,0.424,6,0.096,10,0.224,11,0.991,13,0.981,15,0.825,21,0.324,22,0.041,23,0.882,30,0.551,31,0.727,32,0.455,34,0.894,46,0.013,48,0.537,50,0.289,51,1.305,54,2.021,58,1.958,59,0.93,60,0.02,61,0.013,62,0.991,63,1.407,64,1.407,65,0.796,66,0.882,67,1.234,68,1.367,69,2.433,70,1.639,71,1.639,72,1.407,73,1.096,75,1.669,76,0.981,78,2.143,79,0.727,80,3.422,81,2.26,83,2.143,84,1.639,85,2.143,87,1.096,88,2.596,89,2.26,91,1.096,92,3.422,93,2.496,94,2.496,95,1.177,96,1.627,97,1.627,99,0.895,100,1.639,102,1.639,103,2.496,104,1.407,105,1.879,106,1.2,107,1.642,109,1.212,110,1.639,111,2.143,114,3.38,115,3.023,116,1.879,117,3.023,118,1.639,119,2.496,120,2.496,121,3.023,122,1.234,123,2.496,124,0.796,125,1.096,126,2.496,127,1.234,128,0.65,129,1.749,130,0.981,131,0.19,132,3.001,133,2.023,134,1.177,135,2.596,136,1.2,137,3.332,138,2.886,139,1.234,140,1.234,141,1.444,142,1.639,143,1.234,144,2.596,145,1.639,146,1.639,147,1.639,148,1.465,149,1.468,150,1.639,151,3.023,152,1.407,153,2.496,154,1.639,155,2.496,156,1.639,157,4.479,158,1.344,159,1.639,160,1.639,161,2.596,162,0.981,163,0.981,164,0.882,165,1.639,166,1.639,167,3.023,168,3.023,169,1.468,170,1.639,171,3.38,172,2.143,173,3.638,174,1.639,175,2.496,176,1.639,177,1.407,178,1.639,179,0.882,180,2.496,181,1.639,182,1.639,183,1.639,184,1.639,185,1.669,186,1.639,187,1.639,188,1.407,189,1.639,190,1.639,191,2.496,192,1.639,193,1.669,194,1.639,195,1.639,196,1.639,197,3.38,198,1.639,199,1.639,200,2.596,201,1.639,202,1.639,203,1.639,204,1.639,205,1.407,206,1.639,207,1.639,208,0.719,209,1.639,210,1.639,211,1.639,212,1.639,213,1.407,214,1.639,215,1.639,216,2.496,217,3.023,218,2.496,219,1.639,220,1.639,221,1.639,222,1.639,223,1.639,224,1.639,225,1.096,226,1.407,227,1.407,228,1.639,229,1.639,230,1.407,231,2.143,232,2.496,233,0.796,234,1.879,235,2.496,236,1.639,237,1.639,238,1.234,239,3.023,240,1.407,241,1.234,242,1.639,243,1.639,244,1.096,245,1.639,246,1.639,247,1.639,248,1.639,249,1.639,250,1.639,251,1.639,252,1.639,253,1.639,255,0.719,882,3.032]],["title/interfaces/UploadResponse.html",[129,1.068,131,0.282]],["body/interfaces/UploadResponse.html",[0,0.017,3,0.255,4,0.255,5,0.441,6,0.129,10,0.302,11,1.232,15,0.993,21,0.373,22,0.041,30,0.566,32,0.655,33,1.329,34,0.958,45,1.114,46,0.017,48,0.351,50,0.493,51,0.792,59,1.086,60,0.024,61,0.017,66,1.188,68,1.197,73,1.363,79,0.643,87,1.363,91,1.363,95,1.005,96,2.294,97,1.934,99,1.57,106,1.691,107,2.126,109,1.508,128,1.63,129,1.921,131,0.451,134,1.262,136,1.426,141,1.547,148,1.329,158,1.188,169,1.893,179,1.672,208,1.921,233,1.072,255,0.969,260,1.363,308,1.114,346,0.792,361,1.188,362,1.188,364,0.969,366,1.188,367,1.476,368,1.962,369,1.672,370,1.672,371,2.62,372,2.098,373,1.476,374,1.476,375,1.476,376,1.321,377,1.476,378,2.076,379,1.476,380,2.076,381,1.476,382,1.476,383,2.076,384,1.476,385,1.476,386,1.476,387,1.476,388,1.476,389,2.076,390,1.476,391,2.076,392,1.476,393,2.076,394,1.321,395,1.476,396,2.076,397,2.076,398,1.745,399,2.076,400,1.476,401,1.476,402,1.476,403,1.476,404,1.476,405,1.476,406,1.476,407,1.476,408,1.476,409,1.476]],["title/interfaces/UploadValidation.html",[131,0.282,370,1.31]],["body/interfaces/UploadValidation.html",[0,0.017,3,0.257,4,0.257,5,0.441,6,0.13,10,0.304,11,1.239,15,0.994,21,0.299,22,0.041,30,0.569,32,0.657,33,1.42,34,1.023,45,1.119,46,0.017,48,0.353,50,0.494,51,0.797,59,1.087,60,0.025,61,0.017,66,1.197,68,1.2,73,1.37,79,0.648,87,1.37,91,1.37,95,1.01,96,2.299,97,1.197,99,1.573,106,1.695,107,2.13,109,1.516,128,1.635,129,1.875,131,0.453,134,1.266,136,1.431,141,0.882,148,1.333,158,1.197,169,1.08,179,1.68,208,1.925,233,1.08,255,0.976,260,1.37,308,1.119,346,0.797,361,1.197,362,1.197,364,0.976,366,1.197,367,1.487,368,1.965,369,1.68,370,1.941,371,2.625,372,2.105,373,1.487,374,1.487,375,1.487,376,1.33,377,1.487,378,2.087,379,1.487,380,2.087,381,1.487,382,1.487,383,2.087,384,1.487,385,1.487,386,1.487,387,1.487,388,1.487,389,2.087,390,1.487,391,2.087,392,1.487,393,2.087,394,1.33,395,1.487,396,2.087,397,2.087,398,1.752,399,2.087,400,1.487,401,1.487,402,1.487,403,1.487,404,1.487,405,1.487,406,1.487,407,1.487,408,1.487,409,1.487]],["title/classes/ValidationBuilder.html",[0,0.019,883,2.09]],["body/classes/ValidationBuilder.html",[0,0.026,1,2.504,2,1.615,3,0.385,4,0.385,5,0.318,6,0.256,9,2.81,10,0.455,13,2.434,14,1.316,15,0.842,21,0.389,22,0.04,23,2.572,25,1.063,29,1.316,30,0.741,31,1.185,32,0.741,41,1.32,42,1.46,45,1.193,46,0.026,48,0.727,49,2.855,50,0.385,59,0.949,60,0.032,61,0.026,149,1.975,321,4.102,804,2.504,883,3.492,884,3.325,885,4.039,886,4.039,887,4.039,888,4.039,889,4.039,890,4.039,891,4.039,892,4.039,893,4.039,894,4.039]],["title/interfaces/ValidationErrors.html",[33,0.788,131,0.282]],["body/interfaces/ValidationErrors.html",[3,0.423,4,0.423,5,0.452,6,0.251,21,0.35,22,0.039,25,0.955,27,2.445,33,1.529,34,1.004,41,1.452,42,1.605,46,0.029,50,0.53,60,0.034,61,0.029,131,0.498,134,1.394,255,1.605,363,3.657,364,1.89,895,2.754,896,4.442]],["title/interfaces/Validator.html",[41,0.966,131,0.282]],["body/interfaces/Validator.html",[3,0.41,4,0.41,5,0.469,6,0.247,10,0.485,14,1.368,16,2.826,21,0.405,22,0.04,25,0.926,27,2.826,29,1.147,30,0.646,31,1.032,32,0.646,33,1.514,34,1.053,41,1.678,42,1.556,46,0.028,50,0.523,60,0.033,61,0.028,131,0.489,134,1.147,255,1.556,364,1.556,895,2.668,897,4.305]],["title/coverage.html",[898,3.323]],["body/coverage.html",[0,0.037,1,2.25,5,0.286,6,0.294,7,2.989,9,1.789,21,0.286,22,0.04,33,0.967,41,1.186,46,0.023,60,0.03,61,0.023,62,1.662,63,3.267,64,3.267,79,0.871,81,1.998,129,1.312,131,0.554,149,1.452,254,1.998,256,3.152,257,3.267,259,1.998,260,1.312,261,2.048,283,1.609,344,1.789,346,1.716,347,2.989,361,1.609,362,2.45,370,1.609,398,2.21,410,1.789,415,2.989,417,1.609,570,1.789,577,2.989,578,2.989,782,1.998,804,2.25,805,2.989,807,2.989,808,2.989,828,2.989,829,2.989,883,2.566,884,2.989,895,2.865,898,2.989,899,3.63,900,3.63,901,3.63,902,3.63,903,4.622,904,3.63,905,3.63,906,3.63,907,3.63,908,4.622,909,4.622,910,3.63,911,3.63,912,4.622,913,3.63,914,3.63,915,3.63,916,3.63,917,5.085,918,5.085,919,3.63,920,3.63]],["title/dependencies.html",[774,2.204,921,2.468]],["body/dependencies.html",[22,0.04,46,0.028,60,0.034,61,0.028,124,1.759,270,1.949,469,3.621,774,2.726,789,3.621,792,4.281,795,3.621,796,3.109,922,6.023,923,4.398,924,4.398,925,4.281,926,4.398,927,4.398,928,4.398,929,4.398,930,4.398,931,4.398,932,4.398,933,4.398,934,4.398,935,4.398,936,4.398]],["title/miscellaneous/enumerations.html",[937,1.53,938,2.928]],["body/miscellaneous/enumerations.html",[6,0.215,10,0.504,22,0.039,46,0.029,60,0.034,61,0.029,73,1.899,95,1.4,109,2.101,128,1.717,208,1.899,308,1.552,362,1.984,368,1.899,369,2.329,438,3.719,937,2.776,938,3.687,939,4.478]],["title/index.html",[10,0.333,940,2.434]],["body/index.html",[2,1.673,22,0.039,46,0.027,60,0.033,61,0.027,105,2.593,255,1.512,283,2.623,293,2.983,344,2.061,410,2.916,411,2.957,417,2.623,567,2.593,570,2.061,713,3.444,771,3.567,772,3.79,774,2.593,775,3.444,776,3.444,777,3.444,778,3.444,779,3.444,780,3.444,781,3.444,782,2.983,783,4.155,784,3.444,940,3.444,941,4.183,942,4.183]],["title/modules.html",[773,2.853]],["body/modules.html",[22,0.035,46,0.031,60,0.035,61,0.031,772,2.954,773,3.369,925,3.923,943,4.766,944,4.766,945,4.766]],["title/miscellaneous/typealiases.html",[937,1.53,946,3.556]],["body/miscellaneous/typealiases.html",[6,0.227,10,0.532,21,0.372,22,0.035,42,1.959,46,0.031,60,0.035,61,0.031,359,3.89,895,2.929,937,2.929,947,4.725,948,4.725]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["0.9.1",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":293,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["1.10.0",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":767,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["1/1",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["10/11",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":398,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["12.1.7",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["12/13",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":732,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["1px",{"_index":514,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["1rem",{"_index":526,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["2",{"_index":713,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["2.5rem",{"_index":542,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["200",{"_index":215,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["25",{"_index":763,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["25,safari5.1",{"_index":736,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["25rem",{"_index":716,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["2e2e2e",{"_index":558,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["2xx",{"_index":222,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["3/3",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":563,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["4/5",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":545,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["42",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":547,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["5",{"_index":757,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["50",{"_index":552,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["50%,#f7f7f7",{"_index":734,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["5rem",{"_index":525,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["6",{"_index":737,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["6.5.3",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":941,"title":{},"body":{"index.html":{}}}],["7/7",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["75rem",{"_index":752,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["8",{"_index":942,"title":{},"body":{"index.html":{}}}],["8.2.8",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":557,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["9.1.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["abort",{"_index":110,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["absolute",{"_index":755,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":74,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["action",{"_index":554,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["actions",{"_index":750,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["actual_component",{"_index":576,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{}}}],["add(...validators",{"_index":356,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":457,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["affect",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["again",{"_index":104,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["aliases",{"_index":947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":533,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["allowed",{"_index":766,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["and(...validators",{"_index":891,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":885,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":889,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":892,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":795,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/animations",{"_index":469,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"dependencies.html":{}}}],["angular/common",{"_index":789,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":122,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{}}}],["angular/compiler",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":270,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"pipes/ToArrayPipe.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":792,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":467,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["animate(250",{"_index":477,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["animations",{"_index":472,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["anymore",{"_index":673,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["anything",{"_index":241,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["arguments",{"_index":598,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":643,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":696,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["array.isarray(validators",{"_index":355,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["array.isarray(value",{"_index":827,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["array.pipe",{"_index":802,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["array.pipe.ts",{"_index":808,"title":{},"body":{"pipes/ToArrayPipe.html":{},"coverage.html":{}}}],["array.pipe.ts:13",{"_index":824,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["assets//scss/variables",{"_index":503,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["assets/fonts",{"_index":502,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["assets/scss/icons",{"_index":504,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["assume",{"_index":228,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["authorized",{"_index":818,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["auto",{"_index":510,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["back",{"_index":94,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["background",{"_index":556,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["basis",{"_index":523,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["before",{"_index":491,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["begin",{"_index":616,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["behaviorsubject",{"_index":123,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["behaviorsubject(this.upload",{"_index":154,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["bind",{"_index":301,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["block",{"_index":555,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["body",{"_index":141,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["boolean",{"_index":97,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":776,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":513,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["bottom",{"_index":528,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["bound",{"_index":291,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["box",{"_index":517,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["break",{"_index":200,"title":{},"body":{"classes/FileUpload.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{}}}],["broken",{"_index":614,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{}}}],["browse",{"_index":945,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":925,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":793,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["browseranimationsmodule",{"_index":791,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["browsers",{"_index":726,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["build",{"_index":178,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["button",{"_index":762,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["byte",{"_index":381,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["bytes",{"_index":394,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["cancel",{"_index":69,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["cancelall",{"_index":581,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["canceled",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":682,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["care",{"_index":459,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["case",{"_index":197,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["center",{"_index":534,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["chance",{"_index":230,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["change",{"_index":75,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["changed",{"_index":116,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["changes",{"_index":422,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["changesub",{"_index":299,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["child",{"_index":530,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["chrome10",{"_index":735,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["chrome26",{"_index":742,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"classes/OrValidator.html":{}}}],["cleanall",{"_index":582,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["clear",{"_index":697,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["click",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["click(event",{"_index":599,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":779,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":780,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":781,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["code",{"_index":218,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["color",{"_index":537,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["colors",{"_index":560,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["column",{"_index":508,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["commonmodule",{"_index":788,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":88,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["completed",{"_index":91,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completeupload",{"_index":247,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["component",{"_index":261,"title":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":572,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["components",{"_index":411,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["components/ngx",{"_index":797,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["components/ngxfileuploaditem.html",{"_index":845,"title":{},"body":{"classes/UploadControl.html":{}}}],["connection",{"_index":838,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["constructor(file",{"_index":377,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["constructor(fileupload",{"_index":833,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":77,"title":{},"body":{"classes/FileUpload.html":{}}}],["constructor(httpclient",{"_index":587,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["constructor(validators",{"_index":348,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contain",{"_index":240,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["content",{"_index":536,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["context",{"_index":290,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["context.ctrl",{"_index":831,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":273,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["control.ts",{"_index":829,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["control.ts:19",{"_index":834,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:34",{"_index":836,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:42",{"_index":841,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:50",{"_index":843,"title":{},"body":{"classes/UploadControl.html":{}}}],["cool",{"_index":819,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["coverage",{"_index":898,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":83,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["createfieldinputfield",{"_index":684,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["creates",{"_index":376,"title":{},"body":{"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["createupload(file",{"_index":657,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["createuploadbody",{"_index":186,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["ctrl",{"_index":258,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["current",{"_index":87,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":531,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["custom",{"_index":443,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["d2d2d2",{"_index":516,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["dark",{"_index":540,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["dashed",{"_index":543,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["data",{"_index":136,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["declarations",{"_index":775,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":437,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{}}}],["defaultuploaditem",{"_index":702,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":319,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":145,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["delay",{"_index":470,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["delete",{"_index":246,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["dependencies",{"_index":774,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":65,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["destroyed",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["diffrent",{"_index":236,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["direction",{"_index":507,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["directive",{"_index":570,"title":{"directives/NgxFileUploadDirective.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":574,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["directives/ngx",{"_index":798,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["directives/ngxfileuploaddirective.html#add",{"_index":481,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["directly",{"_index":298,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["disable",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["disabled",{"_index":564,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["display",{"_index":287,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["document.createelement(\"input",{"_index":686,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["documentation",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":413,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["dont",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["download",{"_index":103,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["downloads",{"_index":610,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drag",{"_index":579,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drag/drop",{"_index":498,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["dragevent",{"_index":604,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dragover",{"_index":586,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dragover(event",{"_index":603,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drop",{"_index":580,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drop(event",{"_index":607,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dummy",{"_index":678,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dynamic",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":692,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["e4e4e4",{"_index":717,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["edit",{"_index":719,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":723,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["element",{"_index":569,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["ellipsis",{"_index":749,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["emit",{"_index":289,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["emits",{"_index":146,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["enabled",{"_index":144,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["endpoint",{"_index":593,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ensure",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["enum",{"_index":367,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":938,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":95,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["error.value",{"_index":714,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["errors",{"_index":107,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["even",{"_index":813,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["event",{"_index":164,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["event.loaded",{"_index":212,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event.preventdefault",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["event.tostate",{"_index":488,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["event.type",{"_index":196,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["eventemitter",{"_index":266,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["events",{"_index":185,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["example",{"_index":423,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["expect",{"_index":810,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["export",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exportas",{"_index":617,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["exports",{"_index":778,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":730,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["fadeinout",{"_index":473,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["failed",{"_index":837,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":234,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["false",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["fdfdfd",{"_index":724,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["ff16",{"_index":741,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["ff3.6",{"_index":731,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["field",{"_index":440,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["filemodel",{"_index":661,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filename",{"_index":383,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["files",{"_index":446,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["files.map((file",{"_index":651,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileselect",{"_index":623,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filesize",{"_index":380,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["filetype",{"_index":386,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["fileuplad",{"_index":799,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileuplad.ts",{"_index":578,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"coverage.html":{}}}],["fileuplad.ts:105",{"_index":609,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:115",{"_index":612,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:128",{"_index":605,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:137",{"_index":608,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:151",{"_index":600,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:31",{"_index":597,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:41",{"_index":592,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:48",{"_index":594,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:55",{"_index":591,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:58",{"_index":596,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:73",{"_index":590,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:98",{"_index":615,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileupload",{"_index":62,"title":{"classes/FileUpload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload'},{'name",{"_index":573,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["fileupload(this.httpclient",{"_index":663,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileupload.component",{"_index":800,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload.component.html",{"_index":427,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.scss",{"_index":426,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts",{"_index":415,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"coverage.html":{}}}],["fileupload.component.ts:107",{"_index":452,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:113",{"_index":454,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:55",{"_index":442,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:62",{"_index":445,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:69",{"_index":448,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:75",{"_index":439,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:81",{"_index":450,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:86",{"_index":464,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:91",{"_index":462,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:99",{"_index":456,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload/components/ngx",{"_index":256,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["fileupload/directives/ngx",{"_index":577,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"coverage.html":{}}}],["fileupload/model/upload.ts",{"_index":362,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/model/upload.ts:104",{"_index":871,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:111",{"_index":869,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:118",{"_index":875,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:125",{"_index":873,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:129",{"_index":879,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:133",{"_index":877,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:137",{"_index":881,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:146",{"_index":855,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:33",{"_index":365,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/model/upload.ts:50",{"_index":854,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:62",{"_index":857,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:69",{"_index":859,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:76",{"_index":861,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:83",{"_index":863,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:90",{"_index":867,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:97",{"_index":865,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/ngx",{"_index":785,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/pipes/to",{"_index":807,"title":{},"body":{"pipes/ToArrayPipe.html":{},"coverage.html":{}}}],["fileupload/services/file",{"_index":63,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload/services/upload",{"_index":828,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/validation/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/validation/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/validation/grouped.validator.ts",{"_index":347,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/validation/grouped.validator.ts:13",{"_index":354,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/validation/grouped.validator.ts:18",{"_index":351,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/validation/grouped.validator.ts:25",{"_index":352,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/validation/grouped.validator.ts:32",{"_index":353,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/validation/grouped.validator.ts:5",{"_index":349,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/validation/or.validator.ts",{"_index":805,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/validation/or.validator.ts:6",{"_index":806,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/validation/validation.builder.ts",{"_index":884,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/validation/validation.builder.ts:12",{"_index":888,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/validation/validation.builder.ts:8",{"_index":886,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/validation/validation.ts",{"_index":895,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/validation/validation.ts:1",{"_index":896,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/validation/validation.ts:8",{"_index":897,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileuploaditemcontext",{"_index":254,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["fill",{"_index":672,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filter",{"_index":126,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["find",{"_index":441,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["finished",{"_index":460,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["first",{"_index":562,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["flag",{"_index":463,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["flex",{"_index":506,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["font",{"_index":500,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["footer",{"_index":553,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["form",{"_index":135,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata",{"_index":137,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata.append(label",{"_index":190,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["formdataname",{"_index":434,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["function",{"_index":359,"title":{},"body":{"classes/GroupedValidator.html":{},"miscellaneous/typealiases.html":{}}}],["get($colors",{"_index":539,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["get($map",{"_index":559,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["getchange",{"_index":112,"title":{},"body":{"classes/FileUpload.html":{}}}],["getfile",{"_index":856,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":860,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":858,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":862,"title":{},"body":{"classes/UploadModel.html":{}}}],["getprogress",{"_index":880,"title":{},"body":{"classes/UploadModel.html":{}}}],["getresponse",{"_index":864,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["getstate",{"_index":868,"title":{},"body":{"classes/UploadModel.html":{}}}],["getuploaded",{"_index":872,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":876,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":839,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":721,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["gradient(to",{"_index":738,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["gradient(top",{"_index":729,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["green",{"_index":769,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":522,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["handle",{"_index":193,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["handled",{"_index":224,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleerror(response",{"_index":243,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleevent(event",{"_index":853,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":650,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["handlehttpevent(event",{"_index":194,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleprogress(event",{"_index":209,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleresponse(res",{"_index":219,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlesent",{"_index":206,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleuploadchange",{"_index":430,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["handleuploadchange(upload",{"_index":451,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["happen",{"_index":849,"title":{},"body":{"classes/UploadControl.html":{}}}],["haserror",{"_index":70,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["haserrors",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":745,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["height",{"_index":549,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["here",{"_index":225,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["hidden",{"_index":520,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["host",{"_index":505,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener",{"_index":268,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":639,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["hostlistener(\"drop",{"_index":641,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["hostlisteners",{"_index":585,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["html",{"_index":568,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["htmlinputelement",{"_index":624,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["http",{"_index":85,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["httpclient",{"_index":78,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["httpclientmodule",{"_index":790,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":121,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpevent",{"_index":117,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype",{"_index":118,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.response",{"_index":203,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.sent",{"_index":198,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.uploadprogress",{"_index":201,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpprogressevent",{"_index":119,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpresponse",{"_index":120,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["https://colorzilla.com/gradient",{"_index":722,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["icon",{"_index":541,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["icons",{"_index":499,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["idatanode",{"_index":361,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["identifier",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":495,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ie10",{"_index":740,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["implements",{"_index":284,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":803,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":363,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":326,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["inheritdoc",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["inner",{"_index":761,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["input",{"_index":263,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["input(\"ngxfileupload",{"_index":619,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["input[type=\"file",{"_index":694,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["inputfield",{"_index":685,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["inputs",{"_index":433,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["instance",{"_index":233,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["instanceof",{"_index":244,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["interface",{"_index":131,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":255,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":369,"title":{},"body":{"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["iscancelable",{"_index":171,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["isinvalid",{"_index":71,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["item",{"_index":278,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["item.component",{"_index":471,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"modules/NgxFileUploadModule.html":{}}}],["item.component.html",{"_index":280,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["item.component.scss",{"_index":282,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts",{"_index":257,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:113",{"_index":706,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:26",{"_index":708,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:32",{"_index":704,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:37",{"_index":707,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:55",{"_index":703,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:68",{"_index":705,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:80",{"_index":701,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["items",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["itemstotal",{"_index":482,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["itemtemplate",{"_index":435,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["itemtpl",{"_index":288,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["justify",{"_index":535,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["keep",{"_index":812,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["key",{"_index":364,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["label",{"_index":188,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["last",{"_index":529,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["left",{"_index":758,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["legend",{"_index":567,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["lib/.../upload.ts",{"_index":939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["light",{"_index":561,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(#2e2e2e",{"_index":565,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(#3e3e3e",{"_index":566,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(map",{"_index":544,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["line",{"_index":548,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["linear",{"_index":728,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["list",{"_index":461,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["listen",{"_index":654,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["listener",{"_index":601,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["literal",{"_index":882,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["manager",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["mandatory",{"_index":447,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["map",{"_index":538,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["margin",{"_index":527,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["matching",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(progress",{"_index":400,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["maybe",{"_index":816,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["message",{"_index":227,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["messages",{"_index":231,"title":{},"body":{"classes/FileUpload.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadOptions.html":{}}}],["metadata",{"_index":425,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":385,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["miscellaneous",{"_index":937,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":403,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["model/upload",{"_index":130,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["module",{"_index":771,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":773,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["move",{"_index":402,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["moz",{"_index":727,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["much",{"_index":296,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["multiple",{"_index":688,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"pipes/ToArrayPipe.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["need",{"_index":458,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["new",{"_index":149,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":163,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["ngmathpipesmodule",{"_index":794,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngmodule",{"_index":787,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngoninit",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngx",{"_index":277,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngxfileupload",{"_index":575,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngxfileuploadcomponent",{"_index":410,"title":{"components/NgxFileUploadComponent.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaddirective",{"_index":417,"title":{"directives/NgxFileUploadDirective.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaddirective]{@link",{"_index":480,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ngxfileuploaditem",{"_index":444,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["ngxfileuploaditem]{@link",{"_index":478,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["ngxfileuploaditemcomponent",{"_index":283,"title":{"components/NgxFileUploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":479,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ngxfileuploadmodule",{"_index":772,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["ngxfileuploadref",{"_index":618,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["none",{"_index":690,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["notification",{"_index":251,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notified",{"_index":602,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["notify",{"_index":115,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notifyobservers",{"_index":252,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["nowrap",{"_index":748,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":371,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":143,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["object.assign(validationresult",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":114,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observe",{"_index":184,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observers",{"_index":151,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["of(upload).pipe(delay(1000",{"_index":494,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["old",{"_index":725,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["onanimationdone",{"_index":431,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["onanimationdone($event",{"_index":453,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["once",{"_index":611,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onclick(event",{"_index":645,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ondestroy",{"_index":269,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["one",{"_index":814,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["onfiledragover(event",{"_index":640,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onfiledrop(event",{"_index":642,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onfileselect(event",{"_index":695,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["oninit",{"_index":262,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["onitemclick(event",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["onuploadsadd",{"_index":432,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["onuploadsadd(uploads",{"_index":455,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["opacity",{"_index":475,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["opera12",{"_index":743,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":80,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["or(...validators",{"_index":893,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":887,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":890,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":804,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":894,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":698,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["out",{"_index":784,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":764,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["output",{"_index":267,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["outputs",{"_index":584,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["over",{"_index":606,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["overflow",{"_index":509,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["overview",{"_index":940,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":921,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":524,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["pass",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["passed",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["passes",{"_index":850,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":501,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["permalink",{"_index":718,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["pipe",{"_index":344,"title":{"pipes/ToArrayPipe.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{},"coverage.html":{},"index.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":668,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["pipe({name",{"_index":826,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["pipes",{"_index":796,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"pipes/ToArrayPipe.html":{},"dependencies.html":{}}}],["pipes/to",{"_index":801,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["pipetransform",{"_index":825,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["plain",{"_index":449,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["pointer",{"_index":532,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["position",{"_index":753,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["post",{"_index":140,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["pre",{"_index":671,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["prevalidateupload(upload",{"_index":674,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["private",{"_index":148,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["progress",{"_index":208,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":751,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["progressevent",{"_index":232,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["progressevent.message",{"_index":815,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providers",{"_index":777,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["queue",{"_index":621,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["queued",{"_index":109,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["quickly",{"_index":420,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["radius",{"_index":551,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["range",{"_index":216,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["raw",{"_index":379,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":681,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["red",{"_index":768,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["register",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["relative",{"_index":754,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["remote",{"_index":830,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["removed",{"_index":492,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["removeupload(upload",{"_index":493,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["render",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["rendered",{"_index":286,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["renderer",{"_index":588,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["renderer2",{"_index":589,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["reportprogress",{"_index":183,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["repository",{"_index":656,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["represents",{"_index":66,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["request",{"_index":111,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["res.body",{"_index":221,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.ok",{"_index":220,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status(400).send(what",{"_index":237,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status(401).('not",{"_index":817,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["reset",{"_index":105,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{},"index.html":{}}}],["responds",{"_index":213,"title":{},"body":{"classes/FileUpload.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadOptions.html":{}}}],["response",{"_index":96,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":388,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["response.error",{"_index":239,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response.message",{"_index":235,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["restart",{"_index":102,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["retry",{"_index":72,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["retry(event",{"_index":835,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["reverse",{"_index":512,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["right",{"_index":765,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["row",{"_index":511,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["running",{"_index":229,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["rxjs",{"_index":124,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":127,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["safari7",{"_index":744,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["sanitize",{"_index":226,"title":{},"body":{"classes/FileUpload.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadOptions.html":{}}}],["save",{"_index":292,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["search",{"_index":613,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["sec",{"_index":490,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["security",{"_index":680,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["see",{"_index":242,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["select",{"_index":679,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["selected",{"_index":647,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["selector",{"_index":276,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["send",{"_index":138,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["sends",{"_index":93,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["server",{"_index":92,"title":{},"body":{"classes/FileUpload.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadOptions.html":{}}}],["service",{"_index":84,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["services/file",{"_index":271,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["services/upload",{"_index":272,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["set",{"_index":99,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["setresponse(response",{"_index":866,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":300,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["setstate(state",{"_index":870,"title":{},"body":{"classes/UploadModel.html":{}}}],["settemplate(tpl",{"_index":710,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["setup",{"_index":418,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["setupload(fileupload",{"_index":709,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":874,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":878,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":720,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["show",{"_index":811,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["showlist",{"_index":428,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["shrink",{"_index":521,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["simple",{"_index":809,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["simply",{"_index":421,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["single",{"_index":67,"title":{},"body":{"classes/FileUpload.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["size",{"_index":372,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["sizing",{"_index":518,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["solid",{"_index":515,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["something",{"_index":152,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["sort",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":747,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["start",{"_index":73,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":840,"title":{},"body":{"classes/UploadControl.html":{}}}],["started",{"_index":205,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["state",{"_index":106,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["state(\"void",{"_index":474,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["state(state",{"_index":390,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["statements",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["status",{"_index":217,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stop",{"_index":832,"title":{},"body":{"classes/UploadControl.html":{}}}],["stop(event",{"_index":842,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopped",{"_index":147,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stream",{"_index":150,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["streams",{"_index":245,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["string",{"_index":134,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["style",{"_index":466,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["styles",{"_index":412,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["styleurls",{"_index":281,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["sub",{"_index":294,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["sub.unsubscribe",{"_index":670,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["subject",{"_index":89,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["subscribe",{"_index":162,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["subscribtions",{"_index":620,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["subscription",{"_index":274,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["success",{"_index":169,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":943,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":944,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":195,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["t",{"_index":823,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["table",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":125,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["takeuntil(this.cancel",{"_index":160,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["template",{"_index":285,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["template(tpl",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["templateref",{"_index":265,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["templateurl",{"_index":279,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["text",{"_index":550,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["things",{"_index":820,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["think",{"_index":295,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.add",{"_index":625,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.add.emit(uploads",{"_index":653,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.cancel",{"_index":250,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.complete",{"_index":249,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.next(true",{"_index":174,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.changed.emit(upload",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.changesub",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.changesub.unsubscribe",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.completeupload",{"_index":175,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.context",{"_index":304,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.context.data",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.createfieldinputfield",{"_index":627,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.createupload(file",{"_index":652,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.createuploadbody",{"_index":181,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.destroyed$.complete",{"_index":630,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.destroyed$.next(true",{"_index":628,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.execvalidator(validator",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":384,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.file.size",{"_index":382,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.file.type",{"_index":387,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.filename",{"_index":405,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.fileselect",{"_index":626,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.click",{"_index":646,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.files",{"_index":700,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.value",{"_index":699,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.filesize",{"_index":399,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.fileupload",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":852,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.change",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.fileupload.retry",{"_index":847,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":848,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.formdataname",{"_index":660,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.handleerror(error",{"_index":166,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleevent(event",{"_index":846,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":644,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.handlehttpevent(event",{"_index":165,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleprogress(event",{"_index":202,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleresponse(event",{"_index":204,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlesent",{"_index":199,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.http.post(this.options.url",{"_index":182,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.itemstotal",{"_index":487,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.itemtpl",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.notifyobservers",{"_index":173,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.onfileselect(e",{"_index":693,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.options",{"_index":155,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.enabled",{"_index":187,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.name",{"_index":189,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.prevalidateupload(filemodel",{"_index":665,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.progress",{"_index":406,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.removeupload(fileupload",{"_index":486,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.renderer.listen(inputfield",{"_index":691,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":687,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":689,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.response",{"_index":407,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.showlist",{"_index":484,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.start",{"_index":170,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.state",{"_index":408,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.upload",{"_index":153,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.asobservable",{"_index":176,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.complete",{"_index":248,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.next(this.upload",{"_index":253,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.file",{"_index":191,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.filename",{"_index":192,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.response",{"_index":168,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.state",{"_index":157,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.uploaded",{"_index":211,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploaded",{"_index":397,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.uploadedsize",{"_index":393,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.uploadedstate",{"_index":391,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.uploadfile",{"_index":378,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.uploadfile().pipe",{"_index":159,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploadresponse",{"_index":389,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.uploads",{"_index":629,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.foreach((upload",{"_index":631,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.indexof(upload",{"_index":496,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.length",{"_index":633,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.push(...uploads",{"_index":483,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.push(upload",{"_index":666,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.splice(idx",{"_index":497,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.splice(this.uploads.indexof(upload",{"_index":669,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads[i",{"_index":635,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads[i].cancel",{"_index":634,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploadvalidationerrors",{"_index":396,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.url",{"_index":658,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.useformdata",{"_index":659,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validationerrors",{"_index":409,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["this.validator",{"_index":664,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validator(upload.file",{"_index":676,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validator.validate(upload.file",{"_index":675,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validators",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":357,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":139,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["throw",{"_index":223,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["timer",{"_index":844,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":851,"title":{},"body":{"classes/UploadControl.html":{}}}],["toarray",{"_index":821,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["toarraypipe",{"_index":782,"title":{"pipes/ToArrayPipe.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"pipes/ToArrayPipe.html":{},"coverage.html":{},"index.html":{}}}],["todo",{"_index":401,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["tojson",{"_index":404,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["tpl",{"_index":323,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["transform",{"_index":759,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{}}}],["transform(value",{"_index":822,"title":{},"body":{"pipes/ToArrayPipe.html":{}}}],["transition",{"_index":468,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["transition(\"void",{"_index":476,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["translatex",{"_index":760,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["tree",{"_index":414,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["trigger",{"_index":465,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["true",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["tslib",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["type=\"file",{"_index":649,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["typealiases",{"_index":946,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ul",{"_index":770,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["unsubscribe",{"_index":297,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"classes/OrValidator.html":{}}}],["uplaod",{"_index":655,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload",{"_index":68,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"pipes/ToArrayPipe.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["upload(fileupload",{"_index":302,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["upload.cancel",{"_index":638,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.change",{"_index":667,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.haserror",{"_index":637,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.isinvalid",{"_index":636,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.module.ts",{"_index":786,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":711,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["upload.response.body.message",{"_index":715,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["upload.size",{"_index":712,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["upload.start",{"_index":632,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.state",{"_index":485,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["upload.tojson",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["upload.ts",{"_index":64,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["upload.ts:115",{"_index":113,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:123",{"_index":90,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:130",{"_index":98,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:52",{"_index":82,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:70",{"_index":108,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:88",{"_index":101,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:99",{"_index":86,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.validationerrors",{"_index":677,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["uploadall",{"_index":583,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["uploadbody",{"_index":180,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadcontrol",{"_index":259,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":305,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["uploaddata",{"_index":260,"title":{"interfaces/UploadData.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddata.name",{"_index":424,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["uploaded",{"_index":368,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploaded(bytes",{"_index":392,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["uploadedsize",{"_index":373,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["uploadedstate",{"_index":374,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["uploadfile",{"_index":179,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["uploadmodel",{"_index":79,"title":{"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":662,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["uploadoptions",{"_index":81,"title":{"interfaces/UploadOptions.html":{}},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadresponse",{"_index":129,"title":{"interfaces/UploadResponse.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":429,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["uploadstate",{"_index":128,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":161,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.error",{"_index":167,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.invalid",{"_index":177,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.progress",{"_index":210,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.queued",{"_index":158,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["uploadstate.start",{"_index":207,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.uploaded",{"_index":172,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["uploadvalidation",{"_index":370,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":375,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["url",{"_index":132,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["use",{"_index":595,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["used",{"_index":133,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["useformdata",{"_index":436,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["valid",{"_index":156,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validated",{"_index":100,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"pipes/ToArrayPipe.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["validation/validation",{"_index":366,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":883,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":395,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":360,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(file",{"_index":358,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":438,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"pipes/ToArrayPipe.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":571,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["very",{"_index":419,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"pipes/ToArrayPipe.html":{}}}],["via",{"_index":648,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["view",{"_index":275,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["viewchild",{"_index":264,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}}}],["w3c",{"_index":739,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["wait",{"_index":489,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["want",{"_index":238,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["webdriver",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":733,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["white",{"_index":746,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["width",{"_index":546,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["window",{"_index":622,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["within",{"_index":214,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["without",{"_index":683,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["wrapped",{"_index":142,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["wrapper",{"_index":416,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["x",{"_index":519,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["yes",{"_index":350,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":756,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["zone.js",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":783,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"./validation\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUpload.html":{"url":"classes/FileUpload.html","title":"class - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/services/file-upload.ts:52\n                            \n                        \n\n                \n                    \n                            create FileUpload service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:99\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:123\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:130\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:88\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:70\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/services/file-upload.ts:115\n                                \n                            \n                    \n                        \n                                returns observable which notify if file upload state\nhas been changed\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadModel, UploadState, UploadResponse} from \"../model/upload\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors: response.error instanceof ProgressEvent ? response.message : response.error\n        };\n        this.upload.state = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, EventEmitter, Output, HostListener, OnDestroy } from \"@angular/core\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { UploadControl } from \"../services/upload-control\";\nimport { UploadModel, UploadData } from \"../model/upload\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"ngx-fileupload-item.component.html\",\n    styleUrls: [\"./ngx-fileupload-item.component.scss\"],\n})\nexport class NgxFileUploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * emit event if upload state has been changed\n     */\n    @Output()\n    public changed: EventEmitter = new EventEmitter();\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n                    this.changed.emit(upload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/validation/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/validation/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"./validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/model/upload.ts:33\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ValidationErrors } from \"../validation/validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxFileUploadComponent.html":{"url":"components/NgxFileUploadComponent.html","title":"component - NgxFileUploadComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxFileUploadComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/components/ngx-fileupload.component.ts\n\n\n    \n        Description\n    \n    \n        NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\nto setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\nor NgxFileUploadComponent. This component simply handle all events / changes from upload.\n\n    \n\n\n\n    \n        Example\n    \n    \n                \n                    \n\n                \n                \n                    \n\n{{uploadData.name}}\n\n\n\n                \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./ngx-fileupload.component.scss\n            \n\n\n\n            \n                templateUrl\n                ngx-fileupload.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showList\n                            \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleUploadChange\n                            \n                            \n                                    Public\n                                onAnimationDone\n                            \n                            \n                                    Public\n                                onUploadsAdd\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:75\n                            \n                        \n                \n                    \n                        set field name for FormData Object where to find the file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :         TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:55\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:62\n                            \n                        \n                \n                    \n                        input which url should be used to upload files,\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:69\n                            \n                        \n                \n                    \n                        by default files will send through FormData Object, if set to false file will send plain into\npost body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:81\n                            \n                        \n                \n                    \n                        set validator\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            handleUploadChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUploadChange(upload: UploadModel, fileUpload: FileUpload)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:107\n                \n            \n\n\n            \n                \n                    if state is canceled or uploaded remove it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileUpload\n                                    \n                                                FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onAnimationDone\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onAnimationDone($event)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadsAdd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadsAdd(uploads: FileUpload[])\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:99\n                \n            \n\n\n            \n                \n                    new uploads has been added we need to care about this to remove\nfinished uploads from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploads\n                                    \n                                                FileUpload[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:91\n                            \n                        \n\n                \n                    \n                        flag list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUpload[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:86\n                            \n                        \n\n                \n                    \n                        all uploads which has been added in NgxFileUploadDirective\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, TemplateRef, Input } from \"@angular/core\";\nimport { trigger, state, style, animate, transition } from \"@angular/animations\";\nimport { delay } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { UploadModel, UploadState } from \"../model/upload\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { FileUploadItemContext } from \"./ngx-fileupload-item.component\";\nimport { Validator, ValidationFn } from \"../validation/validation\";\n\n/**\n * NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\n * to setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\n * or NgxFileUploadComponent. This component simply handle all events / changes from upload.\n *\n * @example\n * \n * \n *\n *\n * @example\n * \n * \n *    {{uploadData.name}}\n * \n *\n * \n *\n *\n * @example\n * \n * \n */\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./ngx-fileupload.component.scss\"],\n    templateUrl: \"ngx-fileupload.component.html\",\n    animations: [\n        trigger(\n            \"fadeInOut\",\n            [\n                state(\"void\", style({\n                    opacity: 0\n                })),\n                transition(\"void  *\", animate(250)),\n            ]\n        ),\n    ],\n})\nexport class NgxFileUploadComponent {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    /**\n     * input which url should be used to upload files,\n     * this field is mandatory\n     */\n    @Input()\n    public url: string;\n\n    /**\n     * by default files will send through FormData Object, if set to false file will send plain into\n     * post body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * set field name for FormData Object where to find the file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * set validator\n     */\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * all uploads which has been added in [NgxFileUploadDirective]{@link ../directives/NgxFileUploadDirective.html#add}\n     */\n    public uploads: FileUpload[] = [];\n\n    /**\n     * flag list\n     */\n    public showList = false;\n\n    private itemsTotal = 0;\n\n    /**\n     * new uploads has been added we need to care about this to remove\n     * finished uploads from list\n     */\n    public onUploadsAdd(uploads: FileUpload[]) {\n        this.uploads.push(...uploads);\n        this.showList = true;\n    }\n\n    /**\n     * if state is canceled or uploaded remove it\n     */\n    public handleUploadChange(upload: UploadModel, fileUpload: FileUpload) {\n        if (upload.state === UploadState.CANCELED || upload.state === UploadState.UPLOADED) {\n            this.removeUpload(fileUpload);\n        }\n    }\n\n    public onAnimationDone($event) {\n        this.itemsTotal += $event.toState === \"void\" ? 1 : -1;\n        if (this.itemsTotal === 0) {\n            this.showList = false;\n        }\n    }\n\n    /**\n     * remove upload from list but wait for 1 sec before it will be removed\n     */\n    private removeUpload(upload: FileUpload) {\n        of(upload).pipe(delay(1000))\n            .subscribe({\n                next: () => {\n                    const idx = this.uploads.indexOf(upload);\n                    this.uploads.splice(idx, 1);\n                }\n            });\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n    \n\n\n    Cancel\n    Clean Up\n    Upload\n\n\n    \n\n    \n                \n                    ./ngx-fileupload.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../assets/fonts' !default;\n\n@import '../assets//scss/variables';\n@import '../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    Drag/Drop files here or click                                Cancel    Clean Up    Upload'\n    var COMPONENTS = [{'name': 'NgxFileUploadComponent', 'selector': 'ngx-fileupload'},{'name': 'NgxFileUploadItemComponent', 'selector': 'ngx-fileupload-item'}];\n    var DIRECTIVES = [{'name': 'NgxFileUploadDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxFileUploadComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFileUploadDirective.html":{"url":"directives/NgxFileUploadDirective.html","title":"directive - NgxFileUploadDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  NgxFileUploadDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/directives/ngx-fileuplad.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancelAll\n                            \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:73\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:55\n                            \n                        \n                \n                    \n                        form data field name with which form data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:41\n                            \n                        \n                \n                    \n                        url which should be used as endpoint for the file upload\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:48\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:58\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:31\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:151\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:128\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:137\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancelAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:105\n                \n            \n\n\n            \n                \n                    cancel all downloads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:115\n                \n            \n\n\n            \n                \n                    search for broken uploads (error / invalid) and cancel\nthem\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:98\n                \n            \n\n\n            \n                \n                    begin all uploads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { UploadModel, UploadState } from \"../model/upload\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { Validator, ValidationFn } from \"../validation/validation\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\",\n  exportAs: \"ngxFileUploadRef\"\n})\nexport class NgxFileUploadDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    /**\n     * url which should be used as endpoint for the file upload\n     * this field is mandatory\n     *\n     * @example\n     * \n     */\n    @Input(\"ngxFileUpload\")\n    public url: string;\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * upload file queue\n     */\n    private uploads: FileUpload[] = [];\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private httpClient: HttpClient,\n        private renderer: Renderer2,\n    ) {\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.uploads = [];\n        this.destroyed$.complete();\n    }\n\n    /**\n     * begin all uploads at once\n     */\n    public uploadAll() {\n        this.uploads.forEach((upload: FileUpload) => upload.start());\n    }\n\n    /**\n     * cancel all downloads at once\n     */\n    public cancelAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            this.uploads[i].cancel();\n        }\n    }\n\n    /**\n     * search for broken uploads (error / invalid) and cancel\n     * them\n     */\n    public cleanAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            const upload = this.uploads[i];\n            if (upload.isInvalid() || upload.hasError()) {\n                upload.cancel();\n            }\n        }\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(event.dataTransfer.files);\n        this.handleFileSelect(files);\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.uploads.length) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        const uploads = files.map((file) => this.createUpload(file));\n        this.add.emit(uploads);\n    }\n\n    /**\n     * create upload from file, listen to complete\n     * to remove upload from uploads list\n     *\n     * remove uplaod from uploads repository if upload completed\n     * or canceled\n     */\n    private createUpload(file: File): FileUpload {\n        const uploadOptions = {\n            url: this.url,\n            formData: {\n                enabled: this.useFormData,\n                name   : this.formDataName\n            }\n        };\n\n        const fileModel = new UploadModel(file);\n        const upload    = new FileUpload(this.httpClient, fileModel, uploadOptions);\n\n        if (this.validator) {\n            this.preValidateUpload(fileModel);\n        }\n\n        this.uploads.push(upload);\n\n        const sub = upload.change\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe({\n                complete: () => {\n                    this.uploads.splice(this.uploads.indexOf(upload), 1);\n                    sub.unsubscribe();\n                }\n            });\n\n        return upload;\n    }\n\n    /**\n     * pre validate upload, if validation result is invalid\n     * fill could not uploaded anymore\n     */\n    private preValidateUpload(upload: UploadModel) {\n        const result = \"validate\" in this.validator ? this.validator.validate(upload.file) : this.validator(upload.file);\n        if (result !== null) {\n            upload.state = UploadState.INVALID;\n        }\n        upload.validationErrors = result;\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxFileUploadItemComponent.html":{"url":"components/NgxFileUploadItemComponent.html","title":"component - NgxFileUploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxFileUploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./ngx-fileupload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                ngx-fileupload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changed\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:80\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:55\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:32\n                            \n                        \n                \n                    \n                        emit event if upload state has been changed\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:68\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:113\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:37\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:26\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:55\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:80\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, EventEmitter, Output, HostListener, OnDestroy } from \"@angular/core\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { UploadControl } from \"../services/upload-control\";\nimport { UploadModel, UploadData } from \"../model/upload\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"ngx-fileupload-item.component.html\",\n    styleUrls: [\"./ngx-fileupload-item.component.scss\"],\n})\nexport class NgxFileUploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * emit event if upload state has been changed\n     */\n    @Output()\n    public changed: EventEmitter = new EventEmitter();\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => {\n                    this.context.data = upload.toJson();\n                    this.changed.emit(upload);\n                }\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{upload.name}}\n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | bytes : 2}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n            \n                \n                    {{error}}\n                \n            \n\n            \n                \n                    {{upload.response.body.message}}\n                \n                \n                    {{upload.name}} uploaded\n                \n            \n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./ngx-fileupload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../assets/fonts' !default;\n\n@import '../assets//scss/variables';\n@import '../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: .75rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n        }\n    }\n\n    .upload-item--actions {\n\n        padding: .25rem;\n        display: flex;\n\n        button {\n            padding: 0;\n            background: lighten(map-get($colors, 'dark'), 25%);\n            color: map-get($colors, 'white');\n            border-radius: 50%;\n            border: 0;\n            height: 1rem; \n            width: 1rem; \n            cursor: pointer;\n            font-size: .75rem;\n            outline: none;\n\n            margin-right: .25rem;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                background: lighten(map-get($colors, 'dark'), 50%);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{upload.name}}                                                                                                                        {{upload.size | bytes : 2}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                                        {{error}}                                                                            {{upload.response.body.message}}                                                    {{upload.name}} uploaded                                        '\n    var COMPONENTS = [{'name': 'NgxFileUploadComponent', 'selector': 'ngx-fileupload'},{'name': 'NgxFileUploadItemComponent', 'selector': 'ngx-fileupload-item'}];\n    var DIRECTIVES = [{'name': 'NgxFileUploadDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxFileUploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nNgxFileUploadComponent\n\nNgxFileUploadComponent\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nNgxFileUploadComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadDirective\n\nNgxFileUploadDirective\n\nNgxFileUploadModule -->\n\nNgxFileUploadDirective->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadItemComponent\n\nNgxFileUploadItemComponent\n\nNgxFileUploadModule -->\n\nNgxFileUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nToArrayPipe\n\nToArrayPipe\n\nNgxFileUploadModule -->\n\nToArrayPipe->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadComponent \n\nNgxFileUploadComponent \n\nNgxFileUploadComponent  -->\n\nNgxFileUploadModule->NgxFileUploadComponent \n\n\n\n\n\nNgxFileUploadDirective \n\nNgxFileUploadDirective \n\nNgxFileUploadDirective  -->\n\nNgxFileUploadModule->NgxFileUploadDirective \n\n\n\n\n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent  -->\n\nNgxFileUploadModule->NgxFileUploadItemComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxFileUploadComponent\n                        \n                        \n                            NgxFileUploadDirective\n                        \n                        \n                            NgxFileUploadItemComponent\n                        \n                        \n                            ToArrayPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxFileUploadComponent\n                        \n                        \n                            NgxFileUploadDirective\n                        \n                        \n                            NgxFileUploadItemComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { NgMathPipesModule } from \"angular-pipes\";\n\nimport { NgxFileUploadItemComponent } from \"./components/ngx-fileupload-item.component\";\nimport { NgxFileUploadDirective } from \"./directives/ngx-fileuplad\";\nimport { NgxFileUploadComponent } from \"./components/ngx-fileupload.component\";\nimport { ToArrayPipe } from \"./pipes/to-array.pipe\";\n\n@NgModule({\n    declarations: [\n        NgxFileUploadDirective,\n        NgxFileUploadItemComponent,\n        NgxFileUploadComponent,\n        ToArrayPipe,\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        NgMathPipesModule\n    ],\n    exports: [\n        NgxFileUploadDirective,\n        NgxFileUploadItemComponent,\n        NgxFileUploadComponent\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"./validation\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ToArrayPipe.html":{"url":"pipes/ToArrayPipe.html","title":"pipe - ToArrayPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ToArrayPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/pipes/to-array.pipe.ts\n        \n\n            \n                Description\n            \n            \n                very simple to array pipe to sanitize upload\nerror messages to array. By default we expect a single string\nor an array of string to show upload errors to keep  this even\nwith validation errors. There could be multiple errors if we upload\na file and only one (server not responds ProgressEvent.message)\nor maybe res.status(401).('not authorized to do all the cool things').\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        toArray\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: T)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/pipes/to-array.pipe.ts:13\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n/**\n * very simple to array pipe to sanitize upload\n * error messages to array. By default we expect a single string\n * or an array of string to show upload errors to keep  this even\n * with validation errors. There could be multiple errors if we upload\n * a file and only one (server not responds ProgressEvent.message)\n * or maybe res.status(401).('not authorized to do all the cool things').\n */\n@Pipe({name: \"toArray\"})\nexport class ToArrayPipe implements PipeTransform {\n    transform(value: T): T[] | T {\n        if (Array.isArray(value)) {\n            return value;\n        }\n        return [value];\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/upload-control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: FileUpload)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/services/upload-control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        FileUpload\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:34\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:42\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:50\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileUpload } from \"./file-upload\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     *\n     */\n    public constructor(\n        private fileUpload: FileUpload\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidationErrors } from \"../validation/validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/model/upload.ts:50\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/model/upload.ts:146\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:62\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:69\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:76\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:83\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:97\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:90\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:111\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:104\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:125\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:118\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:133\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:129\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:137\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"../validation/validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadModel, UploadState, UploadResponse} from \"../model/upload\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors: response.error instanceof ProgressEvent ? response.message : response.error\n        };\n        this.upload.state = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidationErrors } from \"../validation/validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidationErrors } from \"../validation/validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"./validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/validation/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/validation/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/validation/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n            \n            component\n            NgxFileUploadItemComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload.component.ts\n            \n            component\n            NgxFileUploadComponent\n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/directives/ngx-fileuplad.ts\n            \n            directive\n            NgxFileUploadDirective\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            UploadData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/pipes/to-array.pipe.ts\n            \n            pipe\n            ToArrayPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/file-upload.ts\n            \n            class\n            FileUpload\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/file-upload.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/upload-control.ts\n            \n            class\n            UploadControl\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/validation/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.8\n        \n            @angular/common : 8.2.8\n        \n            @angular/compiler : 8.2.8\n        \n            @angular/core : 8.2.8\n        \n            @angular/forms : 8.2.8\n        \n            @angular/platform-browser : 8.2.8\n        \n            @angular/platform-browser-dynamic : 8.2.8\n        \n            @angular/router : 8.2.8\n        \n            angular-pipes : 9.1.0\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            webdriver-manager : ^12.1.7\n        \n            zone.js : 0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/model/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 QUEUED\n                            \n                        \n                        \n                            \n                                Value : queued\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : progress\n                            \n                        \n                        \n                            \n                                 UPLOADED\n                            \n                        \n                        \n                            \n                                Value : uploaded\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nNgxFileUploadComponent\n\nNgxFileUploadComponent\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nNgxFileUploadComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadDirective\n\nNgxFileUploadDirective\n\nNgxFileUploadModule -->\n\nNgxFileUploadDirective->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadItemComponent\n\nNgxFileUploadItemComponent\n\nNgxFileUploadModule -->\n\nNgxFileUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nToArrayPipe\n\nToArrayPipe\n\nNgxFileUploadModule -->\n\nToArrayPipe->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadComponent \n\nNgxFileUploadComponent \n\nNgxFileUploadComponent  -->\n\nNgxFileUploadModule->NgxFileUploadComponent \n\n\n\n\n\nNgxFileUploadDirective \n\nNgxFileUploadDirective \n\nNgxFileUploadDirective  -->\n\nNgxFileUploadModule->NgxFileUploadDirective \n\n\n\n\n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent  -->\n\nNgxFileUploadModule->NgxFileUploadItemComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/validation/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
