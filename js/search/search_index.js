var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AndValidator.html",[0,0.172,1,1.903]],["body/classes/AndValidator.html",[0,0.187,1,2.75,2,1.239,3,0.282,4,0.282,5,0.43,6,0.19,7,2.722,8,3.618,9,2.931,10,0.385,11,1.242,12,3.736,13,1.868,14,1.129,15,1.67,16,2.937,17,2.479,18,3.292,19,3.121,20,3.121,21,0.55,22,0.037,23,2.479,24,4.508,25,1.185,26,2.722,27,2.756,28,3.29,29,1.487,30,0.892,31,1.351,32,0.955,33,1.591,34,1.185,35,2.349,36,2.722,37,1.023,38,2.722,39,2.069,40,2.349,41,1.868,42,1.647,43,2.722,44,2.349,45,1.128,46,0.032,47,2.722,48,0.586,49,2.349,50,1.661,51,0.282,52,2.242,53,3.618,54,4.911,55,1.847,56,2.349,57,2.722,58,2.722,59,1.027,60,0.696,61,0.026,62,0.019]],["title/pipes/FileSizePipe.html",[63,1.527,64,1.698]],["body/pipes/FileSizePipe.html",[0,0.231,3,0.347,4,0.347,5,0.288,6,0.217,14,1.045,21,0.409,22,0.037,25,0.856,29,1.151,30,0.924,31,1.045,32,0.691,46,0.024,48,0.543,51,0.347,60,0.856,61,0.029,62,0.024,63,2.522,64,2.804,65,4.049,66,4.133,67,4.133,68,3.351,69,2.547,70,3.566,71,3.351,72,4.995,73,2.473,74,4.049,75,2.07,76,1.289,77,4.995,78,1.849,79,1.849,80,1.389,81,4.049,82,3.351,83,4.049,84,4.049,85,4.049,86,4.68,87,4.049,88,4.049,89,5.416,90,1.678,91,4.995,92,4.049,93,4.049,94,4.049]],["title/classes/FileUpload.html",[0,0.172,95,1.14]],["body/classes/FileUpload.html",[0,0.093,2,0.614,3,0.14,4,0.14,5,0.39,6,0.212,10,0.191,13,0.894,14,0.673,15,1.599,21,0.165,22,0.038,23,0.822,25,1.002,29,0.463,30,0.635,31,0.421,32,0.855,34,0.919,37,0.762,46,0.01,48,0.546,50,0.822,51,0.223,52,1.859,55,1.829,59,1.424,60,1.034,61,0.015,62,0.01,76,0.841,79,1.19,80,1.841,95,1.403,96,3.489,97,1.163,98,0.744,99,1.861,100,1.861,101,1.121,102,1.889,103,1.88,104,1.88,105,1.7,106,1.687,107,1.64,108,1.534,109,1.397,110,1.316,111,1.629,112,2.658,113,1.058,114,3.256,115,2.286,116,1.629,117,2.326,118,2.157,119,2.326,120,1.629,121,1.228,122,1.7,123,1.534,124,1.629,125,1.228,126,2.468,127,1.645,128,1.645,129,1.49,130,1.7,131,2.056,132,1.629,133,1.017,134,1.316,135,1.629,136,1.316,137,1.645,138,1.19,139,1.543,140,1.534,141,2.231,142,1.629,143,1.488,144,1.316,145,1.488,146,1.629,147,1.629,148,2.193,149,1.88,150,1.645,151,1.629,152,1.629,153,2.696,154,1.348,155,2.157,156,2.157,157,2.696,158,1.025,159,2.157,160,0.463,161,0.914,162,2.157,163,1.025,164,0.614,165,1.719,166,0.814,167,0.914,168,0.165,169,2.049,170,1.645,171,1.861,172,3.074,173,2.733,174,1.025,175,1.025,176,1.534,177,1.348,178,1.025,179,2.326,180,1.348,181,1.348,182,1.348,183,1.35,184,1.348,185,2.696,186,1.163,187,2.157,188,1.348,189,2.157,190,1.348,191,4.381,192,1.861,193,1.348,194,1.348,195,2.696,196,0.822,197,0.822,198,0.822,199,1.348,200,1.348,201,2.696,202,2.696,203,1.488,204,1.348,205,3.081,206,2.157,207,3.37,208,1.348,209,2.157,210,1.348,211,1.163,212,1.348,213,1.348,214,1.348,215,1.163,216,1.348,217,1.163,218,2.157,219,1.348,220,1.348,221,1.348,222,1.348,223,1.463,224,1.348,225,1.348,226,1.163,227,1.348,228,1.348,229,2.157,230,1.348,231,1.463,232,1.348,233,1.348,234,1.348,235,3.081,236,1.348,237,1.348,238,2.326,239,1.348,240,1.348,241,1.348,242,1.348,243,1.163,244,1.348,245,1.348,246,0.614,247,1.348,248,1.348,249,1.348,250,1.348,251,1.348,252,1.348,253,1.348,254,2.157,255,2.696,256,2.157,257,1.348,258,1.348,259,1.348,260,1.348,261,1.348,262,1.348,263,0.914,264,1.348,265,1.163,266,1.348,267,1.348,268,1.163,269,2.157,270,2.157,271,1.025,272,1.64,273,2.157,274,1.348,275,1.348,276,1.025,277,2.696,278,1.163,279,1.025,280,1.348,281,1.348,282,0.914,283,1.348,284,1.348,285,1.348,286,1.348,287,1.348,288,1.348,289,1.348,290,1.348,291,1.348,292,1.348]],["title/interfaces/FileUploadItemContext.html",[168,0.306,293,1.698]],["body/interfaces/FileUploadItemContext.html",[0,0.162,3,0.244,4,0.244,5,0.282,6,0.124,10,0.334,11,1.127,15,1.525,21,0.401,22,0.038,34,0.839,37,0.667,46,0.017,48,0.719,50,1.439,51,0.34,59,0.89,60,0.603,61,0.023,62,0.017,63,1.439,78,1.301,79,1.301,80,1.36,90,1.181,95,2.022,101,1.111,108,1.494,109,1.84,113,1.127,121,1.494,123,1.074,133,1.424,160,0.81,161,1.6,166,1.54,167,1.6,168,0.288,170,1.439,183,1.181,196,1.439,197,1.439,198,2.002,223,1.6,263,1.6,272,1.793,276,1.793,279,1.793,282,1.6,293,2.56,294,0.977,295,1.6,296,2.034,297,2.034,298,4.289,299,2.767,300,2.082,301,3.281,302,2.869,303,2.358,304,3.7,305,2.034,306,2.831,307,2.034,308,2.358,309,2.034,310,4.08,311,3.256,312,1.793,313,1.793,314,2.494,315,2.034,316,2.358,317,2.034,318,2.358,319,1.301,320,3.375,321,3.281,322,1.793,323,2.358,324,3.774,325,3.281,326,2.358,327,1.6,328,2.034,329,2.358,330,2.358,331,2.358,332,1.793,333,2.358,334,2.358,335,2.358,336,2.358,337,2.358,338,2.358,339,2.358,340,2.034,341,1.793,342,2.358,343,2.358,344,2.034,345,2.358,346,3.281,347,2.358,348,2.358,349,1.6,350,0.977,351,2.034,352,2.358,353,2.034,354,2.358,355,1.793,356,1.793,357,2.034,358,2.358,359,2.034,360,1.439,361,2.034,362,2.358,363,2.358,364,2.358,365,3.281,366,2.358,367,2.358,368,2.358,369,2.034,370,2.034,371,1.793,372,2.034,373,2.358,374,2.358,375,2.358,376,2.358,377,2.358]],["title/classes/GroupedValidator.html",[0,0.172,9,1.527]],["body/classes/GroupedValidator.html",[0,0.24,2,1.171,3,0.266,4,0.266,5,0.421,6,0.245,9,2.125,10,0.364,11,1.196,12,3.934,13,2.033,14,1.087,15,1.684,16,2.679,17,2.583,18,3.466,19,3.005,20,3.652,21,0.54,22,0.037,23,2.894,25,1.165,27,2.363,29,1.453,30,0.872,31,1.32,32,0.94,33,1.519,34,1.082,35,2.22,37,1.117,39,2.648,40,3.005,41,2.033,42,1.927,44,3.005,45,1.637,46,0.028,48,0.417,51,0.266,56,3.407,60,0.89,61,0.025,62,0.018,79,1.922,110,2.125,231,2.363,332,1.956,378,2.573,379,3.109,380,4.209,381,2.573,382,3.109,383,3.109,384,3.109,385,3.109,386,1.956,387,3.109,388,3.109,389,3.109,390,3.109,391,2.573,392,3.109]],["title/interfaces/IDataNode.html",[168,0.306,393,2.159]],["body/interfaces/IDataNode.html",[3,0.397,4,0.397,5,0.329,6,0.235,22,0.036,25,0.981,45,1.59,46,0.027,51,0.492,61,0.032,62,0.027,76,1.399,101,0.883,168,0.468,294,1.59,393,3.868,394,3.837,395,3.837,396,3.041,397,4.637]],["title/modules/NgxFileUploadModule.html",[398,2.159,399,1.903]],["body/modules/NgxFileUploadModule.html",[0,0.21,3,0.317,4,0.317,5,0.335,6,0.16,22,0.037,46,0.022,48,0.757,51,0.317,61,0.028,62,0.022,64,3.439,78,1.687,139,1.531,158,2.324,319,2.797,398,2.638,399,3.912,400,2.638,401,2.324,402,2.324,403,4.298,404,3.057,405,3.057,406,4.298,407,3.057,408,3.057,409,3.057,410,2.797,411,3.093,412,3.902,413,3.057,414,3.694,415,3.694,416,4.715,417,4.715,418,3.057,419,4.715,420,3.057,421,3.694,422,3.694]],["title/classes/OrValidator.html",[0,0.172,423,1.903]],["body/classes/OrValidator.html",[0,0.189,2,1.25,3,0.284,4,0.284,5,0.431,6,0.191,8,3.638,9,2.936,10,0.388,11,1.249,12,3.748,13,1.874,14,1.135,15,1.672,16,2.947,17,2.49,18,3.303,19,3.139,20,3.139,21,0.552,22,0.037,23,2.49,24,4.52,25,1.187,26,2.745,27,2.768,29,1.492,30,0.895,31,1.355,32,0.957,33,1.595,34,1.211,35,2.368,36,2.745,37,1.029,38,2.745,39,2.087,40,2.368,41,1.874,42,1.656,43,2.745,44,2.368,45,1.138,46,0.032,47,2.745,48,0.589,49,2.368,51,0.284,52,2.007,53,4.081,56,2.368,57,2.745,58,2.745,60,0.702,61,0.026,62,0.019,238,2.368,386,2.087,423,2.766,424,2.745,425,3.317]],["title/interfaces/Upload.html",[101,0.576,168,0.306]],["body/interfaces/Upload.html",[3,0.246,4,0.246,5,0.405,6,0.234,10,0.336,11,1.132,13,1.367,14,1.029,21,0.403,22,0.037,25,1.099,30,0.489,32,0.974,33,1.132,34,0.607,37,1.258,45,1.367,46,0.017,48,0.613,51,0.445,59,1.544,60,0.843,61,0.023,62,0.017,73,2.09,75,1.189,76,0.741,101,1.137,102,2.119,103,2.497,104,2.497,105,2.258,106,2.228,108,2.026,109,1.845,113,0.816,121,1.502,122,1.82,123,1.502,125,1.502,126,2.497,127,2.012,128,2.012,129,1.696,130,2.09,131,2.624,133,1.244,134,2.012,136,2.012,137,2.012,138,1.82,139,2.049,140,1.958,141,2.258,143,2.258,144,2.012,145,1.82,148,2.715,149,2.012,150,2.012,160,0.816,164,1.502,165,1.502,166,1.544,168,0.5,176,1.081,203,1.311,246,1.725,294,0.984,350,1.367,360,2.012,426,1.449,427,2.87,428,2.87,429,2.87,430,2.87,431,2.87,432,1.806,433,1.806,434,1.725,435,2.012,436,2.012,437,2.507]],["title/classes/UploadControl.html",[0,0.172,299,1.698]],["body/classes/UploadControl.html",[0,0.168,2,1.109,3,0.252,4,0.252,5,0.209,6,0.228,10,0.345,14,1.047,15,1.667,17,1.486,21,0.505,22,0.038,25,1.057,29,1.42,30,0.852,31,1.29,32,0.791,37,1.086,46,0.017,48,0.543,51,0.252,61,0.024,62,0.017,80,1.391,90,1.219,95,2.092,98,1.344,100,3.869,101,1.093,102,1.975,105,2.474,106,2.245,110,2.047,119,2.895,125,1.528,129,1.391,160,0.836,174,1.851,186,2.895,197,1.486,198,2.804,243,2.895,268,2.895,282,1.652,299,2.276,309,2.895,314,2.551,320,2.551,341,2.551,349,1.652,350,1.009,351,3.312,355,3.692,356,1.851,381,3.838,438,4.339,439,2.435,440,4.054,441,2.435,442,4.054,443,2.895,444,4.999,445,2.943,446,2.943,447,4.054,448,2.943,449,4.054,450,4.054,451,3.355,452,4.054,453,4.054,454,2.943,455,4.054,456,2.943,457,2.943,458,2.943,459,2.435,460,2.943,461,4.054,462,2.943,463,2.943,464,2.435,465,2.435,466,2.943,467,2.101,468,2.435,469,2.943,470,2.943,471,2.943,472,2.943]],["title/interfaces/UploadData.html",[166,0.945,168,0.306]],["body/interfaces/UploadData.html",[3,0.269,4,0.269,5,0.381,6,0.136,10,0.368,11,1.204,13,1.077,21,0.571,22,0.038,30,0.876,32,0.722,33,1.204,34,0.664,37,1.122,45,1.839,46,0.018,48,0.643,51,0.459,59,1.323,60,0.664,61,0.025,62,0.018,73,2.657,75,2.128,76,1.238,101,1.075,102,1.807,103,1.585,104,1.585,105,1.433,106,1.987,108,1.596,109,1.453,113,0.892,121,1.183,122,1.433,123,1.183,125,1.183,126,2.139,127,1.585,128,1.585,129,1.645,130,2.448,131,2.421,133,0.98,134,1.585,136,1.585,137,1.585,138,1.433,139,1.755,140,2.082,141,2.19,143,2.19,144,1.585,145,1.433,148,2.421,149,1.585,150,1.585,160,0.892,164,1.935,165,1.935,166,1.498,168,0.519,176,1.183,203,1.433,246,2.082,294,1.077,350,1.453,360,1.585,426,1.585,432,1.974,433,1.974,434,2.082,435,2.139,436,2.593,437,2.665]],["title/directives/UploadFileDirective.html",[410,1.381,473,1.527]],["body/directives/UploadFileDirective.html",[0,0.083,3,0.125,4,0.125,5,0.388,6,0.239,10,0.17,11,0.676,14,0.614,15,1.617,16,1.335,17,2.197,21,0.488,22,0.038,25,1.155,29,0.857,30,0.703,31,0.779,32,0.655,34,0.638,37,0.899,41,1.415,42,1.137,45,0.499,46,0.023,48,0.583,50,0.734,51,0.125,52,2.207,55,1.956,59,0.743,60,0.503,61,0.014,62,0.009,69,0.915,76,1.248,78,0.664,79,1.086,80,1.658,90,0.985,95,1.313,98,0.664,101,1.04,102,1.313,107,1.496,108,1.137,109,1.195,110,1.201,112,2.944,113,0.676,115,1.335,117,2.154,122,1.086,123,1.137,125,1.313,129,0.816,133,1.088,138,0.664,145,1.086,158,0.915,160,0.413,161,0.816,163,0.915,164,0.548,167,0.816,169,3.114,170,1.523,171,2.488,172,0.915,173,1.496,175,1.496,176,1.313,178,1.496,179,1.038,183,1.592,196,0.734,198,2.635,215,1.038,231,1.956,271,1.496,295,3.091,300,0.664,302,2.856,305,1.038,306,2.154,307,1.038,312,1.496,322,0.915,327,1.693,328,1.038,349,2.315,350,0.499,353,1.038,355,1.496,356,2.192,357,2.488,359,1.038,369,1.698,370,2.154,371,1.898,372,1.038,410,1.086,434,0.548,435,1.523,443,2.743,451,1.968,473,1.94,474,1.038,475,4.557,476,1.204,477,3.534,478,3.842,479,4.352,480,3.107,481,2.944,482,3.484,483,3.484,484,3.484,485,1.698,486,2.154,487,2.496,488,2.496,489,2.378,490,1.968,491,2.378,492,1.454,493,3.016,494,3.484,495,1.454,496,1.968,497,1.968,498,2.743,499,2.488,500,1.454,501,1.454,502,3.758,503,2.378,504,2.378,505,3.016,506,2.496,507,1.454,508,2.496,509,1.968,510,1.454,511,4.352,512,1.454,513,1.968,514,1.454,515,2.496,516,1.204,517,1.454,518,1.698,519,2.378,520,2.378,521,1.454,522,3.484,523,1.454,524,2.378,525,1.454,526,1.454,527,1.454,528,2.378,529,3.484,530,1.454,531,2.378,532,1.454,533,2.378,534,1.454,535,1.454,536,1.454,537,3.016,538,1.454,539,1.454,540,1.454,541,1.454,542,3.016,543,1.454,544,1.454,545,1.454,546,1.454,547,1.454,548,1.454,549,3.016,550,2.378,551,1.454,552,2.378,553,1.454,554,1.454,555,1.454,556,1.454,557,1.454,558,1.454,559,1.454,560,1.454,561,1.454,562,1.968,563,1.454,564,1.454,565,1.454,566,1.454,567,1.454,568,1.454,569,1.454,570,1.454,571,1.454,572,2.378,573,2.883,574,1.454,575,2.378,576,1.454,577,1.454,578,1.454,579,1.454,580,1.454,581,1.454,582,1.454,583,1.454,584,1.454,585,1.454,586,1.038,587,1.454,588,1.454,589,1.968,590,1.968,591,1.454,592,1.454,593,1.454,594,2.378,595,1.454,596,1.454,597,2.378,598,1.454,599,1.454,600,1.454,601,1.454,602,1.454,603,1.454,604,1.454,605,1.454,606,1.454,607,1.454,608,1.454,609,1.454,610,1.454,611,1.454,612,1.454,613,1.454,614,2.378,615,1.454,616,1.454,617,1.454,618,1.454,619,1.454,620,2.378,621,1.454,622,2.378,623,2.378,624,1.454,625,1.204,626,1.454,627,1.454,628,1.454,629,1.454,630,1.454,631,1.454,632,1.454,633,1.454,634,1.454,635,1.454]],["title/components/UploadItemComponent.html",[300,1.381,319,1.381]],["body/components/UploadItemComponent.html",[0,0.09,3,0.136,4,0.136,5,0.181,6,0.21,10,0.299,11,0.725,14,0.659,15,1.47,21,0.323,22,0.037,25,0.993,29,0.725,30,0.685,31,0.659,32,0.546,34,0.54,37,0.749,46,0.009,48,0.629,50,0.801,51,0.219,59,0.495,60,0.335,61,0.015,62,0.009,63,1.288,69,0.998,70,1.821,71,1.312,73,0.724,75,1.519,78,0.724,79,1.165,80,0.875,90,2.179,95,1.914,98,0.724,101,1.139,107,1.605,108,0.961,109,1.258,113,0.725,121,1.382,123,0.598,129,1.098,133,1.255,140,0.598,160,0.451,161,0.89,166,0.797,167,0.89,168,0.16,170,1.616,176,0.961,183,0.657,196,0.801,197,0.801,198,1.616,203,0.724,223,1.432,226,1.132,246,0.961,263,0.89,265,1.132,272,2.013,276,2.013,279,1.605,282,0.89,293,1.796,295,2.719,296,3.458,297,1.132,298,2.111,299,1.432,300,1.674,301,2.648,302,2.013,303,1.312,304,3.35,305,1.132,306,2.285,307,1.132,308,1.312,309,1.132,310,3.034,311,3.064,312,2.528,313,2.528,314,3.395,315,1.821,316,2.111,317,1.821,318,2.648,319,1.674,320,3.432,321,3.034,322,2.838,323,2.648,324,3.552,325,2.648,326,1.312,327,1.796,328,1.132,329,1.312,330,1.312,331,1.312,332,0.998,333,1.312,334,2.648,335,2.648,336,1.312,337,1.312,338,1.312,339,1.312,340,2.618,341,2.013,342,1.312,343,1.312,344,1.132,345,1.312,346,2.648,347,1.312,348,2.111,349,2.058,350,0.875,351,1.821,352,2.111,353,1.132,354,1.312,355,1.605,356,0.998,357,1.132,358,1.312,359,1.132,360,0.801,361,1.132,362,1.312,363,1.312,364,1.312,365,2.111,366,1.312,367,1.312,368,1.312,369,1.132,370,1.132,371,0.998,372,1.132,373,1.312,374,2.111,375,2.111,376,2.111,377,3.034,396,1.432,402,0.998,410,0.724,411,0.801,434,0.961,467,1.821,473,0.801,474,1.132,480,1.132,481,1.132,485,1.821,486,1.132,490,2.111,498,1.132,508,1.312,515,1.312,516,1.312,518,1.132,586,1.132,625,2.111,636,1.821,637,1.312,638,1.312,639,1.312,640,2.551,641,2.551,642,2.551,643,1.586,644,1.586,645,1.586,646,1.586,647,1.586,648,1.586,649,3.666,650,2.551,651,2.551,652,2.551,653,1.312,654,3.034,655,1.312,656,1.312,657,1.312,658,1.312,659,1.312,660,3.034,661,3.325,662,3.325,663,2.648,664,4.008,665,2.111,666,1.312,667,3.552,668,3.2,669,3.734,670,4.008,671,3.034,672,1.312,673,3.325,674,2.648,675,3.2,676,1.586,677,1.586,678,1.586,679,1.586,680,1.586,681,1.586,682,3.734,683,3.666,684,1.586,685,1.586,686,1.586,687,3.2,688,2.551,689,3.734,690,1.586,691,2.306,692,1.586,693,1.586,694,1.586,695,2.551,696,1.586,697,1.586,698,1.586,699,1.586,700,1.312,701,1.586,702,1.586,703,1.586,704,1.586,705,1.586,706,1.586,707,2.551,708,3.2,709,2.551,710,2.551,711,2.111,712,3.034,713,2.551,714,2.111,715,3.325,716,1.312,717,1.312,718,1.312,719,2.551,720,2.111,721,2.551,722,3.034,723,2.648,724,2.551,725,1.586,726,1.586,727,1.586,728,1.586,729,1.586,730,1.586,731,1.586,732,2.111,733,1.586,734,1.586,735,2.111,736,1.586,737,2.111,738,1.312,739,1.586,740,1.586,741,1.586,742,1.312,743,1.312,744,1.586,745,2.111,746,1.312,747,1.586,748,2.111,749,2.111,750,1.586,751,1.586,752,1.586,753,1.586,754,2.111,755,3.034,756,1.312,757,1.312,758,1.312]],["title/classes/UploadModel.html",[0,0.172,113,0.859]],["body/classes/UploadModel.html",[0,0.127,2,0.842,3,0.192,4,0.192,5,0.422,6,0.253,10,0.262,14,0.859,15,1.673,21,0.445,22,0.038,25,1.222,29,1.339,30,0.842,31,1.216,32,1.004,33,1.404,34,0.932,37,1.031,45,0.767,46,0.013,48,0.446,51,0.192,52,1.021,60,1.189,61,0.02,62,0.013,70,3.364,73,2.401,75,1.952,76,1.138,80,1.616,82,2.755,86,2.755,90,0.926,98,1.021,99,2.377,101,1.041,107,2.094,109,1.694,110,1.129,113,0.946,121,1.66,125,1.66,130,2.497,133,1.708,140,2.061,141,1.816,164,1.775,165,1.861,166,1.242,192,1.596,211,1.596,217,2.84,246,1.861,271,2.094,434,2.061,496,2.755,589,1.85,691,2.502,759,1.85,760,4.407,761,4.712,762,3.977,763,3.329,764,2.235,765,2.235,766,2.235,767,2.235,768,3.329,769,2.235,770,2.235,771,2.235,772,2.235,773,2.235,774,2.235,775,3.329,776,2.235,777,2.235,778,2.235,779,2.235,780,2.235,781,2.235,782,2.235,783,2.235,784,2.235,785,2.235,786,2.235,787,2.235,788,2.235,789,2.235,790,2.235,791,2.235,792,2.235,793,2.235,794,2.235,795,1.85,796,2.235,797,2.235,798,2.235,799,3.329,800,2.235,801,2.235,802,2.235,803,2.235,804,3.329,805,2.235,806,3.329,807,2.235,808,3.329,809,2.235,810,3.329,811,3.329,812,3.329,813,2.235,814,2.235,815,2.235,816,2.235,817,2.235,818,2.235,819,2.235]],["title/interfaces/UploadOptions.html",[115,1.698,168,0.306]],["body/interfaces/UploadOptions.html",[0,0.104,3,0.156,4,0.156,5,0.381,6,0.079,10,0.213,11,0.809,13,0.624,15,1.4,21,0.4,22,0.038,23,0.919,30,0.598,31,0.735,32,0.485,34,0.964,46,0.011,48,0.576,50,0.919,51,0.244,52,1.963,55,1.967,59,1.342,60,1.042,61,0.017,62,0.011,76,1.11,79,0.831,80,1.887,95,1.072,96,1.3,97,1.3,98,0.831,99,1.3,100,1.3,101,1.105,102,1.62,103,0.919,104,0.919,105,0.831,106,1.179,108,1.072,109,1.359,110,0.919,112,2.032,113,0.809,114,3.399,115,2.224,117,2.032,118,1.507,119,2.032,121,1.072,122,1.6,123,1.493,125,1.072,126,2.404,127,1.437,128,1.437,129,1.474,130,1.6,131,1.769,133,0.889,134,0.919,136,0.919,137,1.437,138,0.831,139,1.179,140,1.32,141,2.25,143,1.299,144,0.919,145,1.299,148,2,149,1.769,150,1.437,153,2.899,154,1.507,155,2.355,156,2.355,157,2.899,158,1.145,159,2.355,160,0.517,161,1.022,162,2.355,163,1.145,164,0.686,165,1.794,166,0.889,167,1.022,168,0.184,169,2.995,170,2,171,2.501,172,3.374,173,2.867,174,1.145,175,1.145,176,1.62,177,1.507,178,1.145,179,2.501,180,1.507,181,1.507,182,1.507,183,1.452,184,1.507,185,2.899,186,1.3,187,2.355,188,1.507,189,2.355,190,1.507,191,4.499,192,2.032,193,1.507,194,1.507,195,2.899,196,0.919,197,0.919,198,0.919,199,1.507,200,1.507,201,2.899,202,2.899,203,1.6,204,1.507,205,3.278,206,2.355,207,3.557,208,1.507,209,2.355,210,1.507,211,1.3,212,1.507,213,1.507,214,1.507,215,1.3,216,1.507,217,1.3,218,2.355,219,1.507,220,1.507,221,1.507,222,1.507,223,1.597,224,1.507,225,1.507,226,1.3,227,1.507,228,1.507,229,2.355,230,1.507,231,1.597,232,1.507,233,1.507,234,1.507,235,3.278,236,1.507,237,1.507,238,2.501,239,1.507,240,1.507,241,1.507,242,1.507,243,1.3,244,1.507,245,1.507,246,0.686,247,1.507,248,1.507,249,1.507,250,1.507,251,1.507,252,1.507,253,1.507,254,2.355,255,2.899,256,2.355,257,1.507,258,1.507,259,1.507,260,1.507,261,1.507,262,1.507,263,1.022,264,1.507,265,1.3,266,1.507,267,1.507,268,1.3,269,2.355,270,2.355,271,1.145,272,1.79,273,2.355,274,1.507,275,1.507,276,1.145,277,2.899,278,1.3,279,1.145,280,1.507,281,1.507,282,1.022,283,1.507,284,1.507,285,1.507,286,1.507,287,1.507,288,1.507,289,1.507,290,1.507,291,1.507,292,1.507,294,0.624,820,2.846]],["title/interfaces/UploadResponse.html",[165,1.14,168,0.306]],["body/interfaces/UploadResponse.html",[3,0.283,4,0.283,5,0.387,6,0.144,10,0.387,11,1.246,13,1.134,21,0.497,22,0.038,30,0.564,32,0.748,33,1.246,34,0.699,37,1.152,45,1.505,46,0.019,48,0.66,51,0.468,59,1.37,60,0.699,61,0.026,62,0.019,73,2.248,75,1.37,76,0.853,101,1.09,102,1.855,103,1.669,104,1.669,105,1.51,106,2.04,108,1.653,109,1.505,113,0.939,121,1.246,122,1.51,123,1.246,125,1.246,126,2.215,127,1.669,128,1.669,129,1.689,130,2.003,131,2.755,133,1.032,134,1.669,136,1.669,137,1.669,138,1.51,139,1.818,140,1.855,141,2.561,143,2.248,144,1.669,145,1.51,148,2.486,149,1.669,150,1.669,160,0.939,164,1.653,165,1.855,166,1.37,168,0.53,176,1.976,203,2.394,246,1.855,294,1.134,350,1.505,360,1.669,426,1.669,432,2.08,433,2.08,434,1.855,435,2.215,436,2.215,437,2.759]],["title/classes/UploadStore.html",[0,0.172,821,2.159]],["body/classes/UploadStore.html",[0,0.266,2,1.764,3,0.401,4,0.401,5,0.332,6,0.203,22,0.036,46,0.027,48,0.627,51,0.401,61,0.032,62,0.027,80,1.606,101,1.037,477,3.342,795,3.873,821,3.889,822,3.873]],["title/interfaces/UploadValidation.html",[168,0.306,436,1.527]],["body/interfaces/UploadValidation.html",[3,0.286,4,0.286,5,0.389,6,0.145,10,0.391,11,1.255,13,1.145,21,0.337,22,0.038,30,0.569,32,0.753,33,1.496,34,1.046,37,1.158,45,1.515,46,0.02,48,0.663,51,0.469,59,1.379,60,0.706,61,0.026,62,0.02,73,2.259,75,1.384,76,0.862,101,1.092,102,1.864,103,1.686,104,1.686,105,1.525,106,2.05,108,1.664,109,1.515,113,0.949,121,1.258,122,1.525,123,1.258,125,1.258,126,2.23,127,1.686,128,1.686,129,1.697,130,2.016,131,2.498,133,1.043,134,1.686,136,1.686,137,1.686,138,1.525,139,1.83,140,1.864,141,2.568,143,2.259,144,1.686,145,1.525,148,2.498,149,1.686,150,1.686,160,0.949,164,1.664,165,1.664,166,1.379,168,0.532,176,1.258,203,1.525,246,1.864,294,1.145,350,1.515,360,1.686,426,1.686,432,2.101,433,2.101,434,1.864,435,2.23,436,2.498,437,2.778]],["title/components/UploadViewComponent.html",[300,1.381,411,1.527]],["body/components/UploadViewComponent.html",[0,0.095,3,0.284,4,0.143,5,0.359,6,0.219,10,0.196,11,0.756,14,0.687,15,1.582,17,0.845,18,1.675,21,0.444,22,0.038,25,1.043,29,0.756,30,0.786,31,0.687,32,0.454,37,0.623,39,1.675,41,1.641,42,1.249,46,0.01,48,0.641,51,0.143,52,0.764,55,2.122,59,0.831,61,0.016,62,0.01,69,1.052,75,0.693,76,0.687,78,0.764,80,0.574,90,2.286,95,1.803,98,0.764,101,1.131,102,1.003,114,1.901,133,1.494,140,1.003,160,0.475,163,1.052,169,2.596,170,1.344,172,2.378,173,2.378,174,2.378,175,1.675,176,1.003,178,2.378,183,1.103,196,0.845,197,0.845,223,1.494,231,1.494,263,1.494,278,1.901,293,0.939,295,2.836,300,1.884,302,3.01,304,2.367,311,1.901,312,2.596,313,2.9,314,1.052,315,1.901,317,1.901,319,0.764,320,2.086,322,2.765,327,2.316,332,1.675,340,1.901,341,1.675,349,1.494,350,0.913,361,1.901,371,2.596,386,1.052,396,0.939,402,1.052,410,0.764,411,1.909,420,1.384,434,1.003,441,1.384,443,2.699,459,1.384,464,1.384,465,1.384,467,1.901,468,1.384,473,0.845,474,1.194,477,3.608,480,1.194,481,1.194,485,1.901,486,1.194,487,2.744,488,2.744,497,3.415,498,3.291,499,2.699,502,3.128,506,2.203,509,2.203,513,3.128,518,1.194,562,2.203,573,3.637,586,3.138,590,1.384,636,1.901,637,1.384,638,1.384,639,1.384,653,1.384,654,2.203,655,1.384,656,1.384,657,1.384,658,1.384,659,1.384,660,2.744,661,2.744,662,2.744,663,2.744,664,4.52,665,3.128,666,2.203,667,2.203,669,2.744,670,4.269,671,2.744,672,2.744,673,3.959,674,2.203,682,2.203,689,1.384,691,1.052,700,2.744,711,1.384,712,2.203,714,1.384,715,3.128,716,2.744,717,3.128,718,2.203,720,3.128,722,1.384,723,1.384,732,1.384,735,1.384,737,2.203,738,2.203,742,2.744,743,3.128,745,1.384,746,1.384,748,1.384,749,1.384,754,2.203,755,3.128,756,1.384,757,1.384,758,1.384,823,4.182,824,1.384,825,4.395,826,3.316,827,2.662,828,2.662,829,2.662,830,2.662,831,2.662,832,2.662,833,3.316,834,2.662,835,3.316,836,2.662,837,2.662,838,3.316,839,1.673,840,2.662,841,1.673,842,2.662,843,1.673,844,1.673,845,1.673,846,2.662,847,1.673,848,2.662,849,1.673,850,2.662,851,2.662,852,2.662,853,1.673,854,2.662,855,1.673,856,1.673,857,1.673,858,1.673,859,1.673,860,1.673,861,2.662,862,1.673,863,1.673,864,1.673,865,1.673,866,1.673,867,1.673,868,1.673,869,1.673,870,2.662,871,1.673,872,2.662,873,1.673,874,2.662,875,1.673,876,1.673,877,1.673,878,1.673,879,1.673,880,1.673,881,1.673,882,1.673,883,1.673,884,1.673,885,3.316,886,1.673,887,1.673,888,1.673,889,2.662,890,1.673,891,1.673]],["title/classes/ValidationBuilder.html",[0,0.172,892,2.159]],["body/classes/ValidationBuilder.html",[0,0.23,1,2.537,2,1.52,3,0.346,4,0.346,5,0.286,6,0.235,9,2.929,10,0.472,13,1.709,14,1.286,15,1.416,21,0.503,22,0.037,23,2.984,25,1.054,29,1.416,30,0.85,31,1.286,32,0.85,41,1.383,42,1.52,46,0.024,48,0.757,49,2.879,51,0.346,60,1.054,61,0.029,62,0.024,183,2.064,344,4.219,386,2.537,423,2.537,892,3.557,893,3.337,894,4.033,895,4.033,896,4.033,897,4.033,898,4.033,899,4.033,900,4.033,901,4.033,902,4.033,903,4.033]],["title/interfaces/ValidationErrors.html",[33,0.859,168,0.306]],["body/interfaces/ValidationErrors.html",[3,0.385,4,0.385,5,0.416,6,0.231,21,0.454,22,0.037,25,0.95,27,2.52,33,1.664,34,1.124,41,1.54,42,1.692,46,0.026,51,0.485,61,0.031,62,0.026,76,1.372,168,0.537,294,1.54,395,3.715,396,2.984,904,2.824,905,4.49]],["title/interfaces/Validator.html",[41,1.038,168,0.306]],["body/interfaces/Validator.html",[3,0.371,4,0.371,5,0.432,6,0.226,10,0.507,14,1.344,16,2.922,21,0.526,22,0.037,25,0.916,27,2.922,29,1.231,30,0.739,31,1.119,32,0.739,33,1.644,34,1.18,41,1.785,42,1.633,46,0.025,51,0.478,61,0.031,62,0.025,76,1.119,168,0.526,294,1.486,396,2.432,904,2.726,906,4.333]],["title/coverage.html",[907,3.419]],["body/coverage.html",[0,0.334,1,2.186,5,0.247,6,0.272,7,2.875,9,1.754,21,0.351,22,0.037,33,0.987,41,1.192,46,0.02,61,0.027,62,0.02,63,1.754,64,1.95,66,2.875,67,2.875,68,2.875,90,2.483,95,1.309,96,3.236,97,3.236,101,0.661,113,0.987,115,1.95,165,1.309,166,1.085,168,0.6,183,1.44,293,1.95,295,3.001,296,3.236,297,3.236,299,1.95,300,2.069,319,1.586,378,2.875,393,2.48,394,2.875,410,1.586,411,1.754,423,2.186,424,2.875,426,2.699,436,1.754,438,2.875,439,2.875,473,1.754,475,2.875,476,2.875,691,3.488,759,2.875,821,2.48,822,2.875,823,2.875,824,2.875,892,2.48,893,2.875,904,2.851,907,2.875,908,3.474,909,3.474,910,3.474,911,5.346,912,3.474,913,3.474,914,3.474,915,3.474,916,4.532,917,4.532,918,3.474,919,3.474,920,4.532,921,4.532,922,3.474,923,3.474,924,3.474,925,5.044,926,5.044,927,3.474,928,3.474]],["title/dependencies.html",[401,2.289,929,2.524]],["body/dependencies.html",[22,0.037,46,0.026,61,0.031,62,0.026,78,1.996,160,1.242,313,2.75,401,2.75,418,3.617,930,4.371,931,6.139,932,4.371,933,4.371,934,5.232,935,4.33,936,4.371,937,4.371,938,4.371,939,4.371,940,4.371,941,4.371,942,4.371,943,4.371,944,4.371,945,4.371,946,4.371,947,4.371,948,4.371,949,4.371,950,4.371,951,4.371,952,4.371]],["title/miscellaneous/enumerations.html",[953,1.588,954,3.011]],["body/miscellaneous/enumerations.html",[6,0.197,10,0.531,22,0.036,46,0.027,61,0.031,62,0.027,106,2.215,129,1.833,143,2.441,164,2.014,246,2.014,350,1.833,426,2.288,434,2.014,435,2.699,499,4.378,953,2.85,954,3.749,955,4.531]],["title/index.html",[10,0.354,956,2.503]],["body/index.html",[2,1.561,22,0.036,46,0.024,61,0.03,62,0.024,63,2.092,64,3.381,139,1.716,294,1.421,319,2.75,327,3.071,398,3.616,399,3.938,401,2.606,402,2.606,403,3.428,404,3.428,405,3.428,406,3.428,407,3.428,408,3.428,409,3.428,410,2.75,411,3.041,412,4.191,413,3.428,473,2.092,636,2.957,956,3.428,957,4.142,958,4.142,959,4.142]],["title/modules.html",[400,2.95]],["body/modules.html",[22,0.033,46,0.029,61,0.033,62,0.029,399,3.06,400,3.473,935,4.026,960,4.865,961,4.865,962,4.865]],["title/miscellaneous/typealiases.html",[953,1.588,963,3.639]],["body/miscellaneous/typealiases.html",[6,0.209,10,0.564,21,0.487,22,0.033,42,2.087,46,0.028,61,0.033,62,0.028,391,3.986,904,3.03,953,3.03,964,4.817,965,4.817]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":90,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["0.9.1",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":327,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["1.10.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["1.1rem",{"_index":747,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["10/10",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":691,"title":{},"body":{"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["1024",{"_index":91,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["12.1.7",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["12/17",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":693,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["1px",{"_index":673,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["1rem",{"_index":723,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["2",{"_index":957,"title":{},"body":{"index.html":{}}}],["2.5rem",{"_index":883,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["200",{"_index":253,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["25",{"_index":736,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25,safari5.1",{"_index":697,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["25rem",{"_index":668,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["2e2e2e",{"_index":886,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["2xx",{"_index":260,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["3.0.3",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":889,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["4/5",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":885,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["42",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["4rem",{"_index":672,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["5",{"_index":728,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["50",{"_index":689,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["50%,#f7f7f7",{"_index":695,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["5rem",{"_index":669,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["6",{"_index":698,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["6.5.3",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["75rem",{"_index":739,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["8",{"_index":958,"title":{},"body":{"index.html":{}}}],["8.2.2",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["8.2.8",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":732,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["9",{"_index":959,"title":{},"body":{"index.html":{}}}],["9.15.10",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["abort",{"_index":144,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["absolute",{"_index":726,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["abstract",{"_index":20,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["accessors",{"_index":107,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["action",{"_index":590,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["actions",{"_index":719,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["actual_component",{"_index":758,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["add",{"_index":17,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["add(...validators",{"_index":388,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["add(validators",{"_index":35,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["added",{"_index":513,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["affect",{"_index":352,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["again",{"_index":138,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["aliases",{"_index":964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":716,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["allowed",{"_index":744,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["and(...validators",{"_index":900,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and(validators",{"_index":894,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["and.validator",{"_index":898,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["andvalidator",{"_index":1,"title":{"classes/AndValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["andvalidator(validators",{"_index":901,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["angular",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":418,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":158,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["angular/compiler",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":78,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["anymore",{"_index":607,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["anything",{"_index":279,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["api/upload",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{},"classes/UploadStore.html":{}}}],["api/validation",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["arguments",{"_index":515,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["array",{"_index":23,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{},"classes/ValidationBuilder.html":{}}}],["array.from(event.datatransfer.files",{"_index":574,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":631,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["array.isarray(errors",{"_index":283,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["array.isarray(validators",{"_index":387,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["assets//scss/variables",{"_index":657,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/fonts",{"_index":656,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assets/scss/icons",{"_index":658,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["assume",{"_index":266,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["auto",{"_index":871,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["back",{"_index":128,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["background",{"_index":682,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["basis",{"_index":879,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["before",{"_index":465,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["begin",{"_index":533,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["behaviorsubject",{"_index":159,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["behaviorsubject(this.upload",{"_index":188,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["bind",{"_index":335,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["block",{"_index":659,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["body",{"_index":176,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["bootstrap",{"_index":404,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":670,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bottom",{"_index":700,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["bound",{"_index":325,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["box",{"_index":874,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["break",{"_index":238,"title":{},"body":{"classes/FileUpload.html":{},"classes/OrValidator.html":{},"interfaces/UploadOptions.html":{}}}],["broken",{"_index":451,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{}}}],["browse",{"_index":962,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":935,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browsers",{"_index":685,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["build",{"_index":216,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["button",{"_index":734,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["byte",{"_index":82,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":86,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/UploadModel.html":{}}}],["bytes.tofixed(2",{"_index":93,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["cancel",{"_index":102,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["cancelall",{"_index":482,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["canceled",{"_index":350,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["cant",{"_index":617,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["care",{"_index":851,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["case",{"_index":235,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["center",{"_index":717,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chance",{"_index":268,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["change",{"_index":108,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changed",{"_index":150,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["changes",{"_index":831,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["changesub",{"_index":333,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["child",{"_index":743,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["chrome10",{"_index":696,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["chrome26",{"_index":704,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{}},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"classes/UploadStore.html":{},"classes/ValidationBuilder.html":{},"index.html":{}}}],["clean",{"_index":18,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["cleanall",{"_index":483,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["clear",{"_index":632,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["click",{"_index":349,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["click(event",{"_index":516,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":407,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":408,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":409,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["code",{"_index":256,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["color",{"_index":660,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["colors",{"_index":749,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["column",{"_index":666,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["commonmodule",{"_index":417,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":122,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completed",{"_index":125,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["completeupload",{"_index":286,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["component",{"_index":300,"title":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":756,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["components",{"_index":636,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["components/ngxfileuploaditem.html",{"_index":460,"title":{},"body":{"classes/UploadControl.html":{}}}],["connection",{"_index":450,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":52,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["constructor",{"_index":110,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["constructor(file",{"_index":763,"title":{},"body":{"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":445,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":111,"title":{},"body":{"classes/FileUpload.html":{}}}],["constructor(httpclient",{"_index":492,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["constructor(validators",{"_index":379,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["contain",{"_index":278,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["content",{"_index":881,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["context",{"_index":324,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["context.ctrl",{"_index":442,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":309,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["control.ts",{"_index":439,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["control.ts:19",{"_index":446,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:34",{"_index":448,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:42",{"_index":454,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:50",{"_index":456,"title":{},"body":{"classes/UploadControl.html":{}}}],["coverage",{"_index":907,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":117,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["createfieldinputfield",{"_index":619,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["creates",{"_index":496,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["createupload(file",{"_index":591,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["createuploadbody",{"_index":224,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["ctrl",{"_index":298,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["current",{"_index":121,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["cursor",{"_index":737,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["custom",{"_index":842,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["d2d2d2",{"_index":873,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dark",{"_index":663,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dashed",{"_index":884,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["data",{"_index":109,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["data/api/upload",{"_index":856,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["declarations",{"_index":403,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":498,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["defaultuploaditem",{"_index":641,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":342,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["defines",{"_index":180,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["delay",{"_index":464,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["delete",{"_index":285,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["dependencies",{"_index":401,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["deprecated",{"_index":543,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["description",{"_index":98,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["destroyed",{"_index":370,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["diffrent",{"_index":274,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["direction",{"_index":665,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directive",{"_index":473,"title":{"directives/UploadFileDirective.html":{}},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":474,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["directives/ngxfileuploaddirective.html#add",{"_index":859,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["directly",{"_index":332,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["disable",{"_index":374,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["disabled",{"_index":486,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["display",{"_index":322,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["document.createelement(\"input",{"_index":621,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["documentation",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":638,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["dont",{"_index":351,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{}}}],["download",{"_index":137,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["downloads",{"_index":528,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag",{"_index":478,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drag/drop",{"_index":870,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["dragevent",{"_index":522,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover",{"_index":491,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dragover(event",{"_index":521,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop",{"_index":479,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["drop(event",{"_index":525,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dummy",{"_index":613,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["dynamic",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":627,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["e4e4e4",{"_index":675,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["edit",{"_index":677,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":681,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["element",{"_index":467,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ellipsis",{"_index":713,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["emits",{"_index":181,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["enabled",{"_index":179,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["endpoint",{"_index":505,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ensure",{"_index":348,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["enum",{"_index":433,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["enumerations",{"_index":954,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":129,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["error.value",{"_index":651,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["errors",{"_index":141,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["event",{"_index":198,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["event.loaded",{"_index":250,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event.preventdefault",{"_index":357,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":358,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":356,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["event.type",{"_index":234,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["eventemitter",{"_index":511,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["events",{"_index":223,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["example",{"_index":443,"title":{},"body":{"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["executes",{"_index":44,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator",{"_index":19,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["execvalidator(validator",{"_index":40,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["exportas",{"_index":538,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["exports",{"_index":406,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["f7f7f7",{"_index":690,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["failed",{"_index":449,"title":{},"body":{"classes/UploadControl.html":{}}}],["fallback",{"_index":272,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["false",{"_index":55,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["fdfdfd",{"_index":683,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff16",{"_index":703,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["ff3.6",{"_index":692,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["field",{"_index":502,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["file.ts",{"_index":476,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["file.ts:119",{"_index":532,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:126",{"_index":527,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:136",{"_index":530,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:149",{"_index":523,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:158",{"_index":526,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:173",{"_index":517,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:32",{"_index":512,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:35",{"_index":514,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:37",{"_index":534,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:47",{"_index":504,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:55",{"_index":503,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:64",{"_index":507,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:71",{"_index":501,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:74",{"_index":500,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:77",{"_index":510,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file.ts:92",{"_index":495,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["file/upload",{"_index":475,"title":{},"body":{"directives/UploadFileDirective.html":{},"coverage.html":{}}}],["filemodel",{"_index":594,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filename",{"_index":761,"title":{},"body":{"classes/UploadModel.html":{}}}],["files",{"_index":573,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["files.map((file",{"_index":582,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileselect",{"_index":551,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filesize",{"_index":70,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["filesizepipe",{"_index":64,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["filetype",{"_index":762,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload",{"_index":95,"title":{"classes/FileUpload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload(this.httpclient",{"_index":596,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["fileupload/data/api/index.ts",{"_index":394,"title":{},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["fileupload/data/api/index.ts:1",{"_index":397,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/data/api/upload.ts",{"_index":426,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/data/api/upload.ts:52",{"_index":431,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:58",{"_index":430,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:63",{"_index":427,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:69",{"_index":428,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/upload.ts:74",{"_index":429,"title":{},"body":{"interfaces/Upload.html":{}}}],["fileupload/data/api/validation.ts",{"_index":904,"title":{},"body":{"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["fileupload/data/api/validation.ts:1",{"_index":905,"title":{},"body":{"interfaces/ValidationErrors.html":{}}}],["fileupload/data/api/validation.ts:8",{"_index":906,"title":{},"body":{"interfaces/Validator.html":{}}}],["fileupload/data/upload.model.ts",{"_index":759,"title":{},"body":{"classes/UploadModel.html":{},"coverage.html":{}}}],["fileupload/data/upload.model.ts:100",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:104",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:113",{"_index":765,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:17",{"_index":764,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:29",{"_index":767,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:36",{"_index":770,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:43",{"_index":772,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:50",{"_index":774,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:57",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:64",{"_index":777,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:71",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:78",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:85",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:92",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.model.ts:96",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/data/upload.store.ts",{"_index":822,"title":{},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["fileupload/ngx",{"_index":414,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/ui/upload",{"_index":295,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fileupload/utils/http/file",{"_index":96,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload/utils/ui/file",{"_index":66,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["fileupload/utils/upload",{"_index":438,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts",{"_index":7,"title":{},"body":{"classes/AndValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/and.validator.ts:6",{"_index":28,"title":{},"body":{"classes/AndValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts",{"_index":378,"title":{},"body":{"classes/GroupedValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:13",{"_index":385,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:18",{"_index":382,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:25",{"_index":383,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:32",{"_index":384,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/grouped.validator.ts:5",{"_index":380,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["fileupload/utils/validation/or.validator.ts",{"_index":424,"title":{},"body":{"classes/OrValidator.html":{},"coverage.html":{}}}],["fileupload/utils/validation/or.validator.ts:6",{"_index":425,"title":{},"body":{"classes/OrValidator.html":{}}}],["fileupload/utils/validation/validation.builder.ts",{"_index":893,"title":{},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["fileupload/utils/validation/validation.builder.ts:12",{"_index":897,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileupload/utils/validation/validation.builder.ts:8",{"_index":895,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["fileuploaditemcontext",{"_index":293,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["fill",{"_index":606,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["filter",{"_index":162,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["find",{"_index":840,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["finished",{"_index":852,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["first",{"_index":888,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flag",{"_index":854,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["flex",{"_index":664,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["font",{"_index":654,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["footer",{"_index":745,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["form",{"_index":171,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata",{"_index":172,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["formdata.append(label",{"_index":228,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["formdataname",{"_index":487,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["function",{"_index":391,"title":{},"body":{"classes/GroupedValidator.html":{},"miscellaneous/typealiases.html":{}}}],["gb",{"_index":85,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["get($colors",{"_index":662,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["get($map",{"_index":748,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["getchange",{"_index":146,"title":{},"body":{"classes/FileUpload.html":{}}}],["getdata",{"_index":151,"title":{},"body":{"classes/FileUpload.html":{}}}],["getfile",{"_index":766,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":771,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":769,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":773,"title":{},"body":{"classes/UploadModel.html":{}}}],["getprogress",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{}}}],["getresponse",{"_index":776,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":369,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["getstate",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["getuploaded",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["getvalidationerrors",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":452,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":679,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(to",{"_index":699,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["gradient(top",{"_index":688,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["green",{"_index":751,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["grouped.validator",{"_index":49,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{}}}],["groupedvalidator",{"_index":9,"title":{"classes/GroupedValidator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["groupedvalidator:13",{"_index":47,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:18",{"_index":36,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:25",{"_index":38,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:32",{"_index":43,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["groupedvalidator:5",{"_index":26,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["grow",{"_index":878,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["handle",{"_index":231,"title":{},"body":{"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["handled",{"_index":262,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleerror(response",{"_index":281,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleevent(event",{"_index":472,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":581,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["handlehttpevent(event",{"_index":232,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleprogress(event",{"_index":247,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleresponse(res",{"_index":257,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlesent",{"_index":244,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["happen",{"_index":466,"title":{},"body":{"classes/UploadControl.html":{}}}],["haserror",{"_index":103,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["haserrors",{"_index":54,"title":{},"body":{"classes/AndValidator.html":{}}}],["header",{"_index":707,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["height",{"_index":722,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["here",{"_index":263,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["hidden",{"_index":714,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["highlight.js",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["highlightjs",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":518,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["hostlistener",{"_index":305,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":353,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":568,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlistener(\"drop",{"_index":570,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["hostlisteners",{"_index":490,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["html",{"_index":754,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["htmlinputelement",{"_index":552,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["http",{"_index":119,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["http/file",{"_index":457,"title":{},"body":{"classes/UploadControl.html":{}}}],["httpclient",{"_index":112,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["httpclientmodule",{"_index":419,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":157,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpevent",{"_index":153,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype",{"_index":154,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.response",{"_index":241,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.sent",{"_index":236,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.uploadprogress",{"_index":239,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpprogressevent",{"_index":155,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpresponse",{"_index":156,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["https://colorzilla.com/gradient",{"_index":680,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["icon",{"_index":882,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["icons",{"_index":653,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["idatanode",{"_index":393,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"coverage.html":{}}}],["identifier",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":867,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ie10",{"_index":702,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["igniteui",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["implements",{"_index":79,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["imports",{"_index":422,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":395,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/ValidationErrors.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["informations",{"_index":360,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["inheritdoc",{"_index":363,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["inherited",{"_index":24,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["inner",{"_index":733,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["input",{"_index":302,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["input(\"ngxfileupload",{"_index":545,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["input(\"ngxfileuploadfile",{"_index":540,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["input[type=\"file",{"_index":629,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputfield",{"_index":620,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["inputs",{"_index":485,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["instance",{"_index":271,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["instanceof",{"_index":282,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["instead",{"_index":544,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["interface",{"_index":168,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["interfaces",{"_index":294,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"index.html":{}}}],["invalid",{"_index":435,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["iscancelable",{"_index":205,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["isinvalid",{"_index":104,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["isnan(size",{"_index":87,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["item",{"_index":314,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item'},{'name",{"_index":757,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["item.component.html",{"_index":316,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.scss",{"_index":318,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["item.component.ts",{"_index":297,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:105",{"_index":644,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:27",{"_index":646,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:32",{"_index":645,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:50",{"_index":642,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:64",{"_index":640,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item.component.ts:75",{"_index":643,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["item/upload",{"_index":296,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["items",{"_index":340,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["itemtemplate",{"_index":838,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["itemtpl",{"_index":323,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["justify",{"_index":880,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["kb",{"_index":83,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["key",{"_index":396,"title":{},"body":{"interfaces/IDataNode.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["keyvalue",{"_index":376,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["label",{"_index":226,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["last",{"_index":742,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["left",{"_index":729,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["legend",{"_index":402,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"index.html":{}}}],["lib/.../upload.ts",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":965,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/data/api",{"_index":50,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["lib/data/api/validation",{"_index":386,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["lib/data/upload.model",{"_index":167,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/ui",{"_index":420,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadViewComponent.html":{}}}],["lib/utils/http/file",{"_index":307,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["lib/utils/ui",{"_index":421,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["lib/utils/upload",{"_index":308,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["light",{"_index":887,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#2e2e2e",{"_index":890,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(#3e3e3e",{"_index":891,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["lighten(map",{"_index":735,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["line",{"_index":746,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["linear",{"_index":687,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["list",{"_index":586,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["listen",{"_index":585,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["listener",{"_index":519,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["literal",{"_index":820,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["manager",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["mandatory",{"_index":506,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["map",{"_index":661,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["margin",{"_index":715,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["matching",{"_index":61,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(progress",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["mb",{"_index":84,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["message",{"_index":265,"title":{},"body":{"classes/FileUpload.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["messages",{"_index":269,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["metadata",{"_index":69,"title":{},"body":{"pipes/FileSizePipe.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["mime",{"_index":775,"title":{},"body":{"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":953,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":211,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["module",{"_index":398,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":400,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":355,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["move",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["moz",{"_index":686,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["much",{"_index":330,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["multiple",{"_index":623,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["need",{"_index":850,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["new",{"_index":183,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["next",{"_index":197,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["ngmodule",{"_index":416,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":372,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["ngoninit",{"_index":364,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["ngx",{"_index":313,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["ngxfileupload",{"_index":481,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileupload(url",{"_index":546,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ngxfileuploadcomponent",{"_index":825,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective",{"_index":497,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaddirective]{@link",{"_index":858,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadfile",{"_index":480,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploadfile(url",{"_index":541,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ngxfileuploaditem",{"_index":441,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditem]{@link",{"_index":459,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":857,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["ngxfileuploadmodule",{"_index":399,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["ngxfileuploadref",{"_index":539,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["none",{"_index":625,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["notification",{"_index":290,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notified",{"_index":520,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["notify",{"_index":149,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["notifyobservers",{"_index":291,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["nowrap",{"_index":710,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["number",{"_index":73,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["object",{"_index":178,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["object.assign(validationresult",{"_index":58,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["observable",{"_index":148,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["observe",{"_index":222,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observers",{"_index":185,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["of(upload).pipe(delay(1000",{"_index":866,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["old",{"_index":684,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["once",{"_index":529,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onclick(event",{"_index":576,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["ondestroy",{"_index":306,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["onfiledragover(event",{"_index":569,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfiledrop(event",{"_index":571,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["onfileselect(event",{"_index":630,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["oninit",{"_index":301,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onitemclick(event",{"_index":354,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["onuploadcompleted",{"_index":836,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadcompleted(upload",{"_index":846,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd",{"_index":837,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["onuploadsadd(uploads",{"_index":848,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["opera12",{"_index":705,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["optional",{"_index":31,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["options",{"_index":114,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["or(...validators",{"_index":902,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or(validators",{"_index":896,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["or.validator",{"_index":899,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["orvalidator",{"_index":423,"title":{"classes/OrValidator.html":{}},"body":{"classes/OrValidator.html":{},"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["orvalidator(validators",{"_index":903,"title":{},"body":{"classes/ValidationBuilder.html":{}}}],["otherwise",{"_index":633,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["out",{"_index":413,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":740,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["output",{"_index":537,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["outputs",{"_index":489,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["over",{"_index":524,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["overflow",{"_index":712,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["overview",{"_index":956,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":929,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":667,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["parsefloat(size.tostring",{"_index":88,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pass",{"_index":361,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passed",{"_index":341,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["passes",{"_index":469,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":655,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["permalink",{"_index":676,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["pipe",{"_index":63,"title":{"pipes/FileSizePipe.html":{}},"body":{"pipes/FileSizePipe.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"coverage.html":{},"index.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":601,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["pipes",{"_index":65,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["pipetransform",{"_index":77,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["plain",{"_index":509,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["pointer",{"_index":738,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["position",{"_index":724,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["post",{"_index":175,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["pre",{"_index":605,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["prevalidateupload(upload",{"_index":608,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["private",{"_index":80,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["progress",{"_index":246,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":721,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["progressevent",{"_index":270,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AndValidator.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["protected",{"_index":12,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["providers",{"_index":405,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"classes/UploadControl.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{}}}],["queue",{"_index":548,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["queued",{"_index":143,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["quickly",{"_index":829,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["radius",{"_index":671,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["range",{"_index":254,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["raw",{"_index":768,"title":{},"body":{"classes/UploadModel.html":{}}}],["readonly",{"_index":437,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["reasons",{"_index":616,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["red",{"_index":750,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["register",{"_index":359,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["relative",{"_index":725,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["remote",{"_index":440,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":371,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["removed",{"_index":468,"title":{},"body":{"classes/UploadControl.html":{},"components/UploadViewComponent.html":{}}}],["removeupload(upload",{"_index":865,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["render",{"_index":362,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["rendered",{"_index":321,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["renderer",{"_index":493,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["renderer2",{"_index":494,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["reportprogress",{"_index":221,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["repository",{"_index":588,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["represents",{"_index":99,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["request",{"_index":145,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["res.body",{"_index":259,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.ok",{"_index":258,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status(400).send(what",{"_index":275,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["reset",{"_index":139,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"index.html":{}}}],["responds",{"_index":251,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response",{"_index":130,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["response(response",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{}}}],["response.error",{"_index":277,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["response.message",{"_index":273,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["restart",{"_index":136,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":62,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["retry",{"_index":105,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["retry(event",{"_index":447,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["returns",{"_index":32,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/Validator.html":{}}}],["returnzero",{"_index":377,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["reverse",{"_index":872,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["right",{"_index":741,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["row",{"_index":718,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["running",{"_index":267,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["rxjs",{"_index":160,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":163,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["safari7",{"_index":706,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["sanitize",{"_index":264,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["save",{"_index":326,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["search",{"_index":531,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["sec",{"_index":864,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["security",{"_index":615,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["see",{"_index":280,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["select",{"_index":614,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selected",{"_index":578,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["selector",{"_index":312,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["send",{"_index":173,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["sends",{"_index":127,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["server",{"_index":126,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["service",{"_index":118,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["set",{"_index":133,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["setngxfileupload(url",{"_index":536,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["setngxfileuploadfile(url",{"_index":535,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["setresponse(response",{"_index":778,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":334,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["setstate(state",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["settemplate(tpl",{"_index":648,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setup",{"_index":827,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["setupload(fileupload",{"_index":647,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["setvalidationerrors(errors",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":678,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["showlist",{"_index":835,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["shrink",{"_index":877,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["simply",{"_index":830,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["single",{"_index":100,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["size",{"_index":75,"title":{},"body":{"pipes/FileSizePipe.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["size.pipe.ts",{"_index":68,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["size.pipe.ts:10",{"_index":74,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["size/file",{"_index":67,"title":{},"body":{"pipes/FileSizePipe.html":{},"coverage.html":{}}}],["sizing",{"_index":875,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["solid",{"_index":674,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["something",{"_index":186,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["sort",{"_index":375,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"modules/NgxFileUploadModule.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["space",{"_index":709,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["start",{"_index":106,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":453,"title":{},"body":{"classes/UploadControl.html":{}}}],["started",{"_index":243,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["state",{"_index":140,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["state(state",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["statements",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":344,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"classes/ValidationBuilder.html":{}}}],["status",{"_index":255,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stop",{"_index":444,"title":{},"body":{"classes/UploadControl.html":{}}}],["stop(event",{"_index":455,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopped",{"_index":182,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["store",{"_index":212,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stream",{"_index":184,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["streams",{"_index":284,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["string",{"_index":76,"title":{},"body":{"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["style",{"_index":753,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["styles",{"_index":637,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["styleurls",{"_index":317,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["sub",{"_index":328,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["sub.unsubscribe",{"_index":604,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subject",{"_index":123,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["subscribe",{"_index":196,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["subscribtions",{"_index":547,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["subscription",{"_index":310,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["success",{"_index":203,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["support",{"_index":960,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":961,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":233,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["table",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":161,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["takeuntil(this.cancel",{"_index":194,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["template",{"_index":320,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["template(tpl",{"_index":345,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["templateref",{"_index":304,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["templateurl",{"_index":315,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["text",{"_index":711,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["think",{"_index":329,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.add",{"_index":553,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.add.emit(uploads",{"_index":584,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.cancel",{"_index":289,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.complete",{"_index":288,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.next(true",{"_index":208,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.changesub",{"_index":365,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.changesub.unsubscribe",{"_index":373,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.completed",{"_index":554,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.completed.emit(upload",{"_index":603,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.completeupload",{"_index":209,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.context",{"_index":338,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.context.data",{"_index":367,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.createfieldinputfield",{"_index":556,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createupload(file",{"_index":583,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.createuploadbody",{"_index":219,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.destroyed$.complete",{"_index":559,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.destroyed$.next(true",{"_index":557,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.disabled",{"_index":572,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.execvalidator(validator",{"_index":57,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["this.file.name",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.size",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.file.type",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.filename",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":555,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.click",{"_index":577,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.files",{"_index":635,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.fileselect.value",{"_index":634,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.filesize",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":337,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":471,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.change",{"_index":366,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.fileupload.retry",{"_index":462,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":463,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.formdataname",{"_index":593,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handleerror(error",{"_index":200,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleevent(event",{"_index":461,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":575,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.handlehttpevent(event",{"_index":199,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleprogress(event",{"_index":240,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleresponse(event",{"_index":242,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlesent",{"_index":237,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.http.post(this.options.url",{"_index":220,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.itemtpl",{"_index":347,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["this.notifyobservers",{"_index":207,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.onfileselect(e",{"_index":628,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.options",{"_index":189,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.enabled",{"_index":225,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.name",{"_index":227,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.prevalidateupload(filemodel",{"_index":598,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.progress",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.removeupload(upload",{"_index":862,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.renderer.listen(inputfield",{"_index":626,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setattribute(inputfield",{"_index":622,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.renderer.setstyle(inputfield",{"_index":624,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.response",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.showlist",{"_index":861,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.start",{"_index":204,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.state",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.units.length",{"_index":92,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.units[unit",{"_index":94,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["this.upload",{"_index":187,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.asobservable",{"_index":213,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.complete",{"_index":287,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.next(this.upload",{"_index":292,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.file",{"_index":229,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.filename",{"_index":230,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.response",{"_index":202,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.state",{"_index":191,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.tojson",{"_index":214,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.uploaded",{"_index":249,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploaded",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploadfile().pipe",{"_index":193,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploadresponse",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.uploads",{"_index":558,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.foreach((upload",{"_index":560,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.indexof(upload",{"_index":868,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.length",{"_index":562,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["this.uploads.push(...uploads",{"_index":860,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.push(upload",{"_index":599,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads.splice(idx",{"_index":869,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["this.uploads.splice(this.uploads.indexof(upload",{"_index":602,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i",{"_index":564,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploads[i].cancel",{"_index":563,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.uploadvalidationerrors",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.url",{"_index":542,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.useformdata",{"_index":592,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validationerrors",{"_index":819,"title":{},"body":{"classes/UploadModel.html":{}}}],["this.validator",{"_index":597,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator(upload.file",{"_index":610,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validator.validate(upload.file",{"_index":609,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["this.validators",{"_index":56,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{}}}],["this.validators.concat(validators",{"_index":389,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["through",{"_index":174,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["throw",{"_index":261,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["timer",{"_index":458,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":470,"title":{},"body":{"classes/UploadControl.html":{}}}],["todo",{"_index":589,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{}}}],["tojson",{"_index":760,"title":{},"body":{"classes/UploadModel.html":{}}}],["top",{"_index":730,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tpl",{"_index":346,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["transform",{"_index":71,"title":{},"body":{"pipes/FileSizePipe.html":{},"components/UploadItemComponent.html":{}}}],["transform(size",{"_index":72,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["translate",{"_index":731,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["tree",{"_index":639,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["trigger",{"_index":549,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["tslib",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AndValidator.html":{},"pipes/FileSizePipe.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["type=\"file",{"_index":580,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["typealiases",{"_index":963,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ul",{"_index":752,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["unit",{"_index":89,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["units",{"_index":81,"title":{},"body":{"pipes/FileSizePipe.html":{}}}],["unsubscribe",{"_index":331,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["up",{"_index":39,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"components/UploadViewComponent.html":{}}}],["uplaod",{"_index":587,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload",{"_index":101,"title":{"interfaces/Upload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"classes/UploadStore.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"coverage.html":{}}}],["upload(fileupload",{"_index":336,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.cancel",{"_index":567,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.change",{"_index":600,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.haserror",{"_index":566,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.isinvalid",{"_index":565,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.model",{"_index":432,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["upload.module.ts",{"_index":415,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.name",{"_index":649,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.response.body.message",{"_index":652,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.size",{"_index":650,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["upload.start",{"_index":561,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.state",{"_index":611,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["upload.tojson",{"_index":368,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["upload.ts",{"_index":97,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["upload.ts:100",{"_index":120,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:116",{"_index":147,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:121",{"_index":152,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:129",{"_index":124,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:136",{"_index":132,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:53",{"_index":116,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:71",{"_index":142,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:89",{"_index":135,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.validationerrors",{"_index":612,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadall",{"_index":484,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadbody",{"_index":218,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadcontrol",{"_index":299,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"classes/UploadControl.html":{},"components/UploadItemComponent.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":339,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["uploaddata",{"_index":166,"title":{"interfaces/UploadData.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploaddata.name",{"_index":832,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["uploaded",{"_index":434,"title":{},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["uploaded(bytes",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadfile",{"_index":217,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadfiledirective",{"_index":410,"title":{"directives/UploadFileDirective.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploaditemcomponent",{"_index":319,"title":{"components/UploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["uploadmodel",{"_index":113,"title":{"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":595,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["uploadoptions",{"_index":115,"title":{"interfaces/UploadOptions.html":{}},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadresponse",{"_index":165,"title":{"interfaces/UploadResponse.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploads",{"_index":477,"title":{},"body":{"directives/UploadFileDirective.html":{},"classes/UploadStore.html":{},"components/UploadViewComponent.html":{}}}],["uploadstate",{"_index":164,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":195,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.error",{"_index":201,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.invalid",{"_index":215,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.progress",{"_index":248,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.queued",{"_index":192,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.start",{"_index":245,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.uploaded",{"_index":206,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstore",{"_index":821,"title":{"classes/UploadStore.html":{}},"body":{"classes/UploadStore.html":{},"coverage.html":{}}}],["uploadvalidation",{"_index":436,"title":{"interfaces/UploadValidation.html":{}},"body":{"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"coverage.html":{}}}],["uploadvalidationerrors",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{}}}],["uploadviewcomponent",{"_index":411,"title":{"components/UploadViewComponent.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["url",{"_index":169,"title":{},"body":{"classes/FileUpload.html":{},"directives/UploadFileDirective.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["use",{"_index":508,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{}}}],["used",{"_index":170,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{},"components/UploadViewComponent.html":{}}}],["useformdata",{"_index":488,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{}}}],["valid",{"_index":190,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["validate",{"_index":16,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"interfaces/Validator.html":{}}}],["validate(file",{"_index":27,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{}}}],["validated",{"_index":134,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validation",{"_index":45,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"interfaces/IDataNode.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{}}}],["validationbuilder",{"_index":892,"title":{"classes/ValidationBuilder.html":{}},"body":{"classes/ValidationBuilder.html":{},"coverage.html":{}}}],["validationerrors",{"_index":33,"title":{"interfaces/ValidationErrors.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validationerrors(errors",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["validationfn",{"_index":42,"title":{},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"miscellaneous/typealiases.html":{}}}],["validationresult",{"_index":53,"title":{},"body":{"classes/AndValidator.html":{},"classes/OrValidator.html":{}}}],["validator",{"_index":41,"title":{"interfaces/Validator.html":{}},"body":{"classes/AndValidator.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"classes/ValidationBuilder.html":{},"interfaces/ValidationErrors.html":{},"interfaces/Validator.html":{},"coverage.html":{}}}],["validator(file",{"_index":392,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validator.validate(file",{"_index":390,"title":{},"body":{"classes/GroupedValidator.html":{}}}],["validators",{"_index":13,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"classes/ValidationBuilder.html":{}}}],["value",{"_index":499,"title":{},"body":{"directives/UploadFileDirective.html":{},"components/UploadViewComponent.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":755,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["very",{"_index":828,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["via",{"_index":579,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["view",{"_index":311,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["view.html",{"_index":834,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.scss",{"_index":833,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts",{"_index":824,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["view.ts:43",{"_index":841,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:50",{"_index":843,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:57",{"_index":844,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:63",{"_index":839,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:69",{"_index":845,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:74",{"_index":855,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:79",{"_index":853,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:85",{"_index":849,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view.ts:93",{"_index":847,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["view/upload",{"_index":823,"title":{},"body":{"components/UploadViewComponent.html":{},"coverage.html":{}}}],["viewchild",{"_index":303,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":343,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/AndValidator.html":{},"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"classes/GroupedValidator.html":{},"classes/OrValidator.html":{},"interfaces/Upload.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"directives/UploadFileDirective.html":{},"components/UploadItemComponent.html":{},"classes/UploadModel.html":{},"interfaces/UploadResponse.html":{},"interfaces/UploadValidation.html":{},"components/UploadViewComponent.html":{}}}],["w3c",{"_index":701,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["wait",{"_index":863,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["want",{"_index":276,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/UploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["webdriver",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":694,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["white",{"_index":708,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["width",{"_index":720,"title":{},"body":{"components/UploadItemComponent.html":{},"components/UploadViewComponent.html":{}}}],["window",{"_index":550,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["within",{"_index":252,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["without",{"_index":618,"title":{},"body":{"directives/UploadFileDirective.html":{}}}],["wrapped",{"_index":177,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["wrapper",{"_index":826,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["written",{"_index":210,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["x",{"_index":876,"title":{},"body":{"components/UploadViewComponent.html":{}}}],["yes",{"_index":381,"title":{},"body":{"classes/GroupedValidator.html":{},"classes/UploadControl.html":{}}}],["z",{"_index":727,"title":{},"body":{"components/UploadItemComponent.html":{}}}],["zone.js",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":412,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AndValidator.html":{"url":"classes/AndValidator.html","title":"class - AndValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AndValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/and.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/and.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GroupedValidator } from \"./grouped.validator\";\nimport { ValidationErrors } from \"@lib/data/api\";\n\nexport class AndValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        const validationResult: ValidationErrors = {};\n        let hasErrors = false;\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result !== null) {\n                Object.assign(validationResult, result);\n                hasErrors = true;\n            }\n        }\n        return hasErrors ? validationResult : null;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FileSizePipe.html":{"url":"pipes/FileSizePipe.html","title":"pipe - FileSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FileSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n        \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        fileSize\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"fileSize\"\n})\nexport class FileSizePipe implements PipeTransform {\n\n    private units = [\"Byte\", \"Kb\", \"Mb\", \"Gb\"];\n\n    transform(size: number): string {\n        let bytes = isNaN(size) ? parseFloat(size.toString()) : size;\n        let unit  = 0;\n\n        while (bytes > 1024 && this.units.length > unit) {\n            bytes = bytes / 1024;\n            unit++;\n        }\n        return `${bytes.toFixed(2)} ${this.units[unit]}`;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUpload.html":{"url":"classes/FileUpload.html","title":"class - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n            \n                Implements\n            \n            \n                            Upload\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/http/file-upload.ts:53\n                            \n                        \n\n                \n                    \n                            create FileUpload service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:100\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:129\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:136\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:89\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:71\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:116\n                                \n                            \n                    \n                        \n                                returns observable which notify if file upload state\nhas been changed\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/utils/http/file-upload.ts:121\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy } from \"@angular/core\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\nimport { UploadControl } from \"@lib/utils/upload-control\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { UploadData } from \"@lib/data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupedValidator.html":{"url":"classes/GroupedValidator.html","title":"class - GroupedValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupedValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/grouped.validator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(validators?: Array)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validators\n                                                  \n                                                        \n                                                                        Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:18\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:25\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:32\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/grouped.validator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationErrors, ValidationFn } from \"@lib/data/api/validation\";\n\nexport abstract class GroupedValidator implements Validator {\n\n    protected validators: Array;\n\n    public constructor(\n       validators?: Array\n    ) {\n        this.validators = Array.isArray(validators) ? validators : [];\n    }\n\n    public abstract validate(file: File): ValidationErrors | null;\n\n    /**\n     * add validators\n     */\n    public add(...validators: Array): void {\n        this.validators = this.validators.concat(validators);\n    }\n\n    /**\n     * clean up all validators\n     */\n    public clean() {\n        this.validators = [];\n    }\n\n    /**\n     * executes validator and returns validation result\n     */\n    protected execValidator(validator: Validator | ValidationFn, file: File): ValidationErrors | null {\n        /** we handle a validator class directly */\n        if (\"validate\" in validator) {\n            return validator.validate(file);\n        }\n        /** we handle a validation function */\n        return validator(file);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/index.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/index.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface IDataNode {\n    [key: string]: any;\n}\n\nexport * from \"./validation\";\nexport * from \"./upload\";\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileSizePipe\n                        \n                        \n                            UploadFileDirective\n                        \n                        \n                            UploadItemComponent\n                        \n                        \n                            UploadViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { UploadViewComponent, UploadFileDirective, UploadItemComponent } from \"@lib/ui\";\nimport { FileSizePipe } from \"@lib/utils/ui\";\n\n@NgModule({\n    declarations: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n    ],\n    exports: [\n        UploadFileDirective,\n        UploadItemComponent,\n        UploadViewComponent,\n        FileSizePipe\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrValidator.html":{"url":"classes/OrValidator.html","title":"class - OrValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/or.validator.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GroupedValidator\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                validators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                clean\n                            \n                            \n                                    Protected\n                                execValidator\n                            \n                            \n                                    Public\n                                    Abstract\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            validators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from         GroupedValidator\n\n                                \n                            \n                        \n                            \n                                    Defined in         GroupedValidator:5\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/or.validator.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(validators: Array)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:18\n\n                \n            \n\n\n            \n                \n                    add validators\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clean\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clean()\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:25\n\n                \n            \n\n\n            \n                \n                    clean up all validators\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            execValidator\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execValidator(validator: Validator | ValidationFn, file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:32\n\n                \n            \n\n\n            \n                \n                    executes validator and returns validation result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validator\n                                    \n                                                Validator | ValidationFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(file: File)\n                \n            \n\n\n            \n                \n                    Inherited from         GroupedValidator\n\n                \n            \n            \n                \n                        Defined in         GroupedValidator:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationErrors } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\n\nexport class OrValidator extends GroupedValidator {\n\n    public validate(file: File): ValidationErrors | null {\n\n        let validationResult: ValidationErrors | null = {};\n\n        for (const validator of this.validators) {\n            const result = this.execValidator(validator, file);\n\n            if (result === null) {\n                validationResult = null;\n                break;\n            }\n\n            Object.assign(validationResult, result);\n        }\n\n        return validationResult;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Upload.html":{"url":"interfaces/Upload.html","title":"interface - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        change\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                                \n                                    hasError\n                                \n                                \n                                    isInvalid\n                                \n                                \n                                    retry\n                                \n                                \n                                    start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:63\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \nhasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:69\n                \n            \n\n\n            \n                \n                    return true if upload was not completed since the server\nsends back an error response\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \nisInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:74\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \nretry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:58\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/upload.ts:52\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change\n                                    \n                                \n                                \n                                    \n                                        change:         Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Observable\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    returns observable which notify if file upload state\nhas been changed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    get upload data informations\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/upload-control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: FileUpload)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/utils/upload-control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        FileUpload\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:34\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:42\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/upload-control.ts:50\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileUpload } from \"./http/file-upload\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     *\n     */\n    public constructor(\n        private fileUpload: FileUpload\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        response\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                    \n                                \n                                \n                                    \n                                        response:         UploadResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:         UploadValidation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadValidation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/UploadFileDirective.html":{"url":"directives/UploadFileDirective.html","title":"directive - UploadFileDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  UploadFileDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/ui/upload-file/upload-file.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUploadFile], [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancelAll\n                            \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                ngxFileUploadFile\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                completed\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ngxFileUploadFile\n                                \n                                \n                                    ngxFileUpload\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, renderer: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:92\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:74\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:71\n                            \n                        \n                \n                    \n                        form data field name with which form >data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUploadFile\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:47\n                            \n                        \n                \n                    \n                        url which should be used as endpoint for the file upload\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:64\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:77\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:32\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        completed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:35\n                            \n                        \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:173\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:149\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:158\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancelAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:126\n                \n            \n\n\n            \n                \n                    cancel all downloads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:136\n                \n            \n\n\n            \n                \n                    search for broken uploads (error / invalid) and cancel\nthem\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:119\n                \n            \n\n\n            \n                \n                    begin all uploads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:37\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ngxFileUploadFile\n                    \n                \n\n\n                \n                    \n                        setngxFileUploadFile(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:47\n                                \n                            \n                    \n                        \n                                url which should be used as endpoint for the file upload\nthis field is mandatory\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                        Example :\n                                            \n                                                \n                                            \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n\n\n                \n                    \n                        setngxFileUpload(url: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-file/upload-file.ts:55\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            url\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Renderer2 } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\n\nimport { Validator, ValidationFn, UploadState } from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUploadFile], [ngxFileUpload]\",\n  exportAs: \"ngxFileUploadRef\"\n})\nexport class UploadFileDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    @Output()\n    public completed: EventEmitter;\n\n    public url: string;\n\n    /**\n     * url which should be used as endpoint for the file upload\n     * this field is mandatory\n     *\n     * @example\n     * \n     */\n    @Input(\"ngxFileUploadFile\")\n    public set ngxFileUploadFile(url: string) {\n        this.url = url;\n    }\n\n    /**\n     * @deprecated use [ngxFileUploadFile instead]\n     */\n    @Input(\"ngxFileUpload\")\n    public set ngxFileUpload(url: string) {\n        this.url = url;\n    }\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form >data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    @Input()\n    public disabled = false;\n\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * upload file queue\n     */\n    private uploads: FileUpload[] = [];\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private httpClient: HttpClient,\n        private renderer: Renderer2\n    ) {\n        this.add = new EventEmitter();\n        this.completed = new EventEmitter();\n\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.uploads = [];\n        this.destroyed$.complete();\n    }\n\n    /**\n     * begin all uploads at once\n     */\n    public uploadAll() {\n        this.uploads.forEach((upload: FileUpload) => upload.start());\n    }\n\n    /**\n     * cancel all downloads at once\n     */\n    public cancelAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            this.uploads[i].cancel();\n        }\n    }\n\n    /**\n     * search for broken uploads (error / invalid) and cancel\n     * them\n     */\n    public cleanAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            const upload = this.uploads[i];\n            if (upload.isInvalid() || upload.hasError()) {\n                upload.cancel();\n            }\n        }\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            const files = Array.from(event.dataTransfer.files);\n            this.handleFileSelect(files);\n        }\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        const uploads = files.map((file) => this.createUpload(file));\n        this.add.emit(uploads);\n    }\n\n    /**\n     * create upload from file, listen to complete\n     * to remove upload from uploads list\n     *\n     * remove uplaod from uploads repository if upload completed\n     * or canceled\n     *\n     * @todo should be an action\n     */\n    private createUpload(file: File): FileUpload {\n        const uploadOptions = {\n            url: this.url,\n            formData: {\n                enabled: this.useFormData,\n                name   : this.formDataName\n            }\n        };\n\n        const fileModel = new UploadModel(file);\n        const upload    = new FileUpload(this.httpClient, fileModel, uploadOptions);\n\n        if (this.validator) {\n            this.preValidateUpload(fileModel);\n        }\n\n        this.uploads.push(upload);\n\n        const sub = upload.change\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe({\n                complete: () => {\n                    this.uploads.splice(this.uploads.indexOf(upload), 1);\n                    this.completed.emit(upload);\n                    sub.unsubscribe();\n                }\n            });\n\n        return upload;\n    }\n\n    /**\n     * pre validate upload, if validation result is invalid\n     * fill could not uploaded anymore\n     *\n     * @todo should be an action ?\n     */\n    private preValidateUpload(upload: UploadModel) {\n        const result = \"validate\" in this.validator ? this.validator.validate(upload.file) : this.validator(upload.file);\n        if (result !== null) {\n            upload.state = UploadState.INVALID;\n        }\n        upload.validationErrors = result;\n    }\n\n    /**\n     * create dummy input field to select files\n     * for security reasons, we cant trigger a file select window\n     * without it\n     */\n    private createFieldInputField(): HTMLInputElement {\n        const inputField = document.createElement(\"input\");\n        this.renderer.setAttribute(inputField, \"type\", \"file\");\n        this.renderer.setAttribute(inputField, \"multiple\", \"multiple\");\n        this.renderer.setStyle(inputField, \"display\", \"none\");\n        this.renderer.listen(inputField, \"change\", (e) => this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadItemComponent.html":{"url":"components/UploadItemComponent.html","title":"component - UploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./upload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                upload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                returnZero\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:64\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:75\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            returnZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnZero()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:105\n                \n            \n\n\n            \n                \n                    just to disable sort for keyvalue pipe\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:32\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:27\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:50\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/ui/upload-item/upload-item.component.ts:64\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if no TemplateRef is passed\nit will fallback to defaultUploadItem\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, HostListener, OnDestroy } from \"@angular/core\";\nimport { FileUpload } from \"@lib/utils/http/file-upload\";\nimport { UploadControl } from \"@lib/utils/upload-control\";\nimport { UploadModel } from \"@lib/data/upload.model\";\nimport { UploadData } from \"@lib/data/api\";\nimport { Subscription } from \"rxjs\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"upload-item.component.html\",\n    styleUrls: [\"./upload-item.component.scss\"],\n})\nexport class UploadItemComponent implements OnInit, OnDestroy {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * save subscription here,  since we have only 1 sub\n     * i think takeUntil and Subject will be to much so we could\n     * unsubscribe directly\n     */\n    private changeSub: Subscription;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * set template which should be used for upload items, if no TemplateRef is passed\n     * it will fallback to [defaultUploadItem]{@link #template}\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl instanceof TemplateRef) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.changeSub = this.fileUpload.change\n            .subscribe({\n                next: (upload: UploadModel) => this.context.data = upload.toJson()\n            });\n    }\n\n    /**\n     * if component gets destroyed remove change subscription\n     */\n    ngOnDestroy() {\n        this.changeSub.unsubscribe();\n        this.changeSub = null;\n    }\n\n    /**\n     * just to disable sort for keyvalue pipe\n     */\n    public returnZero() {\n        return 0;\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{upload.name}}\n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{upload.size | fileSize}}\n                    \n                \n            \n\n            \n            \n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n            \n        \n\n        \n        \n\n            \n            \n                \n                    {{error.value}}\n                \n            \n\n            \n                \n                    {{error}}\n                \n            \n\n            \n                \n                    {{upload.response.body.message}}\n                \n                \n                    {{upload.name}} uploaded\n                \n            \n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./upload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        margin: .5rem 0 0;\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: 1rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n        }\n    }\n\n    .upload-item--actions {\n\n        padding: .25rem;\n        display: flex;\n\n        button {\n            padding: 0;\n            background: lighten(map-get($colors, 'dark'), 25%);\n            color: map-get($colors, 'white');\n            border-radius: 50%;\n            border: 0;\n            height: 1rem; \n            width: 1rem; \n            cursor: pointer;\n            font-size: .75rem;\n            outline: none;\n\n            margin-right: .25rem;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                background: lighten(map-get($colors, 'dark'), 50%);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--footer {\n        font-size: .8rem;\n\n        .message {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 1.1rem;\n\n            &.error {\n                color: map-get($map: $colors, $key: 'red');\n            }\n\n            &.success {\n                color: map-get($map: $colors, $key: 'green');\n            }\n        }\n\n        ul {\n            margin: .5rem 0 0;\n            padding: 0;\n            list-style-type: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{upload.name}}                                                                                                                        {{upload.size | fileSize}}                                                                                                                                                                                                                                                                                                                                                                                    {{error.value}}                                                                            {{error}}                                                                            {{upload.response.body.message}}                                                    {{upload.name}} uploaded                                        '\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUploadFile], [ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.model.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    validationErrors\n                                \n                                \n                                    progress\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/upload.model.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/upload.model.ts:113\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:29\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:36\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:43\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:50\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:64\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         UploadResponse\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:57\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:78\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:71\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:92\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:85\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        validationErrors\n                    \n                \n\n                \n                    \n                        getvalidationErrors()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:100\n                                \n                            \n\n                \n                    \n                        setvalidationErrors(errors)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:96\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            errors\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/data/upload.model.ts:104\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ValidationErrors } from \"./api/validation\";\nimport { UploadState, UploadResponse, UploadData } from \"./api/upload\";\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadResponse: UploadResponse = null;\n\n    private uploadValidationErrors = null;\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: UploadResponse) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): UploadResponse {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    public set validationErrors(errors: ValidationErrors | null) {\n        this.uploadValidationErrors = errors;\n    }\n\n    public get validationErrors(): ValidationErrors | null {\n        return this.uploadValidationErrors;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            name      : this.fileName,\n            progress  : this.progress,\n            response  : this.response,\n            size      : this.fileSize,\n            state     : this.state,\n            uploaded  : this.uploaded,\n            validation: {\n                errors: this.validationErrors,\n            }\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/http/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadState, UploadResponse, UploadData, Upload} from \"@lib/data/api\";\nimport { UploadModel } from \"@lib/data/upload.model\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload implements Upload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state = UploadState.QUEUED;\n            this.upload.response = {success: false, body: null, errors: null};\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        /** should be written into model or store ? */\n        return this.upload$.asObservable();\n    }\n\n    public get data(): UploadData {\n        return this.upload.toJson();\n    }\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    public hasError(): boolean {\n        return this.upload.state === UploadState.ERROR;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.state === UploadState.INVALID;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed so server responds within 200 range\n     * status code\n     */\n    private handleResponse(res: HttpResponse) {\n\n        const uploadResponse: UploadResponse = {\n            success: res.ok,\n            body: res.body,\n            errors: null\n        };\n        this.upload.state    = UploadState.UPLOADED;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * if server not sends a status code in 2xx range this will\n     * throw an error which will handled here\n     *\n     * but we have sanitize the response message for this assume\n     * server not running ( no chance the server could send any messages )\n     * and response error will be a ProgressEvent instance, if this is the case\n     * fallback to the response.message\n     *\n     * and we could send back diffrent messages for a status like\n     *\n     * res.status(400).send(WHAT YOU WANT) so response.error will contain\n     * this array, or a string or anything else. If not see fallback.\n     */\n    private handleError(response: HttpErrorResponse) {\n\n        let errors: any[] = response.error instanceof ProgressEvent ? response.message : response.error;\n        errors = Array.isArray(errors) ? errors : [errors];\n\n        const uploadResponse: UploadResponse = {\n            success: false,\n            body: null,\n            errors\n        };\n\n        this.upload.state    = UploadState.ERROR;\n        this.upload.response = uploadResponse;\n        this.notifyObservers();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResponse.html":{"url":"interfaces/UploadResponse.html","title":"interface - UploadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadStore.html":{"url":"classes/UploadStore.html","title":"class - UploadStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/upload.store.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Upload } from \"./api/upload\";\n\nexport class UploadStore {\n\n    private uploads: Upload[] = [];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadValidation.html":{"url":"interfaces/UploadValidation.html","title":"interface - UploadValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        errors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationErrors | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from \"rxjs\";\nimport { UploadModel } from \"../upload.model\";\nimport { ValidationErrors } from \"./validation\";\n\nexport enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadResponse {\n    success: boolean;\n    errors: any;\n    body: any;\n}\n\nexport interface UploadValidation {\n    errors: ValidationErrors | null;\n}\n\nexport interface UploadData {\n    name: string;\n    progress: number;\n    response: UploadResponse;\n    size: number;\n    state: UploadState;\n    uploaded: number;\n    validation: UploadValidation;\n}\n\nexport interface Upload {\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    readonly change: Observable;\n\n    /**\n     * get upload data informations\n     */\n    readonly data: UploadData;\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    start(): void;\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    retry(): void;\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    cancel(): void;\n\n    /**\n     * return true if upload was not completed since the server\n     * sends back an error response\n     */\n    hasError(): boolean;\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    isInvalid(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadViewComponent.html":{"url":"components/UploadViewComponent.html","title":"component - UploadViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UploadViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/ui/upload-view/upload-view.ts\n\n\n    \n        Description\n    \n    \n        NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\nto setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\nor NgxFileUploadComponent. This component simply handle all events / changes from upload.\n\n    \n\n\n\n    \n        Example\n    \n    \n                \n                    \n\n                \n                \n                    \n\n{{uploadData.name}}\n\n\n\n                \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./upload-view.scss\n            \n\n\n\n            \n                templateUrl\n                upload-view.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showList\n                            \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUploadCompleted\n                            \n                            \n                                    Public\n                                onUploadsAdd\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                            \n                                validator\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:63\n                            \n                        \n                \n                    \n                        set field name for FormData Object where to find the file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :         TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:43\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:50\n                            \n                        \n                \n                    \n                        input which url should be used to upload files,\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:57\n                            \n                        \n                \n                    \n                        by default files will send through FormData Object, if set to false file will send plain into\npost body\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        validator\n                    \n                \n                \n                    \n                        Type :         Validator | ValidationFn\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:69\n                            \n                        \n                \n                    \n                        set validator\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadCompleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadCompleted(upload: Upload)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:93\n                \n            \n\n\n            \n                \n                    if state is canceled or uploaded remove it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                Upload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadsAdd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadsAdd(uploads: Upload[])\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:85\n                \n            \n\n\n            \n                \n                    new uploads has been added we need to care about this to remove\nfinished uploads from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploads\n                                    \n                                                Upload[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:79\n                            \n                        \n\n                \n                    \n                        flag list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Upload[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/ui/upload-view/upload-view.ts:74\n                            \n                        \n\n                \n                    \n                        all uploads which has been added in NgxFileUploadDirective\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, TemplateRef, Input } from \"@angular/core\";\nimport { delay } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\n\nimport { Upload } from \"../../data/api/upload\";\nimport { FileUploadItemContext } from \"@lib/ui\";\nimport { Validator, ValidationFn } from \"@lib/data/api/validation\";\n\n/**\n * NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\n * to setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\n * or NgxFileUploadComponent. This component simply handle all events / changes from upload.\n *\n * @example\n * \n * \n *\n *\n * @example\n * \n * \n *    {{uploadData.name}}\n * \n *\n * \n *\n *\n * @example\n * \n * \n */\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./upload-view.scss\"],\n    templateUrl: \"upload-view.html\"\n})\nexport class UploadViewComponent {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    /**\n     * input which url should be used to upload files,\n     * this field is mandatory\n     */\n    @Input()\n    public url: string;\n\n    /**\n     * by default files will send through FormData Object, if set to false file will send plain into\n     * post body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * set field name for FormData Object where to find the file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * set validator\n     */\n    @Input()\n    public validator: Validator | ValidationFn;\n\n    /**\n     * all uploads which has been added in [NgxFileUploadDirective]{@link ../directives/NgxFileUploadDirective.html#add}\n     */\n    public uploads: Upload[] = [];\n\n    /**\n     * flag list\n     */\n    public showList = false;\n\n    /**\n     * new uploads has been added we need to care about this to remove\n     * finished uploads from list\n     */\n    public onUploadsAdd(uploads: Upload[]) {\n        this.uploads.push(...uploads);\n        this.showList = this.uploads.length > 0;\n    }\n\n    /**\n     * if state is canceled or uploaded remove it\n     */\n    public onUploadCompleted(upload: Upload) {\n        this.removeUpload(upload);\n    }\n\n    /**\n     * remove upload from list but wait for 1 sec before it will be removed\n     */\n    private removeUpload(upload: Upload) {\n        of(upload).pipe(delay(1000))\n            .subscribe({\n                next: () => {\n                    const idx = this.uploads.indexOf(upload);\n                    this.uploads.splice(idx, 1);\n                    this.showList = this.uploads.length > 0;\n                }\n            });\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n    \n\n\n    Cancel\n    Clean Up\n    Upload\n\n\n    \n\n    \n                \n                    ./upload-view.scss\n                \n                $ngx-fileupload-icons--font-path: '../../assets/fonts' !default;\n\n@import '../../assets//scss/variables';\n@import '../../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    Drag/Drop files here or click                                Cancel    Clean Up    Upload'\n    var COMPONENTS = [{'name': 'UploadItemComponent', 'selector': 'ngx-fileupload-item'},{'name': 'UploadViewComponent', 'selector': 'ngx-fileupload'}];\n    var DIRECTIVES = [{'name': 'UploadFileDirective', 'selector': '[ngxFileUploadFile], [ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationBuilder.html":{"url":"classes/ValidationBuilder.html","title":"class - ValidationBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/utils/validation/validation.builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                and\n                            \n                            \n                                    Static\n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            and\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    and(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            or\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    or(validators: Array)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/utils/validation/validation.builder.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validators\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GroupedValidator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Validator, ValidationFn } from \"@lib/data/api/validation\";\nimport { GroupedValidator } from \"./grouped.validator\";\nimport { AndValidator } from \"./and.validator\";\nimport { OrValidator } from \"./or.validator\";\n\nexport class ValidationBuilder {\n\n    public static and(...validators: Array): GroupedValidator {\n        return new AndValidator(validators);\n    }\n\n    public static or(...validators: Array): GroupedValidator {\n        return new OrValidator(validators);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationErrors.html":{"url":"interfaces/ValidationErrors.html","title":"interface - ValidationErrors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationErrors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/data/api/validation.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validator.html":{"url":"interfaces/Validator.html","title":"interface - Validator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Validator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/data/api/validation.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/data/api/validation.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationErrors | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ValidationErrors {\n    [key: string]: any;\n}\n\nexport type ValidationFn = (file: File) => ValidationErrors | null;\n\nexport interface Validator {\n    validate(file: File): ValidationErrors | null;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/data/api/index.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            Upload\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/upload.ts\n            \n            interface\n            UploadValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            ValidationErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/api/validation.ts\n            \n            interface\n            Validator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.model.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/data/upload.store.ts\n            \n            class\n            UploadStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-file/upload-file.ts\n            \n            directive\n            UploadFileDirective\n            \n                70 %\n                (12/17)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            component\n            UploadItemComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-item/upload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/ui/upload-view/upload-view.ts\n            \n            component\n            UploadViewComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            class\n            FileUpload\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/http/file-upload.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/ui/file-size/file-size.pipe.ts\n            \n            pipe\n            FileSizePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/upload-control.ts\n            \n            class\n            UploadControl\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/and.validator.ts\n            \n            class\n            AndValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/grouped.validator.ts\n            \n            class\n            GroupedValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/or.validator.ts\n            \n            class\n            OrValidator\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/utils/validation/validation.builder.ts\n            \n            class\n            ValidationBuilder\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.2.8\n        \n            @angular/common : 8.2.8\n        \n            @angular/compiler : 8.2.8\n        \n            @angular/core : 8.2.8\n        \n            @angular/forms : 8.2.8\n        \n            @angular/platform-browser : 8.2.8\n        \n            @angular/platform-browser-dynamic : 8.2.8\n        \n            @angular/router : 8.2.8\n        \n            highlight.js : ^9.15.10\n        \n            igniteui-angular : ^8.2.2\n        \n            ngx-highlightjs : ^3.0.3\n        \n            rxjs : 6.5.3\n        \n            tslib : 1.10.0\n        \n            webdriver-manager : ^12.1.7\n        \n            zone.js : 0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 QUEUED\n                            \n                        \n                        \n                            \n                                Value : queued\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : progress\n                            \n                        \n                        \n                            \n                                 UPLOADED\n                            \n                        \n                        \n                            \n                                Value : uploaded\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nFileSizePipe\n\nFileSizePipe\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nFileSizePipe->NgxFileUploadModule\n\n\n\n\n\nUploadFileDirective\n\nUploadFileDirective\n\nNgxFileUploadModule -->\n\nUploadFileDirective->NgxFileUploadModule\n\n\n\n\n\nUploadItemComponent\n\nUploadItemComponent\n\nNgxFileUploadModule -->\n\nUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nUploadViewComponent\n\nUploadViewComponent\n\nNgxFileUploadModule -->\n\nUploadViewComponent->NgxFileUploadModule\n\n\n\n\n\nFileSizePipe \n\nFileSizePipe \n\nFileSizePipe  -->\n\nNgxFileUploadModule->FileSizePipe \n\n\n\n\n\nUploadFileDirective \n\nUploadFileDirective \n\nUploadFileDirective  -->\n\nNgxFileUploadModule->UploadFileDirective \n\n\n\n\n\nUploadItemComponent \n\nUploadItemComponent \n\nUploadItemComponent  -->\n\nNgxFileUploadModule->UploadItemComponent \n\n\n\n\n\nUploadViewComponent \n\nUploadViewComponent \n\nUploadViewComponent  -->\n\nNgxFileUploadModule->UploadViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidationFn   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/data/api/validation.ts\n    \n    \n        \n            \n                \n                    \n                    ValidationFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
