var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/FileUpload.html",[0,0.248,1,0.534]],["body/classes/FileUpload.html",[0,0.171,1,0.749,2,0.731,3,0.263,4,0.263,5,0.469,6,0.318,7,3.123,8,1.273,9,0.563,10,1.259,11,1.924,12,0.756,13,0.216,14,1.259,15,1.187,16,2.436,17,1.693,18,3.072,19,2.586,20,1.402,21,1.924,22,2.076,23,1.439,24,1.874,25,2.586,26,0.749,27,3.033,28,2.076,29,1.531,30,1.874,31,2.32,32,1.439,33,0.731,34,0.052,35,0.869,36,0.263,37,0.642,38,2.586,39,1.874,40,1.171,41,2.586,42,2.777,43,1.128,44,1.333,45,1.874,46,0.904,47,2.285,48,0.804,49,0.971,50,1.402,51,1.874,52,1.439,53,0.672,54,1.654,55,1.874,56,2.285,57,2.756,58,2.32,59,2.223,60,1.229,61,2.285,62,1.874,63,2.756,64,1.333,65,2.285,66,2.32,67,1.874,68,1.874,69,3.469,70,3.072,71,1.995,72,1,73,2.756,74,1.512,75,2.285,76,2.285,77,2.756,78,1.094,79,2.285,80,0.833,81,1.273,82,2.285,83,1.094,84,0.563,85,0.833,86,0.398,87,0.09,88,1.995,89,1.518,90,0.744,91,1.924,92,0.852,93,2.748,94,0.971,95,2.223,96,1.094,97,1.094,98,1.027,99,1.512,100,1.094,101,2.32,102,1.512,103,1.512,104,1.512,105,1.152,106,0.897,107,1.512,108,2.756,109,1.273,110,2.285,111,1.512,112,2.285,113,0.642,114,3.932,115,1.259,116,2.285,117,1.512,118,1.512,119,2.32,120,1.094,121,0.833,122,0.731,123,1.512,124,1.512,125,2.285,126,2.756,127,1.145,128,2.285,129,2.285,130,1.512,131,3.072,132,1.924,133,3.298,134,1.512,135,2.285,136,1.678,137,1.512,138,1.512,139,0.833,140,0.897,141,2.285,142,1.512,143,1.512,144,1.512,145,1.512,146,1.439,147,1.512,148,1.512,149,1.273,150,1.512,151,1.512,152,2.285,153,1.512,154,1.654,155,1.512,156,1.512,157,1.512,158,2.756,159,1.512,160,1.512,161,2.756,162,1.512,163,1.512,164,1.512,165,1.512,166,1.512,167,1.512,168,1.512,169,1.512,170,1.512,171,1.512,172,0.642,173,1.512,174,1.512,175,1.512,176,1.512,177,1.273,178,1.512,179,1.512,180,0.642,181,1.512,182,1.512,183,1.512,184,0.833,185,1.512,186,1.512,187,1.512,188,1.512,189,1.512,190,1.512,191,1.512,192,1.512,193,1.273,194,1.512,195,1.512,196,0.017,197,0.026,198,0.017]],["title/interfaces/FileUploadItemContext.html",[87,0.13,199,1.379]],["body/interfaces/FileUploadItemContext.html",[0,0.27,1,1.031,3,0.414,4,0.414,5,0.358,6,0.204,12,0.743,13,0.34,15,1.141,22,1.499,26,0.77,34,0.052,36,0.549,40,1.342,44,1.152,46,0.58,53,0.863,60,0.887,71,2.285,72,1.228,85,1.312,86,0.549,87,0.142,89,1.739,92,1.503,105,0.674,106,1.028,121,1.312,122,1.713,127,0.887,146,1.499,196,0.027,197,0.036,198,0.027,199,2.229,200,1.012,201,1.723,202,2.005,203,1.527,204,3.924,205,2.374,206,1.603,207,1.527,208,3.157,209,2.563,210,2.381,211,2.981,212,2.981,213,2.658,214,2.005,215,1.012,216,1.723,217,2.381,218,2.005,219,2.981,220,1.723,221,1.951,222,2.285,223,2.005,224,2.381,225,2.005,226,2.381,227,1.152,228,2.005,229,2.978,230,3.157,231,2.005,232,2.381,233,2.381,234,3.541,235,3.157,236,2.381,237,2.381,238,2.381,239,2.381,240,2.381,241,2.381,242,2.381,243,2.381,244,1.499,245,0.775,246,2.005,247,2.381,248,2.381,249,2.005,250,2.381,251,1.723,252,1.723,253,2.005,254,2.381,255,2.005,256,2.381,257,1.723,258,2.381,259,2.381,260,2.381,261,2.381,262,3.157,263,2.381,264,2.381,265,2.005,266,2.381,267,2.005,268,2.381,269,2.381,270,2.381,271,2.381,272,2.381,273,2.381,274,2.381]],["title/interfaces/IDataNode.html",[87,0.13,275,1.207]],["body/interfaces/IDataNode.html",[0,0.219,3,0.337,4,0.337,5,0.465,6,0.235,10,1.066,12,0.713,15,1.241,17,1.508,20,1.163,26,0.471,29,0.822,34,0.053,35,0.775,36,0.337,40,1.163,43,0.978,46,0.667,48,0.775,49,1.163,50,1.719,53,1.021,60,1.411,64,1.324,84,1.359,86,0.601,87,0.189,90,1.295,92,1.184,94,1.163,98,0.721,105,1.125,113,1.163,115,1.066,127,0.721,136,2.056,139,1.508,140,0.63,172,1.654,180,1.163,184,1.066,196,0.022,197,0.031,198,0.022,200,0.822,206,1.163,245,0.892,275,1.751,276,1.066,277,2.398,278,1.508,279,2.398,280,1.4,281,1.924,282,2.878,283,1.904,284,2.3,285,2.3,286,1.751,287,2.191,288,1.4,289,0.721,290,1.4,291,1.4,292,1.4,293,1.4,294,1.4,295,1.4,296,1.218,297,1.218,298,1.4,299,1.981,300,1.4,301,1.981,302,1.4,303,1.4,304,1.981,305,1.4,306,1.4,307,1.4,308,1.4,309,1.4,310,1.981,311,1.4,312,1.981,313,1.4,314,1.981,315,1.218,316,2.501,317,1.4,318,1.981,319,1.4,320,1.4,321,1.981,322,1.4,323,1.4,324,1.981,325,1.4,326,1.981,327,1.4,328,1.981,329,1.537,330,1.981,331,1.4,332,1.4,333,1.4,334,1.4,335,1.4,336,1.4,337,1.4,338,1.4,339,1.4,340,1.4,341,1.4,342,1.4]],["title/components/NgxFileUploadComponent.html",[207,1.06,343,1.207]],["body/components/NgxFileUploadComponent.html",[0,0.155,1,1.023,3,0.451,4,0.238,5,0.427,6,0.323,9,0.51,12,0.708,13,0.195,14,1.166,15,1.175,16,1.332,26,0.711,27,1.782,29,1.568,33,1.253,34,0.052,35,1.017,36,0.549,37,1.101,43,0.733,44,1.41,46,0.631,53,0.813,60,0.965,72,1.201,80,0.753,83,0.99,84,0.51,85,0.753,86,0.238,88,2.282,89,1.166,90,0.689,93,2.11,94,1.34,95,2.11,96,2.11,97,1.532,98,0.789,100,2.11,105,0.599,106,0.689,119,1.151,120,0.99,121,0.753,122,0.662,132,1.151,140,0.445,146,1.332,154,1.532,196,0.015,197,0.024,198,0.015,199,0.861,201,2.728,203,1.024,207,1.526,209,2.517,211,2.18,215,0.581,216,0.99,219,1.782,220,2.282,221,2.174,222,1.532,223,1.782,225,1.782,227,0.662,229,1.874,231,2.808,244,1.332,245,0.689,255,1.782,257,1.532,267,1.782,278,0.753,281,1.024,283,0.753,289,1.527,329,0.662,343,2.077,344,1.782,345,1.367,346,1.367,347,1.367,348,1.367,349,3.211,350,2.625,351,1.613,352,2.625,353,2.625,354,2.625,355,2.625,356,2.625,357,2.625,358,2.454,359,2.117,360,1.151,361,3.211,362,2.625,363,3.211,364,3.769,365,2.625,366,2.625,367,2.625,368,1.782,369,2.59,370,3.211,371,2.59,372,2.517,373,2.11,374,1.696,375,2.915,376,2.625,377,1.696,378,1.782,379,1.367,380,1.696,381,3.335,382,2.117,383,1.696,384,2.117,385,2.625,386,1.696,387,3.153,388,2.625,389,1.696,390,2.625,391,1.696,392,2.915,393,2.625,394,2.625,395,2.625,396,3.335,397,1.696,398,2.625,399,1.696,400,2.117,401,2.625,402,1.696,403,1.696,404,1.367,405,1.367,406,1.367,407,1.696,408,1.696,409,1.696,410,1.696,411,1.696,412,1.696,413,1.367,414,1.696,415,1.696,416,1.696,417,1.696,418,1.696,419,2.625,420,2.625,421,1.696,422,2.625,423,1.696,424,2.517,425,1.696,426,1.696,427,1.367,428,1.367,429,1.696,430,1.696,431,1.696,432,1.696,433,1.696,434,2.625,435,2.625,436,2.625,437,2.625,438,1.367,439,2.117,440,1.367,441,1.367,442,1.367,443,1.367,444,1.151,445,4.031,446,2.915,447,2.117,448,2.117,449,1.696,450,2.117,451,2.625,452,3.837,453,3.593,454,2.117,455,1.696,456,2.625,457,1.696,458,1.696,459,1.367,460,1.696,461,1.696,462,1.696,463,2.117,464,2.59,465,1.367,466,2.915,467,2.59,468,2.59,469,2.915,470,2.117,471,2.117,472,2.59,473,2.915,474,1.696,475,1.696,476,2.59,477,2.59,478,2.59,479,2.59,480,1.696,481,1.151,482,1.696,483,1.696,484,1.367,485,3.211,486,2.915,487,2.59,488,1.696,489,1.367,490,1.367,491,2.59,492,1.367,493,1.367,494,1.696,495,1.367,496,2.117,497,1.367,498,1.696,499,1.367,500,1.367,501,1.696,502,1.696,503,2.625,504,1.367,505,1.696,506,1.696,507,0.99,508,2.117,509,1.782,510,0.753,511,2.915,512,1.367,513,1.367,514,1.151,515,1.151,516,1.367]],["title/directives/NgxFileUploadDirective.html",[351,1.06,510,1.207]],["body/directives/NgxFileUploadDirective.html",[0,0.163,1,0.729,3,0.25,4,0.25,5,0.461,6,0.338,9,0.536,12,0.719,13,0.205,14,1.212,15,1.169,16,1.884,22,1.384,23,1.384,25,2.864,26,0.536,28,1.384,29,1.651,31,1.851,33,0.695,34,0.052,35,0.847,36,0.465,37,1.135,41,1.851,42,2.249,43,0.756,44,1.292,46,0.536,48,0.536,49,1.135,52,1.384,53,0.536,58,1.21,66,1.851,72,1.153,78,1.04,80,0.792,81,1.21,83,1.04,84,0.536,85,0.792,86,0.25,88,2.166,89,1.212,90,0.716,91,2.519,92,1.115,93,1.04,94,0.935,95,1.592,97,1.592,98,1.115,100,1.592,101,1.21,105,1.081,106,0.975,120,1.04,122,1.951,127,0.82,136,1.064,140,1.189,154,2.166,180,0.611,196,0.025,197,0.025,198,0.016,207,0.695,209,2.335,212,2.519,213,1.851,214,1.21,215,0.611,216,1.04,220,1.592,228,1.851,244,2.141,245,0.468,249,1.21,251,1.592,252,2.166,253,2.519,265,1.21,281,0.695,289,0.996,296,1.384,297,1.384,351,1.448,358,2.519,360,1.21,364,3.885,368,1.851,369,2.671,371,2.671,372,2.166,373,1.934,375,3.402,381,2.671,382,2.199,384,2.199,387,2.671,392,2.199,396,1.437,400,2.199,424,1.934,444,1.851,481,2.98,510,1.777,514,1.21,515,2.519,517,3.941,518,1.437,519,4,520,4.39,521,3.312,522,3.711,523,3.711,524,3.711,525,2.199,526,2.199,527,2.727,528,1.782,529,3.312,530,3.711,531,2.562,532,2.299,533,1.782,534,1.782,535,1.782,536,2.727,537,1.782,538,2.199,539,1.782,540,2.671,541,1.437,542,1.782,543,2.727,544,2.727,545,1.782,546,3.711,547,1.782,548,2.727,549,1.782,550,1.782,551,1.782,552,2.727,553,3.711,554,1.782,555,2.727,556,2.199,557,1.782,558,2.727,559,1.782,560,1.782,561,0.905,562,1.782,563,1.782,564,1.782,565,1.782,566,1.782,567,2.727,568,3.312,569,1.782,570,1.782,571,1.782,572,1.782,573,1.782,574,1.782,575,1.782,576,1.782,577,1.782,578,1.782,579,1.782,580,1.782,581,1.782,582,1.782,583,1.782,584,1.782,585,1.782,586,3.312,587,1.782,588,1.782,589,1.782,590,1.782,591,1.782,592,1.782,593,1.782,594,1.782,595,1.782,596,1.782,597,2.727,598,1.782,599,1.782,600,1.782,601,1.782,602,1.782,603,1.782,604,1.782,605,1.782,606,1.782,607,1.782,608,1.782,609,1.782,610,1.782,611,1.782,612,1.782,613,1.782,614,2.727,615,1.782,616,1.782,617,1.782,618,1.782,619,1.782,620,1.782,621,1.782,622,1.782,623,1.782,624,1.782,625,1.21,626,1.782,627,1.782,628,1.782,629,1.782,630,1.782,631,1.782,632,1.782,633,1.782,634,1.782,635,1.782,636,1.782,637,1.782,638,1.782,639,1.782]],["title/components/NgxFileUploadItemComponent.html",[207,1.06,227,1.06]],["body/components/NgxFileUploadItemComponent.html",[0,0.16,1,1.041,3,0.246,4,0.246,5,0.246,6,0.319,9,0.528,12,0.76,13,0.31,15,1.076,21,1.831,22,0.891,26,0.53,29,1.544,33,1.052,34,0.052,35,0.907,36,0.461,37,0.924,40,1.262,43,0.615,44,1.281,46,0.345,48,0.345,53,0.781,60,0.987,71,2.319,72,1.101,85,0.78,86,0.378,87,0.084,89,1.864,92,1.107,98,0.81,105,0.401,106,0.708,121,0.78,122,1.55,127,0.528,146,1.369,149,1.192,172,0.924,193,1.192,196,0.016,197,0.025,198,0.016,199,1.666,201,2.698,202,1.192,203,1.052,204,2.174,205,1.369,206,0.924,207,1.281,208,2.647,209,1.916,210,1.416,211,2.5,212,2.5,213,1.831,214,1.192,215,0.602,216,1.025,217,1.416,218,1.192,219,2.847,220,2.319,221,2.096,222,2.962,223,1.831,224,2.174,225,1.831,226,2.647,227,1.437,228,1.831,229,3.022,230,2.97,231,2.965,232,2.647,233,2.174,234,3.382,235,2.647,236,2.647,237,2.647,238,2.647,239,1.416,240,1.416,241,1.416,242,1.416,243,2.174,244,1.869,245,0.708,246,1.831,247,2.174,248,2.174,249,1.192,250,1.416,251,1.574,252,1.025,253,1.192,254,1.416,255,2.5,256,2.647,257,1.916,258,1.416,259,1.416,260,1.416,261,1.416,262,2.647,263,1.416,264,1.416,265,1.192,266,1.416,267,1.192,268,1.416,269,1.416,270,1.416,271,1.416,272,1.416,273,1.416,274,1.416,278,1.198,283,1.636,289,1.313,315,1.369,329,1.437,343,0.78,344,1.831,345,1.416,346,1.416,347,1.416,351,0.685,359,2.174,360,1.192,368,1.831,372,1.025,424,1.574,438,1.416,439,2.97,440,1.416,441,1.416,442,1.416,443,1.416,444,1.192,445,3.727,446,2.174,447,1.416,448,2.97,450,1.416,452,3.727,453,3.204,454,2.647,459,2.174,463,3.204,464,3.204,465,2.174,466,2.97,467,1.416,468,1.416,469,1.416,470,2.174,471,1.416,472,1.416,473,1.416,476,2.97,477,3.204,478,3.204,479,2.647,484,2.174,486,2.174,487,1.416,489,2.647,490,2.174,491,2.97,492,3.204,493,1.416,495,1.416,496,3.522,497,2.174,499,2.174,500,2.174,504,1.416,507,1.025,508,2.174,509,1.831,510,0.78,511,2.97,512,1.416,513,1.416,514,1.192,515,1.192,516,1.416,525,2.174,526,2.174,538,1.416,540,1.416,541,1.416,640,2.696,641,2.696,642,2.696,643,1.756,644,1.756,645,1.756,646,1.756,647,1.756,648,1.756,649,2.696,650,2.174,651,2.696,652,3.282,653,3.282,654,1.756,655,1.756,656,1.756,657,1.756,658,1.756,659,1.756,660,3.682,661,1.756,662,1.756,663,1.756,664,3.282,665,2.696,666,1.756,667,1.756,668,1.756,669,1.756,670,2.696,671,1.756,672,1.756,673,1.756,674,1.756,675,1.756,676,1.756,677,1.756,678,1.756,679,1.756,680,1.756,681,2.696,682,3.282,683,2.696,684,2.696,685,2.696,686,2.696,687,2.696,688,2.696,689,2.696,690,1.756,691,1.756,692,1.756,693,1.756,694,2.696,695,1.756,696,1.756,697,1.756,698,1.756,699,1.756,700,1.756,701,1.756,702,1.756,703,1.756,704,1.756,705,1.756,706,1.756]],["title/modules/NgxFileUploadModule.html",[707,1.844,708,1.586]],["body/modules/NgxFileUploadModule.html",[0,0.317,1,0.682,3,0.487,4,0.487,5,0.397,6,0.24,34,0.052,59,2.026,72,1.407,78,2.026,86,0.487,196,0.032,197,0.04,198,0.032,215,1.19,227,2.145,343,2.443,351,2.145,406,2.799,507,2.026,707,2.356,708,3.222,709,2.356,710,2.026,711,3.824,712,2.799,713,2.799,714,3.824,715,2.799,716,2.799,717,2.799,718,3.504,719,2.799,720,3.471,721,3.471,722,4.345,723,4.345,724,2.799,725,4.345,726,4.345,727,2.799,728,3.471,729,4.345,730,2.799,731,2.799,732,4.345,733,3.471,734,3.471,735,3.471,736,3.471]],["title/interfaces/NgxFileUploadValidator.html",[87,0.13,532,1.379]],["body/interfaces/NgxFileUploadValidator.html",[1,0.943,2,1.39,3,0.5,4,0.5,5,0.496,6,0.305,9,1.071,12,0.62,13,0.41,14,1.962,29,1.221,32,1.809,33,1.39,34,0.052,35,0.813,36,0.5,37,1.221,43,0.813,46,0.7,48,0.868,50,1.221,52,2.242,53,0.7,54,2.578,72,0.936,86,0.674,87,0.241,90,0.936,106,0.936,113,1.221,140,0.936,196,0.04,197,0.04,198,0.033,200,1.221,215,1.221,221,2.229,286,1.583,378,2.998,531,2.801,532,2.242,561,2.436,625,3.406,737,2.08,738,3.561,739,3.561,740,3.561,741,3.561,742,3.561,743,3.563,744,3.561,745,2.801,746,2.998,747,2.874,748,2.874,749,2.419]],["title/interfaces/Response.html",[87,0.13,287,1.207]],["body/interfaces/Response.html",[0,0.217,3,0.333,4,0.333,5,0.463,6,0.164,10,1.054,12,0.712,13,0.273,15,1.239,17,1.496,20,1.154,26,0.466,34,0.053,35,0.768,36,0.549,40,1.154,43,0.973,46,0.662,48,0.77,49,1.154,50,1.714,53,1.018,60,1.406,64,1.314,84,1.353,86,0.598,87,0.188,90,1.263,92,1.177,94,1.154,98,1.281,105,1.122,113,1.154,115,1.054,127,0.713,136,2.053,139,1.496,140,0.623,172,1.649,180,1.154,184,1.894,196,0.022,197,0.031,198,0.022,200,0.813,203,1.314,206,1.154,245,0.884,275,1.894,276,1.054,278,1.054,280,1.384,281,1.918,282,2.96,283,1.894,284,2.285,285,2.285,286,1.74,287,2.222,288,1.384,289,0.713,290,1.384,291,1.384,292,1.384,293,1.384,294,1.384,295,1.384,296,1.204,297,1.204,298,1.384,299,1.965,300,1.384,301,1.965,302,1.384,303,1.384,304,1.965,305,1.384,306,1.384,307,1.384,308,1.384,309,1.384,310,1.965,311,1.384,312,1.965,313,1.384,314,1.965,315,1.204,316,2.488,317,1.384,318,1.965,319,1.384,320,1.384,321,1.965,322,1.384,323,1.384,324,1.965,325,1.384,326,1.965,327,1.384,328,1.965,329,1.527,330,1.965,331,1.384,332,1.384,333,1.384,334,1.384,335,1.384,336,1.384,337,1.384,338,1.384,339,1.384,340,1.384,341,1.384,342,1.384]],["title/classes/UploadControl.html",[0,0.248,205,1.379]],["body/classes/UploadControl.html",[0,0.264,1,0.997,2,1.127,3,0.405,4,0.405,5,0.353,6,0.334,9,0.868,11,3.374,12,0.733,13,0.332,14,1.714,15,1.213,16,2.452,19,3.374,20,1.703,23,1.959,29,1.589,33,1.809,34,0.052,35,1.058,36,0.651,37,1.589,38,2.619,43,0.991,44,1.695,48,0.758,72,1.013,80,1.284,86,0.405,96,1.686,105,0.88,109,2.619,121,1.284,122,1.98,177,2.619,180,1.322,196,0.026,197,0.035,198,0.026,205,1.959,218,2.619,222,2.252,229,2.252,244,1.467,245,0.759,246,2.949,251,3.104,252,1.686,257,2.252,289,0.868,358,2.619,379,2.33,405,2.33,413,2.33,427,2.33,428,2.33,481,1.961,509,1.961,556,3.111,750,3.895,751,2.33,752,3.858,753,3.858,754,4.636,755,2.889,756,2.889,757,3.858,758,2.889,759,3.858,760,3.858,761,3.858,762,3.858,763,4.344,764,3.858,765,2.889,766,3.858,767,2.889,768,2.889,769,2.889,770,3.858,771,2.889,772,2.889,773,2.889,774,2.889,775,2.889,776,2.889,777,2.889,778,2.889]],["title/interfaces/UploadData.html",[87,0.13,206,0.931]],["body/interfaces/UploadData.html",[0,0.206,3,0.317,4,0.317,5,0.458,6,0.156,10,1.002,12,0.704,13,0.26,15,1.232,17,1.962,20,1.113,26,0.443,34,0.052,35,1.008,36,0.704,40,1.113,43,0.951,46,0.639,48,0.749,49,1.113,50,1.801,53,1.009,60,1.485,64,1.268,84,1.425,86,0.585,87,0.183,90,1.334,92,1.145,94,1.113,98,0.678,105,1.107,113,1.113,115,1.002,127,0.678,136,2.036,139,1.444,140,0.592,172,1.719,180,1.113,184,1.002,196,0.021,197,0.03,198,0.021,200,0.773,203,1.268,206,1.305,245,0.853,275,1.444,276,1.002,278,1.002,280,1.317,281,1.982,282,3.046,283,2.106,284,2.685,285,2.685,286,2.044,287,2.156,288,1.317,289,0.678,290,1.317,291,1.317,292,1.317,293,1.317,294,1.317,295,1.317,296,1.145,297,1.145,298,1.317,299,1.896,300,1.317,301,1.896,302,1.317,303,1.317,304,1.896,305,1.317,306,1.317,307,1.317,308,1.317,309,1.317,310,1.896,311,1.317,312,1.896,313,1.317,314,1.896,315,1.145,316,2.432,317,1.317,318,1.896,319,1.317,320,1.317,321,1.896,322,1.317,323,1.317,324,1.896,325,1.317,326,1.896,327,1.317,328,1.896,329,1.486,330,1.896,331,1.317,332,1.317,333,1.317,334,1.317,335,1.317,336,1.317,337,1.317,338,1.317,339,1.317,340,1.317,341,1.317,342,1.317]],["title/classes/UploadModel.html",[0,0.248,26,0.534]],["body/classes/UploadModel.html",[0,0.169,2,0.721,3,0.259,4,0.259,5,0.479,6,0.366,9,0.556,10,1.246,12,0.736,13,0.213,14,1.246,15,1.216,17,1.246,20,0.961,21,1.904,23,0.938,26,0.551,29,1.806,33,1.787,34,0.052,35,1.091,36,0.643,37,1.57,40,1.296,43,1.224,44,1.735,46,0.666,48,0.799,49,0.961,50,1.778,53,1.014,60,1.461,64,1.094,84,1.286,86,0.531,87,0.163,90,1.276,92,1.286,94,0.961,98,0.556,105,1.045,113,1.296,115,0.821,127,0.556,136,1.982,139,1.506,140,0.486,172,1.607,180,1.296,184,0.821,196,0.017,197,0.026,198,0.017,206,1.161,245,0.737,275,1.246,276,0.821,278,0.821,280,1.079,281,1.945,282,2.876,283,1.902,284,2.207,285,2.373,286,1.806,287,2.238,288,1.079,289,0.556,290,1.079,291,1.079,292,1.079,293,1.079,294,1.079,295,1.079,296,1.424,297,1.424,298,1.637,299,1.637,300,1.637,301,2.373,302,1.637,303,1.079,304,2.373,305,1.079,306,1.637,307,1.978,308,1.079,309,1.079,310,1.637,311,1.079,312,1.637,313,1.079,314,1.637,315,1.424,316,2.674,317,1.079,318,1.637,319,1.637,320,1.079,321,1.637,322,1.978,323,1.079,324,1.637,325,1.079,326,1.637,327,1.637,328,1.637,329,1.322,330,1.637,331,1.079,332,1.079,333,1.079,334,1.079,335,2.207,336,1.079,337,1.079,338,1.079,339,1.079,340,1.079,341,1.079,342,1.079,779,1.849,780,1.849,781,1.849,782,1.849,783,1.849,784,1.849,785,1.849,786,1.849,787,1.849,788,1.849,789,1.849,790,1.849,791,1.849,792,1.849,793,1.849,794,1.849,795,1.849,796,1.849,797,1.849,798,1.849,799,1.849,800,1.849,801,1.849,802,1.849,803,1.849,804,1.849,805,1.849,806,1.849,807,1.849,808,1.849,809,1.849,810,1.849,811,1.849,812,1.849,813,1.849,814,1.849,815,1.849,816,1.849,817,1.849,818,1.849]],["title/interfaces/UploadOptions.html",[28,1.379,87,0.13]],["body/interfaces/UploadOptions.html",[0,0.189,1,0.601,3,0.291,4,0.291,5,0.461,6,0.143,7,1.407,8,1.407,9,0.623,10,0.921,11,1.407,12,0.75,13,0.238,15,1.054,16,2.167,17,0.921,18,1.671,19,1.407,20,1.047,22,1.551,23,1.052,25,2.074,26,0.601,27,3.135,28,2.032,31,2.074,32,1.052,34,0.053,35,0.828,36,0.562,37,1.047,38,2.463,40,1.047,41,2.463,42,2.718,43,0.828,46,0.878,47,1.671,48,0.787,49,0.71,50,1.243,52,1.052,53,0.601,54,1.21,56,1.671,57,2.463,58,2.074,59,1.783,60,1.09,61,1.671,63,2.463,64,1.192,65,1.671,66,2.074,69,3.228,70,2.926,71,1.783,72,1.051,73,2.926,74,1.671,75,2.463,76,2.463,77,2.926,78,1.21,79,2.463,80,0.921,81,1.407,82,2.463,83,1.21,84,0.623,85,0.921,86,0.429,87,0.1,88,2.695,89,1.779,90,1.051,91,2.463,92,1.09,93,2.947,94,1.047,95,2.337,96,1.21,97,1.21,98,1.09,99,1.671,100,1.21,101,2.463,102,1.671,103,1.671,104,1.671,105,1.174,106,0.953,107,1.671,108,2.926,109,1.407,110,2.463,111,1.671,112,2.463,113,0.71,114,4.023,115,1.357,116,2.463,117,1.671,118,1.671,119,2.463,120,1.21,121,0.921,122,0.809,123,1.671,124,1.671,125,2.463,126,2.926,127,1.203,128,2.463,129,2.463,130,1.671,131,3.228,132,2.074,133,3.442,134,1.671,135,2.463,136,1.742,137,1.671,138,1.671,139,0.921,140,0.953,141,2.463,142,1.671,143,1.671,144,1.671,145,1.671,146,1.551,147,1.671,148,1.671,149,1.407,150,1.671,151,1.671,152,2.463,153,1.671,154,1.783,155,1.671,156,1.671,157,1.671,158,2.926,159,1.671,160,1.671,161,2.926,162,1.671,163,1.671,164,1.671,165,1.671,166,1.671,167,1.671,168,1.671,169,1.671,170,1.671,171,1.671,172,0.71,173,1.671,174,1.671,175,1.671,176,1.671,177,1.407,178,1.671,179,1.671,180,0.71,181,1.671,182,1.671,183,1.671,184,0.921,185,1.671,186,1.671,187,1.671,188,1.671,189,1.671,190,1.671,191,1.671,192,1.671,193,1.407,194,1.671,195,1.671,196,0.019,197,0.028,198,0.019,200,0.71,203,1.192,819,3.055]],["title/interfaces/ValidationResult.html",[87,0.13,745,1.586]],["body/interfaces/ValidationResult.html",[1,0.945,2,1.395,3,0.502,4,0.502,5,0.481,6,0.247,9,1.074,12,0.674,13,0.411,32,1.815,34,0.052,36,0.621,46,0.87,48,1.034,50,1.647,52,1.815,53,0.87,54,2.931,72,0.939,86,0.674,87,0.231,90,1.262,106,0.939,113,1.721,140,0.939,196,0.044,197,0.04,198,0.033,200,1.225,203,1.726,215,1.225,221,2.232,286,1.966,378,2.427,531,2.931,532,1.815,561,2.246,625,2.427,737,2.086,738,2.883,739,2.883,740,2.883,741,2.883,742,2.883,744,2.883,745,2.805,746,3.004,747,3.568,748,3.568,749,2.427]],["title/coverage.html",[820,2.985]],["body/coverage.html",[0,0.441,1,0.948,5,0.329,6,0.384,7,3.019,8,3.019,26,0.708,28,1.829,34,0.051,36,0.506,87,0.256,106,0.946,196,0.033,197,0.041,198,0.033,199,1.829,201,2.815,202,3.019,205,1.829,206,1.235,207,1.735,227,1.406,275,1.601,276,2.238,287,1.601,289,1.514,329,2.104,343,1.601,348,2.905,351,1.406,510,1.601,517,2.905,518,2.905,532,1.829,561,1.829,737,2.815,745,2.103,750,2.905,751,2.905,820,2.905,821,3.603,822,3.603,823,3.603,824,4.446,825,4.446,826,3.603,827,3.603,828,3.603,829,4.823,830,3.603,831,3.603,832,3.603,833,3.603,834,3.603,835,3.603,836,3.603,837,3.603,838,3.603]],["title/dependencies.html",[710,1.906,839,2.272]],["body/dependencies.html",[34,0.052,80,1.804,196,0.037,197,0.044,198,0.037,215,1.391,404,3.274,710,2.37,724,3.274,727,3.853,730,3.274,731,3.274,840,5.51,841,4.059,842,4.059,843,3.853,844,4.059,845,4.059,846,4.059,847,4.059,848,4.059,849,4.059,850,4.059,851,4.059,852,4.059,853,4.059,854,4.059]],["title/miscellaneous/enumerations.html",[855,1.326,856,2.633]],["body/miscellaneous/enumerations.html",[6,0.285,13,0.475,20,1.653,34,0.051,48,0.948,49,1.653,64,1.882,84,1.45,172,1.653,196,0.038,197,0.044,198,0.038,245,1.267,276,1.833,281,1.882,373,3.203,855,2.408,856,3.327,857,4.126]],["title/index.html",[13,0.313,858,2.191]],["body/index.html",[2,1.534,34,0.05,59,2.296,196,0.036,197,0.043,198,0.036,200,1.348,227,2.121,343,2.416,344,2.67,351,2.121,424,2.737,507,2.296,510,1.748,650,3.172,707,3.184,708,3.248,710,2.296,711,3.172,712,3.172,713,3.172,714,3.172,715,3.172,716,3.172,717,3.172,718,3.782,719,3.172,858,3.172,859,3.933,860,3.933]],["title/modules.html",[709,2.513]],["body/modules.html",[34,0.045,196,0.04,197,0.045,198,0.04,708,2.547,709,2.962,843,3.519,861,4.363,862,4.363,863,4.363]],["title/miscellaneous/variables.html",[855,1.326,864,2.633]],["body/miscellaneous/variables.html",[2,1.655,5,0.388,6,0.293,12,0.595,13,0.488,32,2.153,34,0.047,106,1.114,196,0.039,197,0.045,198,0.039,221,1.885,372,2.476,373,2.476,531,2.861,561,2.488,737,2.476,746,2.88,749,2.88,855,2.476,864,3.42,865,4.241]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":289,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{}}}],["0.9.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":424,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["1.10.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":329,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{}}}],["12.1.5",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["12/12",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":668,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["1px",{"_index":453,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["1rem",{"_index":465,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["2",{"_index":650,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["2.5rem",{"_index":482,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["2/2",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":699,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["25,safari5.1",{"_index":672,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["25rem",{"_index":652,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["2e2e2e",{"_index":498,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["2rem",{"_index":705,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["3",{"_index":859,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["3rem",{"_index":503,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["4/5",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":485,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["4rem",{"_index":487,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["5",{"_index":693,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["50",{"_index":492,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["50%,#f7f7f7",{"_index":670,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["5rem",{"_index":464,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["6",{"_index":673,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["6.5.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":860,"title":{},"body":{"index.html":{}}}],["7/7",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["75rem",{"_index":688,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["8.1.2",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["8rem",{"_index":497,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["9.0.2",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["abort",{"_index":65,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["absolute",{"_index":691,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["accessors",{"_index":21,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadModel.html":{}}}],["action",{"_index":494,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["actions",{"_index":686,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["actual_component",{"_index":516,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["add",{"_index":481,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{}}}],["added",{"_index":392,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["affect",{"_index":247,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["again",{"_index":58,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["align",{"_index":472,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["allowed",{"_index":703,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["angular",{"_index":730,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/animations",{"_index":404,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"dependencies.html":{}}}],["angular/common",{"_index":724,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":78,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{}}}],["angular/compiler",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":215,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":727,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":402,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["animate(250",{"_index":412,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["animations",{"_index":407,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["anymore",{"_index":627,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["anything",{"_index":248,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["arguments",{"_index":540,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["array.from(event.datatransfer.files",{"_index":596,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["array.from(this.fileselect.files",{"_index":635,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["array.isarray(validation",{"_index":576,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["assets//scss/variables",{"_index":442,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["assets/fonts",{"_index":441,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["assets/scss/icons",{"_index":443,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["auto",{"_index":449,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["background",{"_index":496,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["basis",{"_index":462,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["before",{"_index":427,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["begin",{"_index":558,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["behaviorsubject",{"_index":79,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["behaviorsubject(this.upload",{"_index":111,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["bind",{"_index":238,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["block",{"_index":495,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["body",{"_index":98,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["boolean",{"_index":50,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["bootstrap",{"_index":712,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["border",{"_index":452,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["bottom",{"_index":467,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["bound",{"_index":235,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["box",{"_index":456,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["break",{"_index":161,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["broken",{"_index":556,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{}}}],["browse",{"_index":863,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":843,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":728,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["browseranimationsmodule",{"_index":726,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["browsers",{"_index":662,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["build",{"_index":138,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["button",{"_index":698,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["byte",{"_index":302,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["bytes",{"_index":315,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["called",{"_index":744,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["cancel",{"_index":16,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["cancelall",{"_index":522,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["canceled",{"_index":245,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"miscellaneous/enumerations.html":{}}}],["care",{"_index":394,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["case",{"_index":158,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["center",{"_index":473,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["chance",{"_index":762,"title":{},"body":{"classes/UploadControl.html":{}}}],["change",{"_index":22,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["changed",{"_index":71,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["changes",{"_index":357,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["child",{"_index":469,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["chrome10",{"_index":671,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["chrome26",{"_index":678,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["class",{"_index":0,"title":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/ValidationResult.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clean",{"_index":436,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["cleanall",{"_index":523,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["clear",{"_index":636,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["click",{"_index":244,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["click(event",{"_index":541,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["cluster_ngxfileuploadmodule",{"_index":715,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_declarations",{"_index":716,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["cluster_ngxfileuploadmodule_exports",{"_index":717,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["code",{"_index":184,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["color",{"_index":476,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["colors",{"_index":500,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["column",{"_index":447,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["commonmodule",{"_index":723,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["complete",{"_index":41,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["completed",{"_index":180,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["completes",{"_index":166,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["completeupload",{"_index":189,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["component",{"_index":207,"title":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":512,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["components",{"_index":344,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"index.html":{}}}],["components/ngx",{"_index":732,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["components/ngxfileuploaditem.html",{"_index":769,"title":{},"body":{"classes/UploadControl.html":{}}}],["connection",{"_index":760,"title":{},"body":{"classes/UploadControl.html":{}}}],["const",{"_index":140,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["constructor(file",{"_index":298,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["constructor(fileupload",{"_index":755,"title":{},"body":{"classes/UploadControl.html":{}}}],["constructor(http",{"_index":24,"title":{},"body":{"classes/FileUpload.html":{}}}],["constructor(httpclient",{"_index":528,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["contain",{"_index":350,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["contains",{"_index":47,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["content",{"_index":475,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["context",{"_index":234,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["context.ctrl",{"_index":753,"title":{},"body":{"classes/UploadControl.html":{}}}],["control",{"_index":218,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["control.ts",{"_index":751,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["control.ts:19",{"_index":756,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:34",{"_index":758,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:42",{"_index":765,"title":{},"body":{"classes/UploadControl.html":{}}}],["control.ts:50",{"_index":767,"title":{},"body":{"classes/UploadControl.html":{}}}],["coverage",{"_index":820,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":31,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["creates",{"_index":296,"title":{},"body":{"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["createupload(file",{"_index":610,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["createuploadbody",{"_index":147,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["ctrl",{"_index":204,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["current",{"_index":40,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["cursor",{"_index":470,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["custom",{"_index":378,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["d2d2d2",{"_index":455,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["dark",{"_index":479,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["dashed",{"_index":483,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["data",{"_index":92,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["declarations",{"_index":711,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["default",{"_index":372,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"miscellaneous/variables.html":{}}}],["defaultuploaditem",{"_index":641,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["defaultuploaditem]{@link",{"_index":258,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["defined",{"_index":29,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}}}],["defines",{"_index":102,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["delay",{"_index":405,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["delete",{"_index":188,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["dependencies",{"_index":710,"title":{"dependencies.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["destroyed",{"_index":568,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["direction",{"_index":446,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["directive",{"_index":510,"title":{"directives/NgxFileUploadDirective.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":514,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["directives/ngx",{"_index":733,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["directives/ngxfileuploaddirective.html#add",{"_index":416,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["directly",{"_index":355,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["disabled",{"_index":504,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["display",{"_index":231,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["documentation",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":346,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["dont",{"_index":246,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["download",{"_index":57,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["downloads",{"_index":552,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drag",{"_index":519,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drag/drop",{"_index":434,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["dragevent",{"_index":546,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dragover",{"_index":527,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dragover(event",{"_index":545,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drop",{"_index":520,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["drop(event",{"_index":549,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["dynamic",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["e4e4e4",{"_index":653,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["edit",{"_index":655,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["editor/#ffffff+50,f7f7f7+100",{"_index":659,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["element",{"_index":509,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["elementref",{"_index":560,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ellipsis",{"_index":685,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["emit",{"_index":233,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["emits",{"_index":103,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["enabled",{"_index":101,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["endpoint",{"_index":536,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ensure",{"_index":243,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["enum",{"_index":280,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["enumerations",{"_index":856,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":48,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/enumerations.html":{}}}],["error(iserror",{"_index":317,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["error.message",{"_index":171,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["errors",{"_index":61,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event",{"_index":122,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["event.loaded",{"_index":176,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["event.preventdefault",{"_index":253,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":254,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["event.stoppropagation",{"_index":252,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["event.tostate",{"_index":423,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["event.type",{"_index":157,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["eventemitter",{"_index":212,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["events",{"_index":146,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["example",{"_index":358,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{}}}],["export",{"_index":86,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["exportas",{"_index":563,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["exports",{"_index":714,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["f7f7f7",{"_index":666,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["fadeinout",{"_index":408,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["failed",{"_index":759,"title":{},"body":{"classes/UploadControl.html":{}}}],["false",{"_index":94,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["fdfdfd",{"_index":660,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["ff16",{"_index":677,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["ff3.6",{"_index":667,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["field",{"_index":375,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filemodel",{"_index":614,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filename",{"_index":304,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["files",{"_index":381,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["files.map((file",{"_index":604,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileselect",{"_index":572,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filesize",{"_index":301,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["filetype",{"_index":307,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["fileuplad",{"_index":734,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileuplad.ts",{"_index":518,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"coverage.html":{}}}],["fileuplad.ts:104",{"_index":557,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:111",{"_index":551,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:121",{"_index":554,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:134",{"_index":547,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:143",{"_index":550,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:157",{"_index":542,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:31",{"_index":539,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:41",{"_index":535,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:48",{"_index":537,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:55",{"_index":534,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileuplad.ts:75",{"_index":533,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileupload",{"_index":1,"title":{"classes/FileUpload.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{}}}],["fileupload'},{'name",{"_index":513,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["fileupload(this.httpclient",{"_index":616,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["fileupload.component",{"_index":735,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload.component.html",{"_index":362,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.scss",{"_index":361,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts",{"_index":348,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"coverage.html":{}}}],["fileupload.component.ts:100",{"_index":386,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:106",{"_index":389,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:54",{"_index":377,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:61",{"_index":380,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:68",{"_index":383,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:74",{"_index":374,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:79",{"_index":399,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:84",{"_index":397,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload.component.ts:92",{"_index":391,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["fileupload/components/ngx",{"_index":201,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["fileupload/directives/ngx",{"_index":517,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"coverage.html":{}}}],["fileupload/model/upload.ts",{"_index":276,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileupload/model/upload.ts:105",{"_index":796,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:112",{"_index":794,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:119",{"_index":800,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:126",{"_index":798,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:133",{"_index":804,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:140",{"_index":802,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:147",{"_index":808,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:154",{"_index":806,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:158",{"_index":812,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:165",{"_index":810,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:169",{"_index":816,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:173",{"_index":814,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:177",{"_index":818,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:186",{"_index":780,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:23",{"_index":279,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["fileupload/model/upload.ts:51",{"_index":779,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:63",{"_index":782,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:70",{"_index":784,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:77",{"_index":786,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:84",{"_index":788,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:91",{"_index":792,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/model/upload.ts:98",{"_index":790,"title":{},"body":{"classes/UploadModel.html":{}}}],["fileupload/ngx",{"_index":720,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["fileupload/services/file",{"_index":7,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["fileupload/services/upload",{"_index":750,"title":{},"body":{"classes/UploadControl.html":{},"coverage.html":{}}}],["fileupload/services/validation.ts",{"_index":737,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileupload/services/validation.ts:26",{"_index":743,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{}}}],["fileuploaditemcontext",{"_index":199,"title":{"interfaces/FileUploadItemContext.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["fill",{"_index":626,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["filter",{"_index":82,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["find",{"_index":376,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["finished",{"_index":395,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["first",{"_index":502,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["flag",{"_index":398,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["flex",{"_index":445,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["font",{"_index":439,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["footer",{"_index":493,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["form",{"_index":91,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata",{"_index":93,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["formdata.append(label",{"_index":151,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["formdataname",{"_index":369,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["get($colors",{"_index":478,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["get($map",{"_index":499,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["getchange",{"_index":67,"title":{},"body":{"classes/FileUpload.html":{}}}],["geterror",{"_index":801,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfile",{"_index":781,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilename",{"_index":785,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfilesize",{"_index":783,"title":{},"body":{"classes/UploadModel.html":{}}}],["getfiletype",{"_index":787,"title":{},"body":{"classes/UploadModel.html":{}}}],["getisvalid",{"_index":809,"title":{},"body":{"classes/UploadModel.html":{}}}],["getmessage",{"_index":813,"title":{},"body":{"classes/UploadModel.html":{}}}],["getprogress",{"_index":817,"title":{},"body":{"classes/UploadModel.html":{}}}],["getresponse",{"_index":789,"title":{},"body":{"classes/UploadModel.html":{}}}],["gets",{"_index":567,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["getstate",{"_index":793,"title":{},"body":{"classes/UploadModel.html":{}}}],["getsuccess",{"_index":805,"title":{},"body":{"classes/UploadModel.html":{}}}],["getuploaded",{"_index":797,"title":{},"body":{"classes/UploadModel.html":{}}}],["give",{"_index":761,"title":{},"body":{"classes/UploadControl.html":{}}}],["gradient",{"_index":657,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["gradient(to",{"_index":674,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["gradient(top",{"_index":665,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["green",{"_index":704,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["grow",{"_index":461,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["handle",{"_index":154,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["handleevent(event",{"_index":777,"title":{},"body":{"classes/UploadControl.html":{}}}],["handlefileselect(files",{"_index":603,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["handlehttperror(error",{"_index":170,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlehttpevent(event",{"_index":155,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleprogress(event",{"_index":173,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleresponse(res",{"_index":181,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handlesent",{"_index":178,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["handleuploadchange",{"_index":365,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["handleuploadchange(upload",{"_index":385,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["happen",{"_index":773,"title":{},"body":{"classes/UploadControl.html":{}}}],["haserror",{"_index":17,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["header",{"_index":681,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["height",{"_index":489,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["here",{"_index":435,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["hidden",{"_index":459,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["host",{"_index":444,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener",{"_index":214,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener(\"click",{"_index":249,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["hostlistener(\"dragover",{"_index":592,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["hostlistener(\"drop",{"_index":594,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["hostlisteners",{"_index":526,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["html",{"_index":508,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["htmlinputelement",{"_index":573,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["http",{"_index":38,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["httpclient",{"_index":25,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["httpclientmodule",{"_index":725,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["httperrorresponse",{"_index":77,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpevent",{"_index":73,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype",{"_index":74,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.response",{"_index":164,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.sent",{"_index":159,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpeventtype.uploadprogress",{"_index":162,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpprogressevent",{"_index":75,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["httpresponse",{"_index":76,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["https://colorzilla.com/gradient",{"_index":658,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["icon",{"_index":480,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["icons",{"_index":438,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["idatanode",{"_index":275,"title":{"interfaces/IDataNode.html":{}},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{}}}],["identifier",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":431,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ie10",{"_index":676,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["implemented",{"_index":738,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["implements",{"_index":228,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["import",{"_index":72,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["imports",{"_index":736,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":277,"title":{},"body":{"interfaces/IDataNode.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["informations",{"_index":266,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["inheritdoc",{"_index":269,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["inject",{"_index":559,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["inject(ngx_fileupload_validator",{"_index":574,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["injected",{"_index":570,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["injectiontoken",{"_index":746,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken(\"upload",{"_index":749,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["inner",{"_index":697,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["input",{"_index":209,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["input(\"ngxfileupload",{"_index":565,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["input[type=\"file",{"_index":633,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["inputfield",{"_index":632,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["inputs",{"_index":368,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["instance",{"_index":297,"title":{},"body":{"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["instanceof",{"_index":778,"title":{},"body":{"classes/UploadControl.html":{}}}],["interface",{"_index":87,"title":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":200,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"index.html":{}}}],["invalid",{"_index":49,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"miscellaneous/enumerations.html":{}}}],["iscancelable",{"_index":131,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["iserror",{"_index":319,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["isinvalid",{"_index":18,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["issuccess",{"_index":284,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["isvalid",{"_index":285,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["isvalid(valid",{"_index":323,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["item",{"_index":222,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["item.component",{"_index":406,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"modules/NgxFileUploadModule.html":{}}}],["item.component.html",{"_index":224,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["item.component.scss",{"_index":226,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts",{"_index":202,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:25",{"_index":646,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:31",{"_index":643,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:36",{"_index":645,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:47",{"_index":642,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:60",{"_index":644,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["item.component.ts:72",{"_index":640,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["items",{"_index":255,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["itemstotal",{"_index":417,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["itemtemplate",{"_index":370,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["itemtpl",{"_index":232,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["justify",{"_index":474,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["key",{"_index":278,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["label",{"_index":149,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["last",{"_index":468,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["left",{"_index":694,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["legend",{"_index":507,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["lib/.../upload.ts",{"_index":857,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../validation.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/ngx",{"_index":6,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["light",{"_index":501,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(#2e2e2e",{"_index":505,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(#3e3e3e",{"_index":506,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["lighten(map",{"_index":484,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["line",{"_index":488,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["linear",{"_index":664,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["list",{"_index":396,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["listen",{"_index":607,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["listener",{"_index":543,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["literal",{"_index":819,"title":{},"body":{"interfaces/UploadOptions.html":{}}}],["ln",{"_index":629,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["manager",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["mandatory",{"_index":382,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["map",{"_index":477,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["margin",{"_index":466,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["matching",{"_index":197,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["math.round(progress",{"_index":331,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["message",{"_index":286,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/ValidationResult.html":{}}}],["message(msg",{"_index":325,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["metadata",{"_index":360,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}}}],["mime",{"_index":306,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["miscellaneous",{"_index":855,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":334,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["model/upload",{"_index":85,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["module",{"_index":707,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["modules",{"_index":709,"title":{"modules.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"modules.html":{}}}],["mouseevent",{"_index":251,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["move",{"_index":333,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["moz",{"_index":663,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["msg",{"_index":327,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["name",{"_index":35,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["need",{"_index":393,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["new",{"_index":106,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":121,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["ngmathpipesmodule",{"_index":729,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngmodule",{"_index":722,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["ngondestroy",{"_index":580,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ngoninit",{"_index":270,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngx",{"_index":221,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["ngx_fileupload_validator",{"_index":561,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ngxfileupload",{"_index":515,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["ngxfileuploadcomponent",{"_index":343,"title":{"components/NgxFileUploadComponent.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaddirective",{"_index":351,"title":{"directives/NgxFileUploadDirective.html":{}},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaddirective]{@link",{"_index":415,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ngxfileuploaditem",{"_index":379,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["ngxfileuploaditem]{@link",{"_index":413,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["ngxfileuploaditemcomponent",{"_index":227,"title":{"components/NgxFileUploadItemComponent.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"coverage.html":{},"index.html":{}}}],["ngxfileuploaditemcomponent.html#itemtpl",{"_index":414,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["ngxfileuploadmodule",{"_index":708,"title":{"modules/NgxFileUploadModule.html":{}},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{},"modules.html":{}}}],["ngxfileuploadref",{"_index":564,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ngxfileuploadvalidator",{"_index":532,"title":{"interfaces/NgxFileUploadValidator.html":{}},"body":{"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{}}}],["none",{"_index":701,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["nothing",{"_index":256,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["notification",{"_index":193,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["notified",{"_index":544,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["notify",{"_index":70,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["notifyobservers",{"_index":194,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["nowrap",{"_index":684,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["null",{"_index":127,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["number",{"_index":282,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["object",{"_index":100,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["observable",{"_index":69,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observe",{"_index":145,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["observers",{"_index":108,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["of(upload).pipe(delay(1000",{"_index":430,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["old",{"_index":661,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["onanimationdone",{"_index":366,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["onanimationdone($event",{"_index":388,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["once",{"_index":553,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onclick(event",{"_index":598,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["ondestroy",{"_index":521,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onfiledragover(event",{"_index":593,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onfiledrop(event",{"_index":595,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["onfileselect(event",{"_index":634,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["oninit",{"_index":208,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["onitemclick(event",{"_index":250,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["onuploadsadd",{"_index":367,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["onuploadsadd(uploads",{"_index":390,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["opacity",{"_index":410,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["opera12",{"_index":679,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["optional",{"_index":37,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["options",{"_index":27,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["otherwise",{"_index":637,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["out",{"_index":719,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["outline",{"_index":700,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["output",{"_index":213,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["outputs",{"_index":525,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["over",{"_index":548,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["overflow",{"_index":448,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["overview",{"_index":858,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":839,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":463,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}}}],["pass",{"_index":267,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["passed",{"_index":257,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["passes",{"_index":774,"title":{},"body":{"classes/UploadControl.html":{}}}],["path",{"_index":440,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["permalink",{"_index":654,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["pipe(takeuntil(this.destroyed",{"_index":621,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["pipes",{"_index":731,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"dependencies.html":{}}}],["plain",{"_index":384,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["pointer",{"_index":471,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["position",{"_index":689,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["post",{"_index":97,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["pre",{"_index":624,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["prevalidateupload(upload",{"_index":628,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["private",{"_index":105,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["progress",{"_index":172,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"miscellaneous/enumerations.html":{}}}],["progressbar",{"_index":687,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["properties",{"_index":203,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["provide",{"_index":739,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["providers",{"_index":713,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["queue",{"_index":569,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["queued",{"_index":64,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"miscellaneous/enumerations.html":{}}}],["quickly",{"_index":354,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["radius",{"_index":491,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["raw",{"_index":300,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["red",{"_index":706,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["register",{"_index":265,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["relative",{"_index":690,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["remote",{"_index":752,"title":{},"body":{"classes/UploadControl.html":{}}}],["remove",{"_index":387,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["removed",{"_index":428,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{}}}],["removeupload(upload",{"_index":429,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["render",{"_index":268,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["rendered",{"_index":230,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["renderer",{"_index":529,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["renderer2",{"_index":530,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["reportprogress",{"_index":144,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["repository",{"_index":609,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["represents",{"_index":10,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["request",{"_index":66,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["res.body",{"_index":186,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.ok",{"_index":182,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["res.status",{"_index":185,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["reset",{"_index":59,"title":{},"body":{"classes/FileUpload.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/UploadOptions.html":{},"index.html":{}}}],["response",{"_index":287,"title":{"interfaces/Response.html":{}},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{}}}],["response(response",{"_index":309,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["restart",{"_index":56,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["result",{"_index":196,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":198,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":19,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["retry(event",{"_index":757,"title":{},"body":{"classes/UploadControl.html":{}}}],["return",{"_index":136,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["returns",{"_index":43,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["reverse",{"_index":451,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["right",{"_index":702,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["row",{"_index":450,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["rxjs",{"_index":80,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":83,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["safari7",{"_index":680,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["same",{"_index":169,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["search",{"_index":555,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["sec",{"_index":426,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["selected",{"_index":600,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["selector",{"_index":220,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["send",{"_index":95,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["server",{"_index":63,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["service",{"_index":32,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["services/file",{"_index":216,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["services/upload",{"_index":217,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["services/validation",{"_index":562,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["set",{"_index":53,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["seterror(iserror",{"_index":803,"title":{},"body":{"classes/UploadModel.html":{}}}],["setisvalid(valid",{"_index":811,"title":{},"body":{"classes/UploadModel.html":{}}}],["setmessage(msg",{"_index":815,"title":{},"body":{"classes/UploadModel.html":{}}}],["setresponse(response",{"_index":791,"title":{},"body":{"classes/UploadModel.html":{}}}],["sets",{"_index":236,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["setstate(state",{"_index":795,"title":{},"body":{"classes/UploadModel.html":{}}}],["setsuccess(issuccess",{"_index":807,"title":{},"body":{"classes/UploadModel.html":{}}}],["settemplate(tpl",{"_index":648,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["setup",{"_index":352,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["setupload(fileupload",{"_index":647,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["setuploaded(bytes",{"_index":799,"title":{},"body":{"classes/UploadModel.html":{}}}],["share",{"_index":656,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["showlist",{"_index":363,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["shown",{"_index":748,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["shrink",{"_index":460,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["simply",{"_index":356,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["single",{"_index":11,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["size",{"_index":283,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["sizing",{"_index":457,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["solid",{"_index":454,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["something",{"_index":109,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"modules/NgxFileUploadModule.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["space",{"_index":683,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["start",{"_index":20,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"miscellaneous/enumerations.html":{}}}],["start(event",{"_index":764,"title":{},"body":{"classes/UploadControl.html":{}}}],["started",{"_index":177,"title":{},"body":{"classes/FileUpload.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["state",{"_index":60,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["state(\"void",{"_index":409,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["state(state",{"_index":311,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["statements",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":260,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["stop",{"_index":754,"title":{},"body":{"classes/UploadControl.html":{}}}],["stop(event",{"_index":766,"title":{},"body":{"classes/UploadControl.html":{}}}],["stopped",{"_index":104,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["stream",{"_index":107,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["streams",{"_index":187,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["string",{"_index":90,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["style",{"_index":401,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["styles",{"_index":345,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["styleurls",{"_index":225,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["sub",{"_index":619,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["sub.unsubscribe",{"_index":623,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["subject",{"_index":42,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["subscribe",{"_index":120,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["subscribtions",{"_index":566,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["success",{"_index":322,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["success(issuccess",{"_index":320,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["successful",{"_index":316,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["support",{"_index":861,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":862,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":156,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["table",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["takeuntil",{"_index":81,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["takeuntil(this.cancel",{"_index":118,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["template",{"_index":229,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{}}}],["template(tpl",{"_index":261,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["templateref",{"_index":211,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["templateurl",{"_index":223,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["text",{"_index":490,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.add",{"_index":577,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.add.emit(uploads",{"_index":606,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.cancel",{"_index":192,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.complete",{"_index":191,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.cancel$.next(true",{"_index":134,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.changed.emit(upload",{"_index":274,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.completeupload",{"_index":135,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.context",{"_index":241,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.context.data",{"_index":272,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.createfieldinputfield",{"_index":579,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.createupload(file",{"_index":605,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.createuploadbody",{"_index":142,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.destroyed$.complete",{"_index":583,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.destroyed$.next(true",{"_index":581,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.error",{"_index":339,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.file.name",{"_index":305,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.file.size",{"_index":303,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.file.type",{"_index":308,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.filename",{"_index":337,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.fileselect",{"_index":578,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.click",{"_index":599,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.files",{"_index":639,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.fileselect.value",{"_index":638,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.filesize",{"_index":330,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.fileupload",{"_index":240,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.fileupload.cancel",{"_index":776,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.change.subscribe",{"_index":271,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.fileupload.retry",{"_index":771,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.fileupload.start",{"_index":772,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.formdataname",{"_index":613,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.handleevent(event",{"_index":770,"title":{},"body":{"classes/UploadControl.html":{}}}],["this.handlefileselect(files",{"_index":597,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.handlehttperror(error",{"_index":124,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlehttpevent(event",{"_index":123,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleprogress(event",{"_index":163,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handleresponse(event",{"_index":165,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.handlesent",{"_index":160,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.http.post(this.options.url",{"_index":143,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.isvalid",{"_index":341,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.itemstotal",{"_index":422,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.itemtpl",{"_index":264,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["this.message",{"_index":342,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.notifyobservers",{"_index":133,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.onfileselect(e",{"_index":631,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.options",{"_index":112,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.enabled",{"_index":148,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.options.formdata.name",{"_index":150,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.prevalidateupload(filemodel",{"_index":617,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.progress",{"_index":338,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.removeupload(fileupload",{"_index":421,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.showlist",{"_index":419,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.start",{"_index":130,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.state",{"_index":336,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.success",{"_index":340,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.upload",{"_index":110,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.asobservable",{"_index":137,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.complete",{"_index":190,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload$.next(this.upload",{"_index":195,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.error",{"_index":126,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.file",{"_index":152,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.filename",{"_index":153,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.isvalid",{"_index":116,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.message",{"_index":129,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.response",{"_index":183,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.state",{"_index":114,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.success",{"_index":128,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.upload.uploaded",{"_index":175,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploaded",{"_index":328,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadedsize",{"_index":314,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadedstate",{"_index":312,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploaderror",{"_index":318,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadfile",{"_index":299,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadfile().pipe",{"_index":117,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["this.uploadmessage",{"_index":326,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadresponse",{"_index":310,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploads",{"_index":582,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.foreach((upload",{"_index":584,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.indexof(upload",{"_index":432,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.length",{"_index":586,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.push(...uploads",{"_index":418,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.push(upload",{"_index":618,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads.splice(idx",{"_index":433,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["this.uploads.splice(this.uploads.indexof(upload",{"_index":622,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads[i",{"_index":588,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploads[i].cancel",{"_index":587,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.uploadsuccess",{"_index":321,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.uploadvalid",{"_index":324,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["this.url",{"_index":611,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.useformdata",{"_index":612,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validators",{"_index":575,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["this.validators.length",{"_index":630,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["through",{"_index":96,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"classes/UploadControl.html":{},"interfaces/UploadOptions.html":{}}}],["timer",{"_index":768,"title":{},"body":{"classes/UploadControl.html":{}}}],["timer(0).subscribe",{"_index":775,"title":{},"body":{"classes/UploadControl.html":{}}}],["todo",{"_index":332,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["tojson",{"_index":335,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["token",{"_index":741,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["tpl",{"_index":262,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["transform",{"_index":695,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["transition",{"_index":403,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["transition(\"void",{"_index":411,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["translatex",{"_index":696,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["tree",{"_index":347,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["trigger",{"_index":400,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["true",{"_index":46,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["try",{"_index":168,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["tslib",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":36,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{}}}],["type=\"file",{"_index":602,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["undefined",{"_index":263,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["under",{"_index":740,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["up",{"_index":437,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["uplaod",{"_index":608,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload",{"_index":12,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"classes/UploadControl.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["upload(fileupload",{"_index":239,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["upload.cancel",{"_index":591,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.change",{"_index":620,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.haserror",{"_index":590,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.isinvalid",{"_index":589,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.module.ts",{"_index":721,"title":{},"body":{"modules/NgxFileUploadModule.html":{}}}],["upload.start",{"_index":585,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["upload.state",{"_index":420,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["upload.tojson",{"_index":273,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["upload.ts",{"_index":8,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["upload.ts:101",{"_index":39,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:117",{"_index":68,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:124",{"_index":45,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:131",{"_index":51,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:52",{"_index":30,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:70",{"_index":62,"title":{},"body":{"classes/FileUpload.html":{}}}],["upload.ts:88",{"_index":55,"title":{},"body":{"classes/FileUpload.html":{}}}],["uploadall",{"_index":524,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["uploadbody",{"_index":141,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadcontrol",{"_index":205,"title":{"classes/UploadControl.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"coverage.html":{}}}],["uploadcontrol(fileupload",{"_index":242,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["uploaddata",{"_index":206,"title":{"interfaces/UploadData.html":{}},"body":{"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"coverage.html":{}}}],["uploaddata.message",{"_index":651,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["uploaddata.name",{"_index":359,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["uploaddata.size",{"_index":649,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["uploaded",{"_index":281,"title":{},"body":{"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"miscellaneous/enumerations.html":{}}}],["uploaded(bytes",{"_index":313,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploadedsize",{"_index":288,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploadedstate",{"_index":290,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploaderror",{"_index":291,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploadfile",{"_index":139,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadmessage",{"_index":295,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploadmodel",{"_index":26,"title":{"classes/UploadModel.html":{}},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadmodel(file",{"_index":615,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["uploadoptions",{"_index":28,"title":{"interfaces/UploadOptions.html":{}},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{},"coverage.html":{}}}],["uploadresponse",{"_index":293,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploads",{"_index":364,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["uploadstate",{"_index":84,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"miscellaneous/enumerations.html":{}}}],["uploadstate.canceled",{"_index":119,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.error",{"_index":125,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.progress",{"_index":174,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.queued",{"_index":115,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.start",{"_index":179,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["uploadstate.uploaded",{"_index":132,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"interfaces/UploadOptions.html":{}}}],["uploadsuccess",{"_index":292,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["uploadvalid",{"_index":294,"title":{},"body":{"interfaces/IDataNode.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{}}}],["url",{"_index":88,"title":{},"body":{"classes/FileUpload.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/UploadOptions.html":{}}}],["use",{"_index":538,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["used",{"_index":89,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"interfaces/UploadOptions.html":{}}}],["useformdata",{"_index":371,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{}}}],["user",{"_index":167,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["valid",{"_index":113,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/IDataNode.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/Response.html":{},"interfaces/UploadData.html":{},"classes/UploadModel.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["validate",{"_index":625,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["validate(file",{"_index":742,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["validated",{"_index":54,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["validation",{"_index":531,"title":{},"body":{"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"miscellaneous/variables.html":{}}}],["validationresult",{"_index":745,"title":{"interfaces/ValidationResult.html":{}},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{},"coverage.html":{}}}],["validator",{"_index":747,"title":{},"body":{"interfaces/NgxFileUploadValidator.html":{},"interfaces/ValidationResult.html":{}}}],["validators",{"_index":52,"title":{},"body":{"classes/FileUpload.html":{},"directives/NgxFileUploadDirective.html":{},"interfaces/NgxFileUploadValidator.html":{},"interfaces/UploadOptions.html":{},"interfaces/ValidationResult.html":{}}}],["value",{"_index":373,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":511,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["variable",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":864,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["very",{"_index":353,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["via",{"_index":601,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["view",{"_index":219,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["viewchild",{"_index":210,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["viewchild(\"defaultuploaditem",{"_index":259,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["void",{"_index":44,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadComponent.html":{},"directives/NgxFileUploadDirective.html":{},"components/NgxFileUploadItemComponent.html":{},"classes/UploadControl.html":{},"classes/UploadModel.html":{}}}],["w3c",{"_index":675,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["wait",{"_index":425,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["want",{"_index":237,"title":{},"body":{"interfaces/FileUploadItemContext.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["webdriver",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":669,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["white",{"_index":682,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["width",{"_index":486,"title":{},"body":{"components/NgxFileUploadComponent.html":{},"components/NgxFileUploadItemComponent.html":{}}}],["window",{"_index":571,"title":{},"body":{"directives/NgxFileUploadDirective.html":{}}}],["wrapped",{"_index":99,"title":{},"body":{"classes/FileUpload.html":{},"interfaces/UploadOptions.html":{}}}],["wrapper",{"_index":349,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["x",{"_index":458,"title":{},"body":{"components/NgxFileUploadComponent.html":{}}}],["yes",{"_index":763,"title":{},"body":{"classes/UploadControl.html":{}}}],["z",{"_index":692,"title":{},"body":{"components/NgxFileUploadItemComponent.html":{}}}],["zone.js",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":718,"title":{},"body":{"modules/NgxFileUploadModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/FileUpload.html":{"url":"classes/FileUpload.html","title":"class - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                represents a single file upload\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                            \n                                    Public\n                                hasError\n                            \n                            \n                                    Public\n                                isInvalid\n                            \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    change\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(http: HttpClient, upload: UploadModel, options: UploadOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/services/file-upload.ts:52\n                            \n                        \n\n                \n                    \n                            create FileUpload service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        upload\n                                                  \n                                                        \n                                                                        UploadModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        UploadOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:101\n                \n            \n\n\n            \n                \n                    cancel current file upload, this will complete change subject\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasError()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:124\n                \n            \n\n\n            \n                \n                    returns true if upload contains an error or is invalid\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isInvalid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isInvalid()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:131\n                \n            \n\n\n            \n                \n                    returns true if validators are set and upload not validated\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:88\n                \n            \n\n\n            \n                \n                    restart download again\nreset state, and reset errors\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/file-upload.ts:70\n                \n            \n\n\n            \n                \n                    upload file to server but only\nif file is not queued, abort request on cancel\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        change\n                    \n                \n\n                \n                    \n                        getchange()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/services/file-upload.ts:117\n                                \n                            \n                    \n                        \n                                returns observable which notify if file upload state\nhas been changed\n\n\n                                \n                                    Returns :         Observable\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadModel, UploadState} from \"../model/upload\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED && this.upload.isValid) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleHttpError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state   = UploadState.QUEUED;\n            this.upload.error   = null;\n            this.upload.success = null;\n            this.upload.message = \"\";\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    /**\n     * returns true if upload contains an error or is invalid\n     */\n    public hasError(): boolean {\n        return this.upload.error;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isValid === false;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * got http error, this not completes the upload\n     * since the user can try do the same upload again\n     */\n    private handleHttpError(error: HttpErrorResponse) {\n        this.upload.state = UploadState.ERROR;\n        this.upload.error = true;\n        this.upload.message = error.message;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed\n     */\n    private handleResponse(res: HttpResponse) {\n\n        this.upload.state   = UploadState.UPLOADED;\n        this.upload.success = res.ok;\n        this.upload.response = {\n            code: res.status,\n            body: res.body\n        };\n\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadItemContext.html":{"url":"interfaces/FileUploadItemContext.html","title":"interface - FileUploadItemContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileUploadItemContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ctrl\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ctrl\n                                    \n                                \n                                \n                                    \n                                        ctrl:         UploadControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadControl\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         UploadData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, EventEmitter, Output, HostListener } from \"@angular/core\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { UploadControl } from \"../services/upload-control\";\nimport { UploadModel, UploadData } from \"../model/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"ngx-fileupload-item.component.html\",\n    styleUrls: [\"./ngx-fileupload-item.component.scss\"],\n})\nexport class NgxFileUploadItemComponent implements OnInit {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * emit event if upload state has been changed\n     */\n    @Output()\n    public changed: EventEmitter = new EventEmitter();\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * set template which should be used for upload items, if nothing is passed\n     * it [defaultUploadItem]{@link #template} template will be used\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl !== undefined) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.fileUpload.change.subscribe({\n            next: (upload: UploadModel) => {\n                this.context.data = upload.toJson();\n                this.changed.emit(upload);\n            }\n        });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataNode.html":{"url":"interfaces/IDataNode.html","title":"interface - IDataNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/model/upload.ts:23\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadData {\n    state: UploadState;\n    uploaded: number;\n    size: number;\n    name: string;\n    progress: number;\n    hasError: boolean;\n    isSuccess: boolean;\n    isValid: boolean;\n    message: string;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\ninterface Response {\n    code: number;\n    body: IDataNode;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadError = false;\n\n    private uploadSuccess = false;\n\n    private uploadResponse: Response = null;\n\n    private uploadValid = true;\n\n    private uploadMessage = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: Response) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): Response {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set error(isError: boolean) {\n        this.uploadError = isError;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get error(): boolean {\n        return this.uploadError;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set success(isSuccess: boolean) {\n        this.uploadSuccess = isSuccess;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get success(): boolean {\n        return this.uploadSuccess;\n    }\n\n    public set isValid(valid: boolean) {\n        this.uploadValid = valid;\n    }\n\n    /**\n     * returns true if upload is valid\n     */\n    public get isValid(): boolean {\n        return this.uploadValid;\n    }\n\n    public set message(msg: string) {\n        this.uploadMessage = msg;\n    }\n\n    public get message(): string {\n        return this.uploadMessage;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            state     : this.state,\n            uploaded  : this.uploaded,\n            size      : this.fileSize,\n            name      : this.fileName,\n            progress  : this.progress,\n            hasError  : this.error,\n            isSuccess : this.success,\n            isValid   : this.isValid,\n            message   : this.message\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxFileUploadComponent.html":{"url":"components/NgxFileUploadComponent.html","title":"component - NgxFileUploadComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxFileUploadComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/components/ngx-fileupload.component.ts\n\n\n    \n        Description\n    \n    \n        NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\nto setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\nor NgxFileUploadComponent. This component simply handle all events / changes from upload.\n\n    \n\n\n\n    \n        Example\n    \n    \n                \n                    \n\n                \n                \n                    \n\n{{uploadData.name}}\n\n\n\n                \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload\n            \n\n            \n                styleUrls\n                ./ngx-fileupload.component.scss\n            \n\n\n\n            \n                templateUrl\n                ngx-fileupload.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showList\n                            \n                            \n                                    Public\n                                uploads\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleUploadChange\n                            \n                            \n                                    Public\n                                onAnimationDone\n                            \n                            \n                                    Public\n                                onUploadsAdd\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                itemTemplate\n                            \n                            \n                                url\n                            \n                            \n                                useFormData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:74\n                            \n                        \n                \n                    \n                        set field name for FormData Object where to find the file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        itemTemplate\n                    \n                \n                \n                    \n                        Type :         TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:54\n                            \n                        \n                \n                    \n                        set custom template, will pass through to NgxFileUploadItem\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:61\n                            \n                        \n                \n                    \n                        input which url should be used to upload files,\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:68\n                            \n                        \n                \n                    \n                        by default files will send through FormData Object, if set to false file will send plain into\npost body\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            handleUploadChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUploadChange(upload: UploadModel, fileUpload: FileUpload)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:100\n                \n            \n\n\n            \n                \n                    if state is canceled or uploaded remove it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    upload\n                                    \n                                                UploadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileUpload\n                                    \n                                                FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onAnimationDone\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onAnimationDone($event)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onUploadsAdd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onUploadsAdd(uploads: FileUpload[])\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:92\n                \n            \n\n\n            \n                \n                    new uploads has been added we need to care about this to remove\nfinished uploads from list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploads\n                                    \n                                                FileUpload[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showList\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:84\n                            \n                        \n\n                \n                    \n                        flag list\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            uploads\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUpload[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload.component.ts:79\n                            \n                        \n\n                \n                    \n                        all uploads which has been added in NgxFileUploadDirective\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, TemplateRef, Input } from \"@angular/core\";\nimport { trigger, state, style, animate, transition } from \"@angular/animations\";\nimport { delay } from \"rxjs/operators\";\nimport { of } from \"rxjs\";\nimport { UploadModel, UploadState } from \"../model/upload\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { FileUploadItemContext } from \"./ngx-fileupload-item.component\";\n\n/**\n * NgxFileUploadComponent is a wrapper contain NgxFileUploadDirective and NgxFileUploadComponent\n * to setup a upload view very quickly. All options will passed directly to NgxFileUploadDirective\n * or NgxFileUploadComponent. This component simply handle all events / changes from upload.\n *\n * @example\n * \n * \n *\n *\n * @example\n * \n * \n *    {{uploadData.name}}\n * \n *\n * \n *\n *\n * @example\n * \n * \n */\n@Component({\n    selector: \"ngx-fileupload\",\n    styleUrls: [\"./ngx-fileupload.component.scss\"],\n    templateUrl: \"ngx-fileupload.component.html\",\n    animations: [\n        trigger(\n            \"fadeInOut\",\n            [\n                state(\"void\", style({\n                    opacity: 0\n                })),\n                transition(\"void  *\", animate(250)),\n            ]\n        ),\n    ],\n})\nexport class NgxFileUploadComponent {\n\n    /**\n     * set custom template, will pass through to [NgxFileUploadItem]{@link NgxFileUploadItemComponent.html#itemTpl}\n     */\n    @Input()\n    public itemTemplate: TemplateRef;\n\n    /**\n     * input which url should be used to upload files,\n     * this field is mandatory\n     */\n    @Input()\n    public url: string;\n\n    /**\n     * by default files will send through FormData Object, if set to false file will send plain into\n     * post body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * set field name for FormData Object where to find the file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * all uploads which has been added in [NgxFileUploadDirective]{@link ../directives/NgxFileUploadDirective.html#add}\n     */\n    public uploads: FileUpload[] = [];\n\n    /**\n     * flag list\n     */\n    public showList = false;\n\n    private itemsTotal = 0;\n\n    /**\n     * new uploads has been added we need to care about this to remove\n     * finished uploads from list\n     */\n    public onUploadsAdd(uploads: FileUpload[]) {\n        this.uploads.push(...uploads);\n        this.showList = true;\n    }\n\n    /**\n     * if state is canceled or uploaded remove it\n     */\n    public handleUploadChange(upload: UploadModel, fileUpload: FileUpload) {\n        if (upload.state === UploadState.CANCELED || upload.state === UploadState.UPLOADED) {\n            this.removeUpload(fileUpload);\n        }\n    }\n\n    public onAnimationDone($event) {\n        this.itemsTotal += $event.toState === \"void\" ? 1 : -1;\n        if (this.itemsTotal === 0) {\n            this.showList = false;\n        }\n    }\n\n    /**\n     * remove upload from list but wait for 1 sec before it will be removed\n     */\n    private removeUpload(upload: FileUpload) {\n        of(upload).pipe(delay(1000))\n            .subscribe({\n                next: () => {\n                    const idx = this.uploads.indexOf(upload);\n                    this.uploads.splice(idx, 1);\n                }\n            });\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n            \n            Drag/Drop files here or click\n        \n    \n\n    \n        \n    \n\n\n    Cancel\n    Clean Up\n    Upload\n\n\n    \n\n    \n                \n                    ./ngx-fileupload.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../assets/fonts' !default;\n\n@import '../assets//scss/variables';\n@import '../assets/scss/icons';\n\n:host {\n\n    display: flex;\n    flex-direction: column;\n\n    .fileupload {\n        overflow: auto;\n        display: flex;\n        flex-direction: row-reverse;\n        flex: 1;\n        border: 1px solid #D2D2D2;\n    }\n\n    .file-upload--list {\n        box-sizing: border-box;\n        flex: 1;\n        overflow-x: hidden;\n        flex-shrink: 0;\n        flex-grow: 0;\n        flex-basis: 100%;\n        padding: .5rem 1rem;\n    }\n\n    ngx-fileupload-item {\n        margin-bottom: .5rem;\n\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n\n    .file-upload--info-wrapper {\n        cursor: pointer;\n        display: flex;\n        flex: 1;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .file-upload--info {\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: map-get($colors, \"dark\");\n\n        .ngx-fileupload-icon--add {\n            font-size: 2.5rem;\n            border: 1px dashed lighten(map-get($colors, \"dark\"), 40%);\n            width: 4rem;\n            line-height: 4rem;\n            text-align: center;\n            border-radius: 50%;\n            margin-bottom: .5rem;\n        }\n    }\n\n    .upload--footer {\n        display: flex;\n        flex-direction: row-reverse;\n\n        .upload-action {\n            display: block;\n            background: map-get($colors, \"dark\");\n            padding: .4rem .8rem;\n            border: 1px solid #2E2E2E;\n            border-width: 0 0 1px;\n            color: map-get($map: $colors, $key: \"light\");\n            cursor: pointer;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:first-child {\n                border-radius: 0  0 .3rem 0;\n                border-width: 0 1px 1px;\n            }\n\n            &:last-child {\n                border-radius: 0  0 0 .3rem;\n                border-width: 0 1px 1px;\n            }\n\n            &[disabled] {\n                border-color: lighten(#2E2E2E, 40%);\n                background: lighten(#3E3E3E, 40%);\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    Drag/Drop files here or click                                Cancel    Clean Up    Upload'\n    var COMPONENTS = [{'name': 'NgxFileUploadComponent', 'selector': 'ngx-fileupload'},{'name': 'NgxFileUploadItemComponent', 'selector': 'ngx-fileupload-item'}];\n    var DIRECTIVES = [{'name': 'NgxFileUploadDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxFileUploadComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFileUploadDirective.html":{"url":"directives/NgxFileUploadDirective.html","title":"directive - NgxFileUploadDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  NgxFileUploadDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/directives/ngx-fileuplad.ts\n        \n\n            \n                Description\n            \n            \n                directive to add uploads with drag / drop\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \nUpload\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFileUpload]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancelAll\n                            \n                            \n                                    Public\n                                cleanAll\n                            \n                            \n                                    Public\n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formDataName\n                            \n                            \n                                ngxFileUpload\n                            \n                            \n                                useFormData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                dragover\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, renderer: Renderer2, validation: NgxFileUploadValidator | NgxFileUploadValidator[])\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:75\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxFileUploadDirective.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                        Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        validation\n                                                  \n                                                        \n                                                                        NgxFileUploadValidator | NgxFileUploadValidator[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        formDataName\n                    \n                \n                \n                    \n                        Default value : \"file\"\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:55\n                            \n                        \n                \n                    \n                        form data field name with which form data will be send\nby default this will be file\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxFileUpload\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:41\n                            \n                        \n                \n                    \n                        url which should be used as endpoint for the file upload\nthis field is mandatory\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        useFormData\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:48\n                            \n                        \n                \n                    \n                        if set to false upload post request body will use\nplain file object in body\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:31\n                            \n                        \n                \n                    \n                        upload has been added\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:157\n                \n            \n\n\n            \n                \n                    add click host listener\nto get notified we have a click event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dragover\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndragover(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:134\n                \n            \n\n\n            \n                \n                    handle drag over event\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            drop\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndrop(event: DragEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:143\n                \n            \n\n\n            \n                \n                    handle drop event\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cancelAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:111\n                \n            \n\n\n            \n                \n                    cancel all downloads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:121\n                \n            \n\n\n            \n                \n                    search for broken uploads (error / invalid) and cancel\nthem\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            uploadAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAll()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/directives/ngx-fileuplad.ts:104\n                \n            \n\n\n            \n                \n                    begin all uploads at once\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, Input, Output, EventEmitter, OnDestroy, Optional, Inject, Renderer2, ElementRef } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { UploadModel, UploadState } from \"../model/upload\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { NGX_FILEUPLOAD_VALIDATOR, NgxFileUploadValidator } from \"../services/validation\";\n\n/**\n * directive to add uploads with drag / drop\n *\n * @example\n *\n * \n * Upload\n */\n@Directive({\n  selector: \"[ngxFileUpload]\",\n  exportAs: \"ngxFileUploadRef\"\n})\nexport class NgxFileUploadDirective implements OnDestroy {\n\n    /**\n     * upload has been added\n     *\n     * @example\n     *\n     * \n     */\n    @Output()\n    public add: EventEmitter;\n\n    /**\n     * url which should be used as endpoint for the file upload\n     * this field is mandatory\n     *\n     * @example\n     * \n     */\n    @Input(\"ngxFileUpload\")\n    public url: string;\n\n    /**\n     * if set to false upload post request body will use\n     * plain file object in body\n     */\n    @Input()\n    public useFormData = true;\n\n    /**\n     * form data field name with which form data will be send\n     * by default this will be file\n     */\n    @Input()\n    public formDataName = \"file\";\n\n    /**\n     * remove from subscribtions if component gets destroyed\n     */\n    private destroyed$: Subject = new Subject();\n\n    /**\n     * upload file queue\n     */\n    private uploads: FileUpload[] = [];\n\n    /**\n     * injected validators\n     */\n    private validators: NgxFileUploadValidator[] = [];\n\n    /**\n     * input file field to trigger file window\n     */\n    private fileSelect: HTMLInputElement;\n\n    /**\n     * Creates an instance of NgxFileUploadDirective.\n     */\n    constructor(\n        private httpClient: HttpClient,\n        private renderer: Renderer2,\n        @Optional() @Inject(NGX_FILEUPLOAD_VALIDATOR) validation: NgxFileUploadValidator | NgxFileUploadValidator[]\n    ) {\n        if (validation) {\n            this.validators = Array.isArray(validation) ? validation : [validation];\n        }\n        this.add = new EventEmitter();\n        this.fileSelect = this.createFieldInputField();\n    }\n\n    /**\n     * directive gets destroyed\n     */\n    public ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.uploads = [];\n        this.destroyed$.complete();\n    }\n\n    /**\n     * begin all uploads at once\n     */\n    public uploadAll() {\n        this.uploads.forEach((upload: FileUpload) => upload.start());\n    }\n\n    /**\n     * cancel all downloads at once\n     */\n    public cancelAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            this.uploads[i].cancel();\n        }\n    }\n\n    /**\n     * search for broken uploads (error / invalid) and cancel\n     * them\n     */\n    public cleanAll() {\n        for ( let i = this.uploads.length - 1; i >= 0; i --) {\n            const upload = this.uploads[i];\n            if (upload.isInvalid() || upload.hasError()) {\n                upload.cancel();\n            }\n        }\n    }\n\n    /**\n     * handle drag over event\n     */\n    @HostListener(\"dragover\", [\"$event\"])\n    public onFileDragOver(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * handle drop event\n     */\n    @HostListener(\"drop\", [\"$event\"])\n    public onFileDrop(event: DragEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(event.dataTransfer.files);\n        this.handleFileSelect(files);\n    }\n\n    /**\n     * add click host listener\n     * to get notified we have a click event\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (!this.uploads.length) {\n            this.fileSelect.click();\n        }\n    }\n\n    /**\n     * files has been selected via drag drop\n     * or with input type=\"file\"\n     */\n    private handleFileSelect(files: File[]) {\n        const uploads = files.map((file) => this.createUpload(file));\n        this.add.emit(uploads);\n    }\n\n    /**\n     * create upload from file, listen to complete\n     * to remove upload from uploads list\n     *\n     * remove uplaod from uploads repository if upload completed\n     * or canceled\n     */\n    private createUpload(file: File): FileUpload {\n        const uploadOptions = {\n            url: this.url,\n            formData: {\n                enabled: this.useFormData,\n                name   : this.formDataName\n            }\n        };\n\n        const fileModel = new UploadModel(file);\n        const upload    = new FileUpload(this.httpClient, fileModel, uploadOptions);\n\n        this.preValidateUpload(fileModel);\n        this.uploads.push(upload);\n\n        const sub = upload.change\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe({\n                complete: () => {\n                    this.uploads.splice(this.uploads.indexOf(upload), 1);\n                    sub.unsubscribe();\n                }\n            });\n\n        return upload;\n    }\n\n    /**\n     * pre validate upload, if validation result is invalid\n     * fill could not uploaded anymore\n     */\n    private preValidateUpload(upload: UploadModel) {\n\n        for (let i = 0, ln = this.validators.length; i  this.onFileSelect(e));\n        return inputField;\n    }\n\n    /**\n     * register on change event on input[type=\"file\"] field\n     * and create the uploads\n     */\n    private onFileSelect(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const files = Array.from(this.fileSelect.files);\n        this.handleFileSelect(files);\n\n        /**\n         * clear value otherwise change will not trigger again\n         */\n        this.fileSelect.value = null;\n        this.fileSelect.files = null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxFileUploadItemComponent.html":{"url":"components/NgxFileUploadItemComponent.html","title":"component - NgxFileUploadItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxFileUploadItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n\n\n    \n        Description\n    \n    \n        view for upload\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-fileupload-item\n            \n\n            \n                styleUrls\n                ./ngx-fileupload-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                ngx-fileupload-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                itemTpl\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changed\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    upload\n                                \n                                \n                                    template\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:72\n                            \n                        \n                \n                    \n                        set template which should be used for upload items, if nothing is passed\nit defaultUploadItem template will be used\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:47\n                            \n                        \n                \n                    \n                        sets upload we want to bind with current view\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changed\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:31\n                            \n                        \n                \n                    \n                        emit event if upload state has been changed\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nclick(event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:60\n                \n            \n\n\n            \n                \n                    ensure all click events will canceled\nso we dont affect anything other\n\n\n                \n            \n        \n    \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileUploadItemContext\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:36\n                            \n                        \n\n                \n                    \n                        template context which is bound to rendered template\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            itemTpl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TemplateRef\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:25\n                            \n                        \n\n                \n                    \n                        item template which should rendered to display upload data\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        upload\n                    \n                \n\n\n                \n                    \n                        setupload(fileUpload)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:47\n                                \n                            \n                    \n                        \n                                sets upload we want to bind with current view\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            fileUpload\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n\n\n                \n                    \n                        settemplate(tpl)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/components/ngx-fileupload-item.component.ts:72\n                                \n                            \n                    \n                        \n                                set template which should be used for upload items, if nothing is passed\nit defaultUploadItem template will be used\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tpl\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, OnInit, Input, ViewChild, TemplateRef, EventEmitter, Output, HostListener } from \"@angular/core\";\nimport { FileUpload } from \"../services/file-upload\";\nimport { UploadControl } from \"../services/upload-control\";\nimport { UploadModel, UploadData } from \"../model/upload\";\n\nexport interface FileUploadItemContext {\n    data: UploadData;\n    ctrl: UploadControl;\n}\n\n/**\n * view for upload\n */\n@Component({\n    selector: \"ngx-fileupload-item\",\n    templateUrl: \"ngx-fileupload-item.component.html\",\n    styleUrls: [\"./ngx-fileupload-item.component.scss\"],\n})\nexport class NgxFileUploadItemComponent implements OnInit {\n\n    /**\n     * item template which should rendered to display upload data\n     */\n    public itemTpl: TemplateRef;\n\n    /**\n     * emit event if upload state has been changed\n     */\n    @Output()\n    public changed: EventEmitter = new EventEmitter();\n\n    /**\n     * template context which is bound to rendered template\n     */\n    public context: FileUploadItemContext;\n\n    /**\n     * file upload which should bound to this view\n     */\n    private fileUpload: FileUpload;\n\n    /**\n     * sets upload we want to bind with current view\n     */\n    @Input()\n    public set upload(fileUpload: FileUpload) {\n        this.fileUpload = fileUpload;\n        this.context = {\n            data: null,\n            ctrl: new UploadControl(fileUpload)\n        };\n    }\n\n    /**\n     * ensure all click events will canceled\n     * so we dont affect anything other\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onItemClick(event: MouseEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * set template which should be used for upload items, if nothing is passed\n     * it [defaultUploadItem]{@link #template} template will be used\n     */\n    @ViewChild(\"defaultUploadItem\", {static: true})\n    @Input()\n    public set template(tpl: TemplateRef) {\n        if (tpl !== undefined) {\n            this.itemTpl = tpl;\n        }\n    }\n\n    /**\n     * register on upload change event to get current informations from upload\n     * and pass to template context to render them\n     *\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.fileUpload.change.subscribe({\n            next: (upload: UploadModel) => {\n                this.context.data = upload.toJson();\n                this.changed.emit(upload);\n            }\n        });\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{uploadData.name}}\n\n        \n            \n            \n                \n            \n\n            \n            \n                \n                    {{uploadData.size | bytes : 2}}\n                    \n                \n            \n\n            \n            \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n                \n                \n                    \n                \n\n            \n        \n\n        \n            {{uploadData.message}}\n        \n    \n\n\n\n\n\n    \n\n    \n                \n                    ./ngx-fileupload-item.component.scss\n                \n                $ngx-fileupload-icons--font-path: '../assets/fonts' !default;\n\n@import '../assets//scss/variables';\n@import '../assets/scss/icons';\n\n:host {\n\n    display: block;\n    color: map-get($colors, 'dark');\n\n    .upload-item {\n        display: flex;\n        flex-direction: column;\n        padding: .25rem .5rem;\n        border-radius: .4rem;\n        border: 1px solid #E4E4E4;\n\n        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#ffffff+50,f7f7f7+100 */\n        background: #FDFDFD; /* Old browsers */\n        background: -moz-linear-gradient(top,  #FDFDFD 50%, #F7F7F7 100%); /* FF3.6-15 */\n        background: -webkit-linear-gradient(top,  #FDFDFD 50%,#F7F7F7 100%); /* Chrome10-25,Safari5.1-6 */\n        background: linear-gradient(to bottom,  #FDFDFD 50%,#F7F7F7 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n    }\n\n    /*\n       Upload Item Header\n    */\n    .upload-item--header {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n\n    /*\n       Upload Item Body\n    */\n    .upload-item--body {\n        align-items: center;\n        display: flex;\n        flex-direction: row;\n    }\n\n    .upload-item--actions,\n    .upload-item--state {\n        flex: 0;\n    }\n\n    .upload-item--progress {\n        flex: 1;\n        display: flex;\n        margin: 0 .5rem;\n        padding: 0 .5rem;\n        border: 1px solid #E4E4E4;\n        border-width: 0 1px;\n\n        .progressbar {\n            flex: 1;\n            height: .75rem;\n            border-radius: .5rem;\n            overflow: hidden;\n            padding: 1px;\n            border: 1px solid #E4E4E4;\n            position: relative;\n        }\n\n        .label-size {\n            position: absolute;\n            z-index: 5;\n            left: 50%;\n            transform: translateX(-50%);\n            font-size: .8rem;\n        }\n\n        .progressbar-inner {\n            height: 100%;\n            background: map-get($colors, 'progress');\n            border-radius: .5rem;\n        }\n    }\n\n    .upload-item--actions {\n\n        padding: .25rem;\n        display: flex;\n\n        button {\n            padding: 0;\n            background: lighten(map-get($colors, 'dark'), 25%);\n            color: map-get($colors, 'white');\n            border-radius: 50%;\n            border: 0;\n            height: 1rem; \n            width: 1rem; \n            cursor: pointer;\n            font-size: .75rem;\n            outline: none;\n\n            margin-right: .25rem;\n\n            &:last-child {\n                margin: 0;\n            }\n\n            &:disabled {\n                background: lighten(map-get($colors, 'dark'), 50%);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    /**\n     * Upload Item Footer\n     */\n    .upload-item--notification {\n        font-size: .8rem;\n        color: map-get($map: $colors, $key: 'green');\n        margin-left: 2rem;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n\n        &.error {\n            color: map-get($map: $colors, $key: 'red');\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{uploadData.name}}                                                                                                                        {{uploadData.size | bytes : 2}}                                                                                                                                                                                                                                                                                                                            {{uploadData.message}}            '\n    var COMPONENTS = [{'name': 'NgxFileUploadComponent', 'selector': 'ngx-fileupload'},{'name': 'NgxFileUploadItemComponent', 'selector': 'ngx-fileupload-item'}];\n    var DIRECTIVES = [{'name': 'NgxFileUploadDirective', 'selector': '[ngxFileUpload]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxFileUploadItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxFileUploadModule.html":{"url":"modules/NgxFileUploadModule.html","title":"module - NgxFileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxFileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nNgxFileUploadComponent\n\nNgxFileUploadComponent\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nNgxFileUploadComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadDirective\n\nNgxFileUploadDirective\n\nNgxFileUploadModule -->\n\nNgxFileUploadDirective->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadItemComponent\n\nNgxFileUploadItemComponent\n\nNgxFileUploadModule -->\n\nNgxFileUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadComponent \n\nNgxFileUploadComponent \n\nNgxFileUploadComponent  -->\n\nNgxFileUploadModule->NgxFileUploadComponent \n\n\n\n\n\nNgxFileUploadDirective \n\nNgxFileUploadDirective \n\nNgxFileUploadDirective  -->\n\nNgxFileUploadModule->NgxFileUploadDirective \n\n\n\n\n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent  -->\n\nNgxFileUploadModule->NgxFileUploadItemComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            lib/ngx-fileupload/ngx-file-upload.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxFileUploadComponent\n                        \n                        \n                            NgxFileUploadDirective\n                        \n                        \n                            NgxFileUploadItemComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxFileUploadComponent\n                        \n                        \n                            NgxFileUploadDirective\n                        \n                        \n                            NgxFileUploadItemComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { NgMathPipesModule } from \"angular-pipes\";\n\nimport { NgxFileUploadItemComponent } from \"./components/ngx-fileupload-item.component\";\nimport { NgxFileUploadDirective } from \"./directives/ngx-fileuplad\";\nimport { NgxFileUploadComponent } from \"./components/ngx-fileupload.component\";\n\n@NgModule({\n    declarations: [\n        NgxFileUploadDirective,\n        NgxFileUploadItemComponent,\n        NgxFileUploadComponent,\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        NgMathPipesModule\n    ],\n    exports: [\n        NgxFileUploadDirective,\n        NgxFileUploadItemComponent,\n        NgxFileUploadComponent\n    ]\n})\nexport class NgxFileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFileUploadValidator.html":{"url":"interfaces/NgxFileUploadValidator.html","title":"interface - NgxFileUploadValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgxFileUploadValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/validation.ts\n        \n\n            \n                Description\n            \n            \n                interface should implemented from custom validators for ngx-fileupload\nprovide under NGX_FILEUPLOAD_VALIDATOR token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    validate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(file: File)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/validation.ts:26\n                \n            \n\n\n            \n                \n                    called to validate file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidationResult\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectionToken } from \"@angular/core\";\n\n/**\n * validation result from ngx fileupload validator\n */\nexport interface ValidationResult {\n    /**\n     * set to true if upload has been validated\n     */\n    valid: boolean;\n    /**\n     * if file has not validated, this error message will be shown\n     */\n    error: string;\n}\n\n/**\n * interface should implemented from custom validators for ngx-fileupload\n * provide under NGX_FILEUPLOAD_VALIDATOR token\n */\nexport interface NgxFileUploadValidator {\n\n    /**\n     * called to validate file\n     */\n    validate(file: File): ValidationResult;\n}\n\n/**\n * InjectionToken for ngx file upload validation classes\n */\nexport const NGX_FILEUPLOAD_VALIDATOR = new InjectionToken(\"Upload validation Service\");\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        code\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         IDataNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadData {\n    state: UploadState;\n    uploaded: number;\n    size: number;\n    name: string;\n    progress: number;\n    hasError: boolean;\n    isSuccess: boolean;\n    isValid: boolean;\n    message: string;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\ninterface Response {\n    code: number;\n    body: IDataNode;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadError = false;\n\n    private uploadSuccess = false;\n\n    private uploadResponse: Response = null;\n\n    private uploadValid = true;\n\n    private uploadMessage = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: Response) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): Response {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set error(isError: boolean) {\n        this.uploadError = isError;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get error(): boolean {\n        return this.uploadError;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set success(isSuccess: boolean) {\n        this.uploadSuccess = isSuccess;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get success(): boolean {\n        return this.uploadSuccess;\n    }\n\n    public set isValid(valid: boolean) {\n        this.uploadValid = valid;\n    }\n\n    /**\n     * returns true if upload is valid\n     */\n    public get isValid(): boolean {\n        return this.uploadValid;\n    }\n\n    public set message(msg: string) {\n        this.uploadMessage = msg;\n    }\n\n    public get message(): string {\n        return this.uploadMessage;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            state     : this.state,\n            uploaded  : this.uploaded,\n            size      : this.fileSize,\n            name      : this.fileName,\n            progress  : this.progress,\n            hasError  : this.error,\n            isSuccess : this.success,\n            isValid   : this.isValid,\n            message   : this.message\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadControl.html":{"url":"classes/UploadControl.html","title":"class - UploadControl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadControl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/upload-control.ts\n        \n\n            \n                Description\n            \n            \n                remote control for a single upload, will passed\nby NgxFileUploadItem as context.ctrl\nto the item template.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            \n     start\n     retry\n     cancel\n\n\n\n                        \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                retry\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(fileUpload: FileUpload)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/services/upload-control.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileUpload\n                                                  \n                                                        \n                                                                        FileUpload\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            retry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    retry(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:34\n                \n            \n\n\n            \n                \n                    if upload has been failed (http error) it has not completed\nsince connection can be broken or something dont has started yet.\nGive them a chance for a retry\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:42\n                \n            \n\n\n            \n                \n                    start single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop(event?: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/services/upload-control.ts:50\n                \n            \n\n\n            \n                \n                    cancel / stop single upload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileUpload } from \"./file-upload\";\nimport { timer } from \"rxjs\";\n\n/**\n * remote control for a single upload, will passed\n * by [NgxFileUploadItem]{@link ../components/NgxFileUploadItem.html} as context.ctrl\n * to the item template.\n *\n * @example\n *\n * \n *     start\n *     retry\n *     cancel\n * \n *\n * \n */\nexport class UploadControl {\n\n    /**\n     *\n     */\n    public constructor(\n        private fileUpload: FileUpload\n    ) {}\n\n    /**\n     * if upload has been failed (http error) it has not completed\n     * since connection can be broken or something dont has started yet.\n     *\n     * Give them a chance for a retry\n     */\n    public retry(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.retry();\n    }\n\n    /**\n     * start single upload\n     */\n    public start(event?: MouseEvent) {\n        this.handleEvent(event);\n        this.fileUpload.start();\n    }\n\n    /**\n     * cancel / stop single upload\n     */\n    public stop(event?: MouseEvent) {\n        /**\n         * add delay from 0 before we cancel the event\n         * if we dont it could happen, the element is removed\n         * after fileUpload has been canceled and click event passes\n         * through.\n         */\n        timer(0).subscribe({\n            next: () => this.fileUpload.cancel()\n        });\n    }\n\n    private handleEvent(event?: MouseEvent) {\n        if (event && event instanceof MouseEvent) {\n            event.stopPropagation();\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadData.html":{"url":"interfaces/UploadData.html","title":"interface - UploadData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        hasError\n                                \n                                \n                                        isSuccess\n                                \n                                \n                                        isValid\n                                \n                                \n                                        message\n                                \n                                \n                                        name\n                                \n                                \n                                        progress\n                                \n                                \n                                        size\n                                \n                                \n                                        state\n                                \n                                \n                                        uploaded\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSuccess\n                                    \n                                \n                                \n                                    \n                                        isSuccess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         UploadState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadState\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploaded\n                                    \n                                \n                                \n                                    \n                                        uploaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadData {\n    state: UploadState;\n    uploaded: number;\n    size: number;\n    name: string;\n    progress: number;\n    hasError: boolean;\n    isSuccess: boolean;\n    isValid: boolean;\n    message: string;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\ninterface Response {\n    code: number;\n    body: IDataNode;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadError = false;\n\n    private uploadSuccess = false;\n\n    private uploadResponse: Response = null;\n\n    private uploadValid = true;\n\n    private uploadMessage = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: Response) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): Response {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set error(isError: boolean) {\n        this.uploadError = isError;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get error(): boolean {\n        return this.uploadError;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set success(isSuccess: boolean) {\n        this.uploadSuccess = isSuccess;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get success(): boolean {\n        return this.uploadSuccess;\n    }\n\n    public set isValid(valid: boolean) {\n        this.uploadValid = valid;\n    }\n\n    /**\n     * returns true if upload is valid\n     */\n    public get isValid(): boolean {\n        return this.uploadValid;\n    }\n\n    public set message(msg: string) {\n        this.uploadMessage = msg;\n    }\n\n    public get message(): string {\n        return this.uploadMessage;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            state     : this.state,\n            uploaded  : this.uploaded,\n            size      : this.fileSize,\n            name      : this.fileName,\n            progress  : this.progress,\n            hasError  : this.error,\n            isSuccess : this.success,\n            isValid   : this.isValid,\n            message   : this.message\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadModel.html":{"url":"classes/UploadModel.html","title":"class - UploadModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/model/upload.ts\n        \n\n            \n                Description\n            \n            \n                Represents a file which will be uploaded\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    file\n                                \n                                \n                                    fileSize\n                                \n                                \n                                    fileName\n                                \n                                \n                                    fileType\n                                \n                                \n                                    response\n                                \n                                \n                                    state\n                                \n                                \n                                    uploaded\n                                \n                                \n                                    error\n                                \n                                \n                                    success\n                                \n                                \n                                    isValid\n                                \n                                \n                                    message\n                                \n                                \n                                    progress\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(file: File)\n                    \n                \n                        \n                            \n                                Defined in lib/ngx-fileupload/model/upload.ts:51\n                            \n                        \n\n                \n                    \n                            Creates an instance of UploadFile.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        file\n                                                  \n                                                        \n                                                                    File\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toJson\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toJson()\n                \n            \n\n\n            \n                \n                    Defined in lib/ngx-fileupload/model/upload.ts:186\n                \n            \n\n\n            \n                \n                    return file upload data\n\n\n                    \n                        Returns :         UploadData\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        file\n                    \n                \n\n                \n                    \n                        getfile()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:63\n                                \n                            \n                    \n                        \n                                get raw file\n\n\n                                \n                                    Returns :     File\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileSize\n                    \n                \n\n                \n                    \n                        getfileSize()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:70\n                                \n                            \n                    \n                        \n                                returns filesize in byte\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileName\n                    \n                \n\n                \n                    \n                        getfileName()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:77\n                                \n                            \n                    \n                        \n                                returns filename\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        fileType\n                    \n                \n\n                \n                    \n                        getfileType()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:84\n                                \n                            \n                    \n                        \n                                returns mime type of file\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        response\n                    \n                \n\n                \n                    \n                        getresponse()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:98\n                                \n                            \n                    \n                        \n                                get response data if upload has been completed\n\n\n                                \n                                    Returns :         Response\n\n                                \n                        \n                    \n\n                \n                    \n                        setresponse(response)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:91\n                                \n                            \n                    \n                        \n                                set response data if upload has been completed\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            response\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:112\n                                \n                            \n                    \n                        \n                                get current upload state\n\n\n                                \n                                    Returns :         UploadState\n\n                                \n                        \n                    \n\n                \n                    \n                        setstate(state)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:105\n                                \n                            \n                    \n                        \n                                set current upload state\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            state\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        uploaded\n                    \n                \n\n                \n                    \n                        getuploaded()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:126\n                                \n                            \n                    \n                        \n                                get uploaded size\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setuploaded(bytes: number)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:119\n                                \n                            \n                    \n                        \n                                set uploaded size\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            bytes\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n\n                \n                    \n                        geterror()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:140\n                                \n                            \n                    \n                        \n                                get upload was successful\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        seterror(isError: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:133\n                                \n                            \n                    \n                        \n                                set upload was successful\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            isError\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        success\n                    \n                \n\n                \n                    \n                        getsuccess()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:154\n                                \n                            \n                    \n                        \n                                get upload was successful\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setsuccess(isSuccess: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:147\n                                \n                            \n                    \n                        \n                                set upload was successful\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            isSuccess\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        isValid\n                    \n                \n\n                \n                    \n                        getisValid()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:165\n                                \n                            \n                    \n                        \n                                returns true if upload is valid\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setisValid(valid: boolean)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:158\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            valid\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        message\n                    \n                \n\n                \n                    \n                        getmessage()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:173\n                                \n                            \n\n                \n                    \n                        setmessage(msg: string)\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:169\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            msg\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        progress\n                    \n                \n\n                \n                    \n                        getprogress()\n                    \n                \n                            \n                                \n                                    Defined in lib/ngx-fileupload/model/upload.ts:177\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export enum UploadState {\n    QUEUED    = \"queued\",\n    START     = \"start\",\n    PROGRESS  = \"progress\",\n    UPLOADED  = \"uploaded\",\n    CANCELED  = \"canceled\",\n    ERROR     = \"error\",\n    INVALID   = \"invalid\"\n}\n\nexport interface UploadData {\n    state: UploadState;\n    uploaded: number;\n    size: number;\n    name: string;\n    progress: number;\n    hasError: boolean;\n    isSuccess: boolean;\n    isValid: boolean;\n    message: string;\n}\n\nexport interface IDataNode {\n    [key: string]: any;\n}\n\ninterface Response {\n    code: number;\n    body: IDataNode;\n}\n\n/**\n * Represents a file which will be uploaded\n */\nexport class UploadModel {\n\n    private uploadFile: File;\n\n    private uploadedSize = 0;\n\n    private uploadedState: UploadState = UploadState.QUEUED;\n\n    private uploadError = false;\n\n    private uploadSuccess = false;\n\n    private uploadResponse: Response = null;\n\n    private uploadValid = true;\n\n    private uploadMessage = \"\";\n\n    /**\n     * Creates an instance of UploadFile.\n     */\n    public constructor(file: File) {\n        this.uploadFile = file;\n    }\n\n    /**\n     * get raw file\n     */\n    public get file(): File {\n        return this.uploadFile;\n    }\n\n    /**\n     * returns filesize in byte\n     */\n    public get fileSize(): number {\n        return this.file.size;\n    }\n\n    /**\n     * returns filename\n     */\n    public get fileName(): string {\n        return this.file.name;\n    }\n\n    /**\n     * returns mime type of file\n     */\n    public get fileType(): string {\n        return this.file.type;\n    }\n\n    /**\n     * set response data if upload has been completed\n     */\n    public set response(response: Response) {\n        this.uploadResponse = response;\n    }\n\n    /**\n     * get response data if upload has been completed\n     */\n    public get response(): Response {\n        return this.uploadResponse;\n    }\n\n    /**\n     * set current upload state\n     */\n    public set state(state: UploadState) {\n        this.uploadedState = state;\n    }\n\n    /**\n     * get current upload state\n     */\n    public get state(): UploadState {\n        return this.uploadedState;\n    }\n\n    /**\n     * set uploaded size\n     */\n    public set uploaded(bytes: number) {\n        this.uploadedSize = bytes;\n    }\n\n    /**\n     * get uploaded size\n     */\n    public get uploaded(): number {\n        return this.uploadedSize;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set error(isError: boolean) {\n        this.uploadError = isError;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get error(): boolean {\n        return this.uploadError;\n    }\n\n    /**\n     * set upload was successful\n     */\n    public set success(isSuccess: boolean) {\n        this.uploadSuccess = isSuccess;\n    }\n\n    /**\n     * get upload was successful\n     */\n    public get success(): boolean {\n        return this.uploadSuccess;\n    }\n\n    public set isValid(valid: boolean) {\n        this.uploadValid = valid;\n    }\n\n    /**\n     * returns true if upload is valid\n     */\n    public get isValid(): boolean {\n        return this.uploadValid;\n    }\n\n    public set message(msg: string) {\n        this.uploadMessage = msg;\n    }\n\n    public get message(): string {\n        return this.uploadMessage;\n    }\n\n    public get progress(): number {\n        const progress = this.uploaded * 100 / this.fileSize;\n        return Math.round(progress > 100 ? 100 : progress);\n    }\n\n    /**\n     * return file upload data\n     * @todo move to model\n     */\n    public toJson(): UploadData {\n        return {\n            state     : this.state,\n            uploaded  : this.uploaded,\n            size      : this.fileSize,\n            name      : this.fileName,\n            progress  : this.progress,\n            hasError  : this.error,\n            isSuccess : this.success,\n            isValid   : this.isValid,\n            message   : this.message\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadOptions.html":{"url":"interfaces/UploadOptions.html","title":"interface - UploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/file-upload.ts\n        \n\n            \n                Description\n            \n            \n                Upload Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        formData\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                    \n                                \n                                \n                                    \n                                        formData:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    form data options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    url which should used to upload file\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpEvent, HttpEventType, HttpProgressEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\nimport { takeUntil, filter } from \"rxjs/operators\";\nimport { UploadModel, UploadState} from \"../model/upload\";\n\n/**\n * Upload Options\n */\nexport interface UploadOptions {\n\n    /**\n     * url which should used to upload file\n     */\n    url: string;\n\n    /**\n     * form data options\n     */\n    formData?: {\n\n        /**\n         * if set to false, file will send through post body and not wrapped in\n         * FormData Object\n         */\n        enabled: boolean;\n        /**\n         * only used if FormData is enabled, defines the name which should used\n         * in FormData\n         */\n        name?: string;\n    };\n}\n\n/**\n * represents a single file upload\n */\nexport class FileUpload {\n\n    /**\n     * if cancel$ emits true, current upload will stopped\n     */\n    private cancel$: Subject = new Subject();\n\n    /**\n     * upload stream to notify observers if something has been changed\n     */\n    private upload$: BehaviorSubject;\n\n    private options: UploadOptions = {\n        url: \"\",\n        formData: { enabled: true, name: \"file\" }\n    };\n\n    /**\n     * create FileUpload service\n     */\n    public constructor(\n        private http: HttpClient,\n        private upload: UploadModel,\n        options: UploadOptions\n    ) {\n        this.upload$ = new BehaviorSubject(this.upload);\n        this.options = {...this.options, ...options};\n    }\n\n    /**\n     * upload file to server but only\n     * if file is not queued, abort request on cancel\n     */\n    public start() {\n        /** only start upload if state is not queued and is valid */\n        if (this.upload.state === UploadState.QUEUED && this.upload.isValid) {\n            this.uploadFile().pipe(\n                takeUntil(this.cancel$),\n                filter(() => this.upload.state !== UploadState.CANCELED)\n            )\n            .subscribe({\n                next: (event: HttpEvent) => this.handleHttpEvent(event),\n                error: (error: HttpErrorResponse) => this.handleHttpError(error)\n            });\n        }\n    }\n\n    /**\n     * restart download again\n     * reset state, and reset errors\n     */\n    public retry() {\n        if (this.upload.state === UploadState.ERROR) {\n            this.upload.state   = UploadState.QUEUED;\n            this.upload.error   = null;\n            this.upload.success = null;\n            this.upload.message = \"\";\n            this.start();\n        }\n    }\n\n    /**\n     * cancel current file upload, this will complete change subject\n     */\n    public cancel() {\n        let isCancelAble = this.upload.state !== UploadState.CANCELED;\n        isCancelAble     = isCancelAble && this.upload.state !== UploadState.UPLOADED;\n\n        if (isCancelAble) {\n            this.upload.state = UploadState.CANCELED;\n            this.notifyObservers();\n            this.cancel$.next(true);\n            this.completeUpload();\n        }\n    }\n\n    /**\n     * returns observable which notify if file upload state\n     * has been changed\n     */\n    public get change(): Observable {\n        return this.upload$.asObservable();\n    }\n\n    /**\n     * returns true if upload contains an error or is invalid\n     */\n    public hasError(): boolean {\n        return this.upload.error;\n    }\n\n    /**\n     * returns true if validators are set and upload not validated\n     */\n    public isInvalid(): boolean {\n        return this.upload.isValid === false;\n    }\n\n    /**\n     * build form data and send request to server\n     */\n    private uploadFile(): Observable> {\n\n        const uploadBody = this.createUploadBody();\n        return this.http.post(this.options.url, uploadBody, {\n            reportProgress: true,\n            observe: \"events\"\n        });\n    }\n\n    /**\n     * create upload body which will should be send\n     */\n    private createUploadBody(): FormData | File {\n        if (this.options.formData.enabled) {\n            const formData = new FormData();\n            const label    = this.options.formData.name;\n            formData.append(label, this.upload.file, this.upload.fileName);\n            return formData;\n        }\n        return this.upload.file;\n    }\n\n    /**\n     * handle all http events\n     */\n    private handleHttpEvent(event: HttpEvent) {\n        switch (event.type) {\n            case HttpEventType.Sent: this.handleSent(); break;\n            case HttpEventType.UploadProgress: this.handleProgress(event); break;\n            case HttpEventType.Response: this.handleResponse(event); break;\n        }\n    }\n\n    /**\n     * got http error, this not completes the upload\n     * since the user can try do the same upload again\n     */\n    private handleHttpError(error: HttpErrorResponse) {\n        this.upload.state = UploadState.ERROR;\n        this.upload.error = true;\n        this.upload.message = error.message;\n        this.notifyObservers();\n    }\n\n    /**\n     * handle file upload in progress\n     */\n    private handleProgress(event: HttpProgressEvent) {\n        this.upload.state = UploadState.PROGRESS;\n        this.upload.uploaded = event.loaded;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been started\n     */\n    private handleSent() {\n        this.upload.state = UploadState.START;\n        this.notifyObservers();\n    }\n\n    /**\n     * upload has been completed\n     */\n    private handleResponse(res: HttpResponse) {\n\n        this.upload.state   = UploadState.UPLOADED;\n        this.upload.success = res.ok;\n        this.upload.response = {\n            code: res.status,\n            body: res.body\n        };\n\n        this.notifyObservers();\n        this.completeUpload();\n    }\n\n    /**\n     * complete download, complete streams and delete them\n     * notify observers\n     */\n    private completeUpload() {\n        this.upload$.complete();\n        this.cancel$.complete();\n        this.cancel$ = null;\n        this.upload$ = null;\n    }\n\n    /**\n     * send notification to observers\n     */\n    private notifyObservers() {\n        this.upload$.next(this.upload);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResult.html":{"url":"interfaces/ValidationResult.html","title":"interface - ValidationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/ngx-fileupload/services/validation.ts\n        \n\n            \n                Description\n            \n            \n                validation result from ngx fileupload validator\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    if file has not validated, this error message will be shown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    set to true if upload has been validated\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from \"@angular/core\";\n\n/**\n * validation result from ngx fileupload validator\n */\nexport interface ValidationResult {\n    /**\n     * set to true if upload has been validated\n     */\n    valid: boolean;\n    /**\n     * if file has not validated, this error message will be shown\n     */\n    error: string;\n}\n\n/**\n * interface should implemented from custom validators for ngx-fileupload\n * provide under NGX_FILEUPLOAD_VALIDATOR token\n */\nexport interface NgxFileUploadValidator {\n\n    /**\n     * called to validate file\n     */\n    validate(file: File): ValidationResult;\n}\n\n/**\n * InjectionToken for ngx file upload validation classes\n */\nexport const NGX_FILEUPLOAD_VALIDATOR = new InjectionToken(\"Upload validation Service\");\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n            \n            component\n            NgxFileUploadItemComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload-item.component.ts\n            \n            interface\n            FileUploadItemContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/components/ngx-fileupload.component.ts\n            \n            component\n            NgxFileUploadComponent\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/directives/ngx-fileuplad.ts\n            \n            directive\n            NgxFileUploadDirective\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            class\n            UploadModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            IDataNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/model/upload.ts\n            \n            interface\n            UploadData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/file-upload.ts\n            \n            class\n            FileUpload\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/file-upload.ts\n            \n            interface\n            UploadOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/upload-control.ts\n            \n            class\n            UploadControl\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/validation.ts\n            \n            interface\n            NgxFileUploadValidator\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/validation.ts\n            \n            interface\n            ValidationResult\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/ngx-fileupload/services/validation.ts\n            \n            variable\n            NGX_FILEUPLOAD_VALIDATOR\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 8.1.2\n        \n            @angular/common : 8.1.2\n        \n            @angular/compiler : 8.1.2\n        \n            @angular/core : 8.1.2\n        \n            @angular/forms : 8.1.2\n        \n            @angular/platform-browser : 8.1.2\n        \n            @angular/platform-browser-dynamic : 8.1.2\n        \n            @angular/router : 8.1.2\n        \n            angular-pipes : 9.0.2\n        \n            rxjs : 6.5.2\n        \n            tslib : 1.10.0\n        \n            webdriver-manager : ^12.1.5\n        \n            zone.js : 0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadState   (lib/.../upload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/model/upload.ts\n    \n        \n            \n                \n                    \n                        \n                        UploadState\n                    \n                \n                        \n                            \n                                 QUEUED\n                            \n                        \n                        \n                            \n                                Value : queued\n                            \n                        \n                        \n                            \n                                 START\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 PROGRESS\n                            \n                        \n                        \n                            \n                                Value : progress\n                            \n                        \n                        \n                            \n                                 UPLOADED\n                            \n                        \n                        \n                            \n                                Value : uploaded\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INVALID\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxFileUploadModule\n\n\n\ncluster_NgxFileUploadModule_declarations\n\n\n\ncluster_NgxFileUploadModule_exports\n\n\n\n\nNgxFileUploadComponent\n\nNgxFileUploadComponent\n\n\n\nNgxFileUploadModule\n\nNgxFileUploadModule\n\nNgxFileUploadModule -->\n\nNgxFileUploadComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadDirective\n\nNgxFileUploadDirective\n\nNgxFileUploadModule -->\n\nNgxFileUploadDirective->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadItemComponent\n\nNgxFileUploadItemComponent\n\nNgxFileUploadModule -->\n\nNgxFileUploadItemComponent->NgxFileUploadModule\n\n\n\n\n\nNgxFileUploadComponent \n\nNgxFileUploadComponent \n\nNgxFileUploadComponent  -->\n\nNgxFileUploadModule->NgxFileUploadComponent \n\n\n\n\n\nNgxFileUploadDirective \n\nNgxFileUploadDirective \n\nNgxFileUploadDirective  -->\n\nNgxFileUploadModule->NgxFileUploadDirective \n\n\n\n\n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent \n\nNgxFileUploadItemComponent  -->\n\nNgxFileUploadModule->NgxFileUploadItemComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxFileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NGX_FILEUPLOAD_VALIDATOR   (lib/.../validation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/ngx-fileupload/services/validation.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NGX_FILEUPLOAD_VALIDATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\"Upload validation Service\")\n                        \n                    \n\n                \n                    \n                        InjectionToken for ngx file upload validation classes\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
